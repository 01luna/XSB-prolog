
:- import thread_create/3, thread_join/2 from thread.
:- import thread_create/2 from thread.


test:- test_errors.

test_errors:- test1i, test1ia, test1t, test2t, test3i, 
	      test3ia, test3ib, test3t, test3d, test3ta.

test1i:- catch(thread_create(_X,_Y),
	       error(instantiation_error,_,_),
	       writeln(caught_instantiation_error_1i)).
test1ia:- catch(thread_create(_X,_Y),
	       error(instantiation_error,_,_),
	       writeln(caught_instantiation_error_1ia)).
test1t:- catch(thread_create(7,_Y),
	       error(type_error(Type,Culprit),_,_),
	       writeln(caught_type_error_it(Type,Culprit))).
test2t:- catch(thread_create(foo,8),
	       error(type_error(Type,Culprit),_,_),
	       writeln(caught_type_error_2t(Type,Culprit))).
test3i:- catch(thread_create(writeln(hello),_Y,[_D]),
	       error(instantiation_error,_,_),
	       writeln(caught_instantiation_error_3i)).
test3ia:- catch(thread_create(writeln(hello),_Y,[glsize(40),_D]),
	       error(instantiation_error,_,_),
	       writeln(caught_instantiation_error_3ia)).
test3ib:- catch(thread_create(writeln(hello),_Y,_Z),
	       error(instantiation_error,_,_),
	       writeln(caught_instantiation_error_3ib)).
test3t:- catch(thread_create(writeln(hello),_D,alias(foo)),
	       error(type_error(Type,Culprit),_,_),
	       writeln(caught_type_error_3t(Type,Culprit))).
test3d:- catch(thread_create(writeln(hello),_D,[foo]),
	       error(domain_error(Type,Culprit),_,_),
	       writeln(caught_domain_error_3d(Type,Culprit))).
test3ta:- catch(thread_create(writeln(hello),_D,[alias(3.2)]),
	       error(type_error(Type,Culprit),_,_),
	       writeln(caught_type_error_3a(Type,Culprit))).

:- import get_alias/3 from file_io.

test_pos_1:- 
	thread_create(writeln(hello),Tid,[alias(foo3),alias(foo4)]),
	get_alias(F,G,H),writeln(alias(F,G,H)),
	thread_join(Tid),fail.

test(F):- 
	thread_create(writeln(hello),_T,[glsize(100),tcsize(100),pdlsize(100),complsize(100),
	                                alias(thread1)]),
	thread_join(thread1,F).

time_create(N):- 
	cputime(Before),
	test_create(N),
	cputime(After),
	Time is After - Before,
	writeln(time(Time)).
	
test_create(N):- 
	N == 0 -> 
	true
    ;
	thread_create(true,_),
	N1 is N - 1,
	test_create(N1).

test_create_1(N):- 
	N == 0 -> 
	true
    ;
	thread_create(true,Tid),
	thread_join(Tid,_),
	writeln(Tid),
	N1 is N - 1,
	test_create_1(N1).

test_create_2(N):- 
	N == 0 -> 
	true
    ;
	thread_create(true,Tid,[alias(foo)]),
	thread_join(Tid,_),
	writeln(Tid),
	N1 is N - 1,
	test_create_2(N1).

	