/* This demo shows the use of aggregates and assert/retract commands.
*/

john[salary@(1990) -> 20].
john[salary@(1991) -> 40].
john[salary@(1992) -> 60].
john[salary@(1993) -> 70].
john[salary@(1994) -> 70].
john[salary@(1995) -> 80].
john[salary@(1996) -> 70].
john[salary@(1997) -> 50].
john[salary@(1998) -> 80].

mary[salary@(1990) -> 40].
mary[salary@(1991) -> 30].
mary[salary@(1992) -> 60].
mary[salary@(1993) -> 70].
mary[salary@(1994) -> 60].
mary[salary@(1995) -> 60].
mary[salary@(1996) -> 70].
mary[salary@(1997) -> 80].
mary[salary@(1998) -> unknown].

tst1 :- Z := max {X; john[salary@(Year)->X] }, writeln(Z).

tst2 :- Z := max{X ; john[salary@(Year) ->X], Year < 1996},
	writeln(Z).

tst3 :- Z=count{Year; john.salary@(Year) <
    	    	    	max{X; john[salary@(Y2)->X], Y2<Year} },
	writeln(Z).

tst4 :- Z=count{Year; john.salary@(Year) < mary.salary@(Year)},
	writeln(Z).

tst5 :- Z= avg{X [Who]; Who[salary@(Year)->X]}, writeln(Z).

tst6 :- Z= collectset{Year [Who]; Who[salary@(Year) -> X], X < 60},
	writeln(Z).

tst7 :- retract(mary[salary@(Y)->S],S=unknown), writeln(Z).

tst8 :- retract(john[salary@(Y)->S1], mary[salary@(Y)->S2], S1<S2),
	writeln(Z).

tst9 :- retract(john[salary@(Y)->S1] | mary[salary@(Y)->S2], S1<S2),
	writeln(Z).

test :- tell(temp), tst1, tst2, tst3, tst4, tst5, tst6, tst7, tst8, tst9, told.

