:- export output_table/2.

:- import numbervars/3 from num_vars.
:- import get_calls/3, get_returns/2 from tables.
:- import stat_flag/2, term_psc/2, term_type/2, term_arg/3,
	  psc_name/2, psc_arity/2, file_puttoken/3,
	  file_writequoted/2 from machine.
:- import file_put/2 from file_io.

%==============================================================================

output_table(File,Term) :- tell(File), 'output table'(Term), told.

'output table'(Term) :-
	get_calls(Term, C, R), get_returns(C,R),
	numbervars(Term,0,_), alt_write_canonical(Term), nl, fail.
'output table'(_).

%==============================================================================

alt_write_canonical(T) :- stat_flag(11,File), alt_file_write_canonical(File,T).

alt_file_write_canonical(File,Term) :- alt_l_write_canonical(File, Term), fail.
alt_file_write_canonical(_, _).

alt_l_write_canonical(File, Var) :-
	term_type(Var, Type),
	Type =:= 0,
	!,
	file_puttoken(File, 0, Var).
alt_l_write_canonical(File, '$VAR'(N)) :- 
	!,
	l_writevar(File, N).
alt_l_write_canonical(File, []) :-
	!,
	file_put(File, 91),	% '['
	file_put(File, 93).	% ']'
alt_l_write_canonical(File, [X|Y]) :-
	!,
	file_puttoken(File, 5, '''.''('),
	alt_l_write_canonical(File, X),
	file_put(File, 44),		% ','
	alt_l_write_canonical(File, Y),
	file_put(File, 41).		% ')'
alt_l_write_canonical(File, Atom) :-
	term_type(Atom, Type),
	Type =:= 5,
	!,
	file_writequoted(File, Atom).
alt_l_write_canonical(File, Term) :-	% functor(Term, Name, N)
	term_type(Term, Type),
	Type =:= 1, !,		% CS
	term_psc(Term, PSC),
	psc_name(PSC, Name),
	psc_arity(PSC, N),
	( N =:= 0 -> file_writequoted(File, Name)
	; alt_l_writestr_canonical(File, Name, N, Term) ).
alt_l_write_canonical(File, Term) :-
	term_type(Term, Type),
	file_puttoken(File, Type, Term).

alt_l_writestr_canonical(File, Name, N, Term) :-
	file_writequoted(File, Name),
	file_put(File, 40),		% '('
	term_arg(Term, 1, X),
	alt_l_write_canonical(File, X),
	alt_l_writearg_canonical(File, Term, N, 1),
	file_put(File, 41).		% ')'

alt_l_writearg_canonical(_File, _Term, N, N) :- !.
alt_l_writearg_canonical(File, Term, N, M) :-
	L is M + 1,
	file_put(File, 44),	% 0',
	term_arg(Term, L, X),
	alt_l_write_canonical(File, X),
	alt_l_writearg_canonical(File, Term, N, L).

l_writevar(File, N) :-
	( integer(N) ->
		OrdLetter is N mod 26,
		ChrLetter is 65 + OrdLetter,	% 0'A=65
		file_put(File, ChrLetter),
		Number is N // 26,
		( Number =:= 0 -> true
		; file_puttoken(File, 2, Number) 
		)
	; fail
	).
