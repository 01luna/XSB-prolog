:- import set_unify/2 from set_unify.
:- import set_reduce/2 from set_reduce.
:- import numbervars/1 from numbervars.


%---------------- Transformed program ----------------------

qsort__1([list],[list]).
qsort__1(_391,_393) :- 
        [list|_331] = _395, _92 = _397, 
        partition(_331,_130,_340,_347),
        qsort(_340,_360),
        qsort(_347,_357),
        append(_360,[list|_357],_92),
        ArgsOut = [_391,_393],
        set_reduce([_395,_397], ArgsOut),
        valid_types(ArgsOut).
partition__1([list],[_224],[list],[list]).
partition__1(_306,_308,_310,_312) :- 
        [list|_279] = _314, _266 = _316, [list|_242] = _318, _136 = _320, 
        'my =<'(_268,_266),
        partition(_279,_266,_242,_136),
        ArgsOut = [_306,_308,_310,_312],
        set_reduce([_314,_316,_318,_320], ArgsOut),
        valid_types(ArgsOut).
partition__1(_306,_308,_310,_312) :- 
        [list|_279] = _314, _266 = _316, _106 = _318, [list|_244] = _320, 
        'my >'(_268,_266),
        partition(_279,_266,_106,_244),
        ArgsOut = [_306,_308,_310,_312],
        set_reduce([_314,_316,_318,_320], ArgsOut),
        valid_types(ArgsOut).
append__1([list],[_179],[_179]).
append__1(_229,_231,_233) :- 
        [list|_208] = _235, _92 = _237, [list|_190] = _239, 
        append(_208,_92,_190),
        ArgsOut = [_229,_231,_233],
        set_reduce([_235,_237,_239], ArgsOut),
        valid_types(ArgsOut).
test :- abolish_all_tables, fail.
test :- cputime(T0), tp, cputime(T1), T is T1-T0, nl,
   write('Iterate Tp without meta-interpretation took: '),
   write(T), writeln(' secs'), nl, fail.
test :- writeln('=========== Result is ================'),
        nl, show_facts.

unify_sets([],[]).
unify_sets([A|As],[B|Bs]) :- 
       set_unify(A,B), unify_sets(As,Bs).

valid_types([]).
valid_types([T|Ts]) :- T\==[], valid_types(Ts).


%---------------- Definitions of tabled preds --------------

:- table append__1/3.
:- table partition__1/4.
:- table qsort__1/2.

append(_53,_55,_57) :- 
        append__1(_59,_61,_63),
        unify_sets([_53,_55,_57], [_59,_61,_63]).
partition(_53,_55,_57,_59) :- 
        partition__1(_61,_63,_65,_67),
        unify_sets([_53,_55,_57,_59], [_61,_63,_65,_67]).
qsort(_53,_55) :- 
        qsort__1(_57,_59),
        unify_sets([_53,_55], [_57,_59]).

%---------------- Tp ---------------------------------------

tp :- append__1(_54,_56,_58), fail.
tp :- partition__1(_54,_56,_58,_60), fail.
tp :- qsort__1(_54,_56), fail.
tp.


%---------------- Builtin Preds ----------------------------

'my ='(X1,X2) :- 'my =_1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my \=='(X1,X2) :- 'my \==__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my is'(X1,X2) :- 'my is__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my <'(X1,X2) :- 'my <__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my >'(X1,X2) :- 'my >__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my >='(X1,X2) :- 'my >=__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my =<'(X1,X2) :- 'my =<__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my =:='(X1,X2) :- 'my =:=__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).
'my =\='(X1,X2) :- 'my =\=__1'(Y1,Y2), unify_sets([X1,X2],[Y1,Y2]).

:- table 'my =_1'/2, 'my \==__1'/2, 'my is__1'/2.
:- table 'my <__1'/2, 'my >__1'/2, 'my >__1'/2.
:- table 'my =<__1'/2, 'my =:=__1'/2, 'my =\=__1'/2.
'my =_1'(X,X).
'my \==__1'(_,_).
'my is__1'(num,num).
'my <__1'(num,num).
'my >__1'(num,num).
'my >=__1'(num,num).
'my =<__1'(num,num).
'my =:=__1'(num,num).
'my =\=__1'(num,num).


%---------------- Show Result ------------------------------

show_facts :- append__1(_55,_56,_57),
              numbervars(append__1(_55,_56,_57)),
              write(append__1(_55,_56,_57)), nl, fail.
show_facts :- partition__1(_55,_56,_57,_58),
              numbervars(partition__1(_55,_56,_57,_58)),
              write(partition__1(_55,_56,_57,_58)), nl, fail.
show_facts :- qsort__1(_55,_56),
              numbervars(qsort__1(_55,_56)),
              write(qsort__1(_55,_56)), nl, fail.
show_facts.
