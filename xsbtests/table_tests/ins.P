:- import load/1 from loader.

:- load(sets).
:- load(correct).



/*
From sagiv@cs.wisc.edu Mon Dec 25 02:55:20 1995
Date: Mon, 25 Dec 95 01:54:53 -0600
From: sagiv@cs.wisc.edu (Shmuel Sagiv)
To: cram@CS.SunySB.EDU
Subject: insert.shared.F
Content-Length: 2876
X-Lines: 102
Status: RO
*/

/* Fact set for a program that insert an element into a list via destructive updating */

/* The control-flow graph and its edge functions */
/************** Search loop *********************/
assign_var_to_var(start, n1, y, x).
identity(n1, n4).
assign_nil_to_var(n1, p2, t1).
assign_sel_to_var(p2, n2, t1, y, cdr).
assign_nil_to_var(n2, p3, y).
assign_var_to_var(p3, n3, y, t1).
identity(n3, n1).
/************** End Search loop ****************/
assign_new_to_var(n4, n5, t).
assign_nil_to_var(n5, p6, t2).
assign_sel_to_var(p6, n6, t2, y, cdr).
assign_nil_to_sel(n6, p7, t, cdr).
assign_var_to_sel(p7, n7, t, cdr, t2).
assign_nil_to_sel(n7, p8, y, cdr).
assign_var_to_sel(p8, n8, y, cdr, t).
/**************  Clean Temporaries *************/
assign_nil_to_var(n8, n9, t2).
assign_nil_to_var(n9, n10, t1).
assign_nil_to_var(n10, n11, t).
assign_nil_to_var(n11, n12, y).

/* Initial sg: x points to a list */
init_var_edge(start, x, [x]).
init_sel_edge(start, [x], cdr, []).
init_sel_edge(start, [], cdr, []).

init_is_shared(_,_) :- fail.
/*
set(quiet_mode).
clear(interactive_mode).
shell("rm insert.shared.O").
printf("Redirecting stdout to insert.shared.O.").
assign(print_file,insert.shared.O).
*/


/* Queries */

var_edge_query(Var) :-
	var_edge(Var, Z, NX),
	write(var_edge(Var, Z, NX)), nl,
	fail; true.

sel_edge_query(Var) :-
	sel_edge(Var, NX1, Sel, NX2),
	write(sel_edge(Var, NX1, Sel, NX2)), nl,
	fail; true.

is_shared_query(Var) :-
	is_shared(Var, NX),
	write(is_shared(Var, NX)), nl,
	fail; true.

list_of_all_vars([n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12]).

print_one_var(Var) :-
	write('--- '),
	write(Var),
	write(' ---------------------------------------------'), nl,
	var_edge_query(Var),
	sel_edge_query(Var),
	is_shared_query(Var).

print_all_vars([]).
print_all_vars([Var|Vars]) :-
	print_one_var(Var),
	print_all_vars(Vars).

main :-	list_of_all_vars(Vars), print_all_vars(Vars).

bench :- telling(OldFile), tell('ins.shared.time.out'),
	 cputime(T0), main, cputime(T1), T is T1 - T0,
	 nl, nl, nl,
	 write('CPU time = '), write(T), write('s.'), nl,
	 told, tell(OldFile),
 	 abolish_all_tables.


/*

printf("--- n1 --------------------------------------------- \n").
?var_edge(n1,Z,QX).
?sel_edge(n1,QX1,Sel,QX2).
?is_shared(n1,QX).

printf("--- n2 --------------------------------------------- \n").
?var_edge(n2,Z,QX).
?sel_edge(n2,QX1,Sel,QX2).
?is_shared(n2,QX).

printf("--- n3 --------------------------------------------- \n").
?var_edge(n3,Z,QX).
?sel_edge(n3,QX1,Sel,QX2).
?is_shared(n3,QX).

printf("--- n4 --------------------------------------------- \n").
?var_edge(n4,Z,QX).
?sel_edge(n4,QX1,Sel,QX2).
?is_shared(n4,QX).

printf("--- n5 --------------------------------------------- \n").
?var_edge(n5,Z,QX).
?sel_edge(n5,QX1,Sel,QX2).
?is_shared(n5,QX).

printf("--- n6 --------------------------------------------- \n").
?var_edge(n6,Z,QX).
?sel_edge(n6,QX1,Sel,QX2).
?is_shared(n6,QX).

printf("--- n7 --------------------------------------------- \n").
?var_edge(n7,Z,QX).
?sel_edge(n7,QX1,Sel,QX2).
?is_shared(n7,QX).

printf("--- n8 --------------------------------------------- \n").
?var_edge(n8,Z,QX).
?sel_edge(n8,QX1,Sel,QX2).
?is_shared(n8,QX).

printf("--- n9 --------------------------------------------- \n").
?var_edge(n9,Z,QX).
?sel_edge(n9,QX1,Sel,QX2).
?is_shared(n9,QX).

printf("--- n10 --------------------------------------------- \n").
?var_edge(n10,Z,QX).
?sel_edge(n10,QX1,Sel,QX2).
?is_shared(n10,QX).

printf("--- n11 --------------------------------------------- \n").
?var_edge(n11,Z,QX).
?sel_edge(n11,QX1,Sel,QX2).
?is_shared(n11,QX).

printf("--- n12 --------------------------------------------- \n").
?var_edge(n12,Z,QX).
?sel_edge(n12,QX1,Sel,QX2).
?is_shared(n12,QX).


assign(print_file,stdout).
clear(quiet_mode).
set(interactive_mode).

*/