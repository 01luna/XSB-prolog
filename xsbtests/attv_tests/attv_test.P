/* File:      attv_test.P
** Author(s): Baoqiu Cui
** 
** This file contains some basic tests for attributed variables.
** $Id: attv_test.P,v 1.3 1999-11-03 04:32:26 cbaoqiu Exp $
*/

:- import put_attributes/2, get_attributes/3 from machine.
:- import get_atts/2, put_atts/2, attribute/1 from atts.
:- import attv_unify/2 from machine.

test :-
	test_deref,
	test_update,
	test_unify,
	test_attv_interrupt,
	test_implict_unify,
	test_copy_term,
	writeln('PASSED attv_test!').

verify_attributes(Var, Value) :-
	get_attributes(Var, Atts, _),
	write('Var''s attribute = '), writeln(Atts),
	write('Value = '), writeln(Value).

test_deref :-
	Y2 = Y, Y = X,
	put_attributes(X, v(1)),
	put_attributes(X, v(2)),
	get_attributes(X, V1, _M1),
	nonvar(V1), V1 = v(2),
	get_attributes(Y, V3, _M3),
	nonvar(V3), V3 = v(2),
	put_attributes(X, []),
	get_attributes(X, V2, _M2),
	var(V2),
	get_attributes(Y, V4, _M4),
	var(V4),
	put_attributes(Y2, v(3)),
	get_attributes(Y2, V5, _M5),
	nonvar(V5), V5 = v(3),
	writeln('== test_deref OK').
	
test_update :-
	put_attributes(X, v(1,2,3)),
	(put_attributes(X, v(2,3,4)),
	 put_attributes(X, v(3,4,5)),
	 get_attributes(X, V, _OM),
	 nonvar(V), V = v(3,4,5),
	 writeln('== test_update 1 OK')
         ;
	 get_attributes(X, Vold, _OM1),
	 nonvar(Vold), Vold = v(1,2,3),
	 writeln('== test_update 2 OK')
	),
	fail.
test_update.


test_unify :-
	put_attributes(X, v(1)),
	Y = X,	% notice the order: op2 = X
	X = Z,
	get_attributes(Y, VY, _MY),
	nonvar(VY), VY = v(1),
	get_attributes(Z, VZ, _MZ),
	nonvar(VZ), VZ = v(1),
	writeln('== test_unify OK').

test_attv_interrupt :-
	put_attributes(X, v(1)),
	Y = 5,
	Y = X,	% unify(ATTV, Y) ???
	writeln('== test_attv_interrupt OK').

test_implict_unify :-
	put_attributes(X, v(11)),
	put_attributes(Y, v(22)),
	handle_interrupts([(X,a), (Y,b)]),
	X == a, Y == b,
	writeln('== test_implict_unify OK').

handle_interrupts([]) :- !.
handle_interrupts([(Var,Value)|Ints]) :-
	get_attributes(Var, Atts, _),
	write('Attribute = '), writeln(Atts),
	attv_unify(Var, Value),
	handle_interrupts(Ints).

test_copy_term :-
	put_attributes(X, v(a)),
	copy_term(f(X,g(X)), T),
	T = f(Y,g(Z)),			% Y and Z are shared in T
	put_attributes(Y, v(b)),	% so update Y will also update Z
	get_attributes(Y, VY, _),
	get_attributes(Z, VZ, _),
	nonvar(VY), VY = v(b),
	nonvar(VZ), VZ = v(b),
	writeln('== test_copy_term OK').
