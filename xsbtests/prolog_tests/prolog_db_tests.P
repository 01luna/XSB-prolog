:- import empty_db/1, assert_in_db/2, assert_in_db/3, call_in_db/2 from prolog_db.
:- import load_in_db/2, pure_call_in_db/2 from prolog_db.
:- import union_db/3, intersect_db/3, difference_db/3, subset_db/2, disjoint_db/2,
    clause_in_db/3, dump_db/2, retractall_in_db/3, sym_diff_db/3
    from prolog_db.

:- import empty_dbi/1, is_dbi/1, assert_in_dbi/3, assert1_in_dbi/3, assert_in_dbi/2,
   retractall_in_dbi/3, clause_in_dbi/3, call_in_dbi/2, load_in_dbi/3, load_in_dbi/2,
   subset_dbi/2, union_dbi/3, intersect_dbi/3, difference_dbi/3, sym_diff_dbi/3,
   disjoint_dbi/2, dump_dbi/2, pure_call_in_dbi/2 from prolog_db.

:- import intern_termhash/2 from machine.

:- import concat_atom/2 from string.
:- import reverse/2 from basics.

test :- testdb,fail.
test :- testretract,fail.
test :- testdbops,fail.
test :- testdbi,fail.
test :- testdbiops,fail.
test.

testdb :-
	(do_all
	 empty_db(_DB0),
	 assert_in_db(app([],_L,_L),_DB0,_DB1),
	 assert_in_db((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
	 call_in_db(app(XX,YY,[a,b,c]),_DB2),
	 writeln(test1(app(XX,YY,[a,b,c])))
	),
	fail.
testdb :- 
	(do_all
	 empty_db(_DB0),
	 assert_in_db(app([],_L,_L),_DB0,_DB1),
	 assert_in_db((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
	 assert_in_db(nrev([],[]),_DB2,_DB3),
	 assert_in_db((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),app(_RR1,[_X],_RR)),_DB3,_DB4),
	 pure_call_in_db((cputime(_T0),
			  (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test2(REV)),fail ; true),
			  cputime(_T1),_Time is _T1-_T0
			 ),
			 _DB4)
	),
	fail.
testdb :- 
	(do_all
	 empty_db(_DB2),
	 assert_in_db(nrev([],[]),_DB2,_DB3),
	 assert_in_db((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),basics:append(_RR1,[_X],_RR)),_DB3,_DB4),
	 pure_call_in_db((cputime(_T0),
			  (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test3(REV)),fail ; true),
			  cputime(_T1),_Time is _T1-_T0
			 ),
			 _DB4)
	),
	fail.
testdb :-
	(do_all
	 xsb_configuration(libdir,LibDir),
	 concat_atom([LibDir,'/prolog_db.P'],Prolog_db_file),
	 load_in_db(Prolog_db_file,_DB),
	 call_in_db((empty_db(_DB0),
		     assert_in_db(app([],_L,_L),_DB0,_DB1),
		     assert_in_db((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
		     assert_in_db(nrev([],[]),_DB2,_DB3),
		     assert_in_db((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),app(_RR1,[_X],_RR)),_DB3,_DB4),
		     pure_call_in_db((cputime(_T0),
				      (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test4(REV)),fail ; true),
				      cputime(_T1),_Time is _T1-_T0
				     ),_DB4)
		    ),_DB)
	),
	fail.
testdb :-
	empty_db(DBa0),
	assert_in_db(app([],_L,_L),DBa0,DBa1),
	assert_in_db((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),DBa1,DBa2),
	empty_db(DBb0),
	assert_in_db((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),DBb0,DBb1),
	assert_in_db(app([],_L,_L),DBb1,DBb2),
	(DBa2 == DBb2
	 ->	writeln('test5 succeeded')
	 ;	writeln('test5 failed')
	),
	fail.
testdb :-
	Clauses = [p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7),p(8),p(9),
		   p(80),p(81),p(82),p(83),p(84),p(85),p(86),p(87),p(88),p(89),
		   p(10),p(11),p(12),p(13),p(14),p(15),p(16),p(17),p(18),p(19),
		   p(20),p(21),p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29),
		   p(40),p(41),p(42),p(43),p(44),p(45),p(46),p(47),p(48),p(49),
		   p(30),p(31),p(32),p(33),p(34),p(35),p(36),p(37),p(38),p(39),
		   p(60),p(61),p(62),p(63),p(64),p(65),p(66),p(67),p(68),p(69),
		   p(70),p(71),p(72),p(73),p(74),p(75),p(76),p(77),p(78),p(79),
		   p(50),p(51),p(52),p(53),p(54),p(55),p(56),p(57),p(58),p(59),
		   p(20),p(21),p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29),
		   p(90),p(91),p(92),p(93),p(94),p(95),p(96),p(97),p(98),p(99)],
	reverse(Clauses,RClauses),
	assert_in_db(Clauses,DB1),
	assert_in_db(RClauses,DB2),
	(DB1 == DB2
	 ->	writeln('test6 succeeded')
	 ;	writeln('test6 failed')
	),
	fail.

testdbops :-
    pdb([[48,240,2],[48,600,3],[0,1,1]],(p(_X,_Y):-q(_Z)),DB1),
    pdb([[0,252,2],[0,660,3],[0,2,2]],(p(_X,_Y):-q(_Z)),DB2),
    pdb([[48,240,4],[48,600,6],[0,0,1]],(p(_X,_Y):-q(_Z)),DB3),
    
    writeln(dbs_built),
    (do_all
     union_db(DB1,DB2,DBR),
     naive_union_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(union1)) ; writeln(error(union1)))
    ),
    (do_all
     union_db(DB2,DB1,DBR),
     naive_union_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(union2)) ; writeln(error(union2)))
    ),
    (do_all
     intersect_db(DB1,DB2,DBR),
     naive_intersect_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(intersect1)) ; writeln(error(intersect1)))
    ),
    (do_all
     intersect_db(DB2,DB1,DBR),
     naive_intersect_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(intersect2)) ; writeln(error(intersect2)))
    ),
    (do_all
     difference_db(DB1,DB2,DBR),
     naive_difference_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(difference1)) ; writeln(error(difference1)))
    ),
    (do_all
     difference_db(DB2,DB1,DBR),
     naive_difference_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(difference2)) ; writeln(error(difference2)))
    ),
    (do_all
     (subset_db(DB3,DB1) -> A=1 ; A=0),
     (naive_subset_db(DB3,DB1) -> B=1 ; B=0),
     (A==B -> writeln(success(subset1)) ; writeln(error(subset1)))
    ),
    (do_all
     (subset_db(DB1,DB3) -> A=1 ; A=0),
     (naive_subset_db(DB1,DB3) -> B=1 ; B=0),
     (A==B -> writeln(success(subset2)) ; writeln(error(subset2)))
    ),
    (do_all
     difference_db(DB1,DB2,DBRa),
     (disjoint_db(DBRa,DB2) -> A=1 ; A=0),
     naive_difference_db(DB1,DB2,DBRb),
     (naive_disjoint_db(DBRb,DB2) -> B=1 ; B=0),
     (DBRa == DBRb -> writeln(success(disjoint1)) ; writeln(error(disjoint1)))
    ),
    (do_all
     sym_diff_db(DB1,DB2,DBR),
     naive_sym_diff_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(sym_diff1)) ; writeln(error(sym_diff1)))
    ),
    (do_all
     sym_diff_db(DB2,DB1,DBR),
     naive_sym_diff_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(sym_diff2)) ; writeln(error(sym_diff2)))
    ),
    (do_all
     difference_db(DB1,DB2,DBRa),
     difference_db(DB2,DB1,DBRb),
     union_db(DBRa,DBRb,DBRc),
     sym_diff_db(DB1,DB2,DBRd),
     (DBRc == DBRd -> writeln(success(sym_diff_def)) ; writeln(error(sym_diff_def)))
    ),
    true.

testdbi :-
	(do_all
	 empty_dbi(_DB0),
	 assert_in_dbi(app([],_L,_L),_DB0,_DB1),
	 assert_in_dbi((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
	 call_in_dbi(app(XX,YY,[a,b,c]),_DB2),
	 writeln(test1i(app(XX,YY,[a,b,c])))
	),
	fail.
testdbi :- 
	(do_all
	 empty_dbi(_DB0),
	 assert_in_dbi(app([],_L,_L),_DB0,_DB1),
	 assert_in_dbi((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
	 assert_in_dbi(nrev([],[]),_DB2,_DB3),
	 assert_in_dbi((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),app(_RR1,[_X],_RR)),_DB3,_DB4),
	 pure_call_in_dbi((cputime(_T0),
			  (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test2i(REV)),fail ; true),
			  cputime(_T1),_Time is _T1-_T0
			 ),
			 _DB4)
	),
	fail.
testdbi :- 
	(do_all
	 empty_dbi(_DB2),
	 assert_in_dbi(nrev([],[]),_DB2,_DB3),
	 assert_in_dbi((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),basics:append(_RR1,[_X],_RR)),_DB3,_DB4),
	 pure_call_in_dbi((cputime(_T0),
			  (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test3i(REV)),fail ; true),
			  cputime(_T1),_Time is _T1-_T0
			 ),
			 _DB4)
	),
	fail.
testdbi :-
	(do_all
	 xsb_configuration(libdir,LibDir),
	 concat_atom([LibDir,'/prolog_db.P'],Prolog_db_file),
	 load_in_dbi(Prolog_db_file,_DB),
	 call_in_dbi((empty_dbi(_DB0),
		     assert_in_dbi(app([],_L,_L),_DB0,_DB1),
		     assert_in_dbi((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),_DB1,_DB2),
		     assert_in_dbi(nrev([],[]),_DB2,_DB3),
		     assert_in_dbi((nrev([_X|_LL],_RR) :- nrev(_LL,_RR1),app(_RR1,[_X],_RR)),_DB3,_DB4),
		     pure_call_in_dbi((cputime(_T0),
				      (nrev([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z],REV),writeln(test4i(REV)),fail ; true),
				      cputime(_T1),_Time is _T1-_T0
				     ),_DB4)
		    ),_DB)
	),
	fail.
testdbi :-
	empty_dbi(DBa0),
	assert_in_dbi(app([],_L,_L),DBa0,DBa1),
	assert_in_dbi((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),DBa1,DBa2),
	empty_dbi(DBb0),
	assert_in_dbi((app([_X|_L1],_L2,[_X|_L3]):-app(_L1,_L2,_L3)),DBb0,DBb1),
	assert_in_dbi(app([],_L,_L),DBb1,DBb2),
	(DBa2 == DBb2
	 ->	writeln('test5i succeeded')
	 ;	writeln('test5i failed')
	),
	fail.
testdbi :-
	Clauses = [p(0),p(1),p(2),p(3),p(4),p(5),p(6),p(7),p(8),p(9),
		   p(80),p(81),p(82),p(83),p(84),p(85),p(86),p(87),p(88),p(89),
		   p(10),p(11),p(12),p(13),p(14),p(15),p(16),p(17),p(18),p(19),
		   p(20),p(21),p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29),
		   p(40),p(41),p(42),p(43),p(44),p(45),p(46),p(47),p(48),p(49),
		   p(30),p(31),p(32),p(33),p(34),p(35),p(36),p(37),p(38),p(39),
		   p(60),p(61),p(62),p(63),p(64),p(65),p(66),p(67),p(68),p(69),
		   p(70),p(71),p(72),p(73),p(74),p(75),p(76),p(77),p(78),p(79),
		   p(50),p(51),p(52),p(53),p(54),p(55),p(56),p(57),p(58),p(59),
		   p(20),p(21),p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29),
		   p(90),p(91),p(92),p(93),p(94),p(95),p(96),p(97),p(98),p(99)],
	reverse(Clauses,RClauses),
	assert_in_dbi(Clauses,DB1),
	assert_in_dbi(RClauses,DB2),
	(DB1 == DB2
	 ->	writeln('test6i succeeded')
	 ;	writeln('test6i failed')
	),
	fail.

testdbiops :-
    pdb([[48,240,2],[48,600,3],[0,1,1]],(p(_X,_Y):-q(_Z)),DB1),
    intern_termhash(DB1,H1),
    pdb([[0,252,2],[0,660,3],[0,2,2]],(p(_X,_Y):-q(_Z)),DB2),
    intern_termhash(DB2,H2),
    pdb([[48,240,4],[48,600,6],[0,0,1]],(p(_X,_Y):-q(_Z)),DB3),
    intern_termhash(DB3,H3),
    
    writeln(dbis_built),
    (do_all
     union_dbi(H1,H2,HR),
     intern_termhash(DBR,HR),
     naive_union_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(union1i)) ; writeln(error(union1i)))
    ),
    (do_all
     union_dbi(H2,H1,HR),
     intern_termhash(DBR,HR),
     naive_union_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(union2i)) ; writeln(error(union2i)))
    ),
    (do_all
     intersect_dbi(H1,H2,HR),
     intern_termhash(DBR,HR),
     naive_intersect_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(intersect1i)) ; writeln(error(intersect1i)))
    ),
    (do_all
     intersect_dbi(H2,H1,HR),
     intern_termhash(DBR,HR),
     naive_intersect_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(intersect2i)) ; writeln(error(intersect2i)))
    ),
    (do_all
     difference_dbi(H1,H2,HR),
     intern_termhash(DBR,HR),
     naive_difference_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(difference1i)) ; writeln(error(difference1i)))
    ),
    (do_all
     difference_dbi(H2,H1,HR),
     intern_termhash(DBR,HR),
     naive_difference_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(difference2i)) ; writeln(error(difference2i)))
    ),
    (do_all
     (subset_dbi(H3,H1) -> A=1 ; A=0),
     (naive_subset_db(DB3,DB1) -> B=1 ; B=0),
     (A==B -> writeln(success(subset1i)) ; writeln(error(subset1i)))
    ),
    (do_all
     (subset_dbi(H1,H3) -> A=1 ; A=0),
     (naive_subset_db(DB1,DB3) -> B=1 ; B=0),
     (A==B -> writeln(success(subset2i)) ; writeln(error(subset2i)))
    ),
    (do_all
     difference_dbi(H1,H2,HRa),
     intern_termhash(DBRa,HRa),
     (disjoint_dbi(HRa,H2) -> A=1 ; A=0),
     naive_difference_db(DB1,DB2,DBRb),
     (naive_disjoint_db(DBRb,DB2) -> B=1 ; B=0),
     (DBRa == DBRb -> writeln(success(disjoint1i)) ; writeln(error(disjoint1i)))
    ),
    (do_all
     sym_diff_dbi(H1,H2,HR),
     intern_termhash(DBR,HR),
     naive_sym_diff_db(DB1,DB2,DBRa),
     (DBR == DBRa -> writeln(success(sym_diff1i)) ; writeln(error(sym_diff1i)))
    ),
    (do_all
     sym_diff_dbi(H2,H1,HR),
     intern_termhash(DBR,HR),
     naive_sym_diff_db(DB2,DB1,DBRa),
     (DBR == DBRa -> writeln(success(sym_diff2i)) ; writeln(error(sym_diff2i)))
    ),
    (do_all
     difference_dbi(H1,H2,HRa),
     intern_termhash(DBRa,HRa),
     difference_dbi(H2,H1,HRb),
     intern_termhash(DBRb,HRb),
     union_dbi(HRa,HRb,HRc),
     intern_termhash(DBRc,HRc),
     sym_diff_dbi(H1,H2,HRd),
     intern_termhash(DBRd,HRd),
     (DBRc == DBRd -> writeln(success(sym_diff_defi)) ; writeln(error(sym_diff_defi)))
    ),
    true.

pdb(Sizes,Term,DB) :-
    term_variables(Term,Vars),
    findall(Term,gentup(Sizes,Vars),Tups),
    empty_db(DB0),
    assert_in_db(Tups,DB0,DB).

pdb(Sizes,DB) :-
    findall((Tup:-B),(gentup(Sizes,List),Tup=..[p|List],(B=a;B=b;B=c)),Tups),
    empty_db(DB0),
    assert_in_db(Tups,DB0,DB).

gentup([],[]).
gentup([[Lo,Hi,Inc]|R],[I|S]) :-
    for(I,Lo,Hi,Inc),
    gentup(R,S).

for(Lo,Lo,Hi,_Inc) :-
    Lo =< Hi.
for(I,Lo,Hi,Inc) :-
    Lo1 is Lo+Inc,
    Lo1 =< Hi,
    for(I,Lo1,Hi,Inc).

%% old union of DBs
naive_union_db(DB1,DB2,DB3) :-
    findall((H:-B),clause_in_db(H,B,DB1),Clauses),
    assert_in_db(Clauses,DB2,DB3).

naive_intersect_db(DB1,DB2,DB3) :-
	findall((H:-B),(clause_in_db(H,B,DB1),clause_in_db(H,B,DB2)),Rules),
	empty_db(DB4),
	assert_in_db(Rules,DB4,DB3).

naive_difference_db(DB1,DB2,DB3) :-
	findall((H:-B),(clause_in_db(H,B,DB1),
			\+clause_in_db(H,B,DB2)
		       ),
		       Clauses),
	empty_db(DB0),
	assert_in_db(Clauses,DB0,DB3).

naive_subset_db(DB1,DB2) :-
    \+ (clause_in_db(H,B,DB1),
	\+ clause_in_db(H,B,DB2)).

naive_disjoint_db(DB1,DB2) :-
    \+ (clause_in_db(H,B,DB1),
	clause_in_db(H,B,DB2)).

naive_sym_diff_db(DB1,DB2,DB3) :-
	findall((H:-B),
		(clause_in_db(H,B,DB1),
		 \+ clause_in_db(H,B,DB2)
		 ;
		 clause_in_db(H,B,DB2),
		 \+ clause_in_db(H,B,DB1)
		),
		Clauses),
	empty_db(DB0),
	assert_in_db(Clauses,DB0,DB3).

:- import numbervars/1 from num_vars.
mydump(DB) :-
    (do_all
     clause_in_db(Head,Body,DB),
     numbervars(Head-Body),
     writeq(Head), write(' :- '), writeq(Body),
     writeln('.')
    ).


testretract :-
    nl, writeln('test_retract_1:'),
    assert_in_db([pr1(a,b,b),pr1(a,a,b),pr1(a,b,c)],[],DB0),
    retractall_in_db(pr1(X,X,_Y),DB0,DB1),
    mydump(DB1).
testretract :-
    nl, writeln('test_retract_2:'),
    assert_in_db([pr2(A,B,B),pr2(A,A,B),pr2(A,B,_C)],[],DB0),
    retractall_in_db(pr2(x,x,y),DB0,DB1),
    mydump(DB1).
testretract :-
    nl, writeln('test_retract_2a:'),
    assert_in_db([pr2a(A,B,B),pr2a(A,A,B),pr2a(A,B,_C),pr2a(a,_X,b)],[],DB0),
    retractall_in_db(pr2a(A,x,A),DB0,DB1),
    mydump(DB1).
testretract :-
    nl, writeln('test_retract_3:'),
    findall(pr3(I,J,K),(for(I,1,3,1),for(J,1,3,1),for(K,1,3,1)),Clauses),
    assert_in_db(Clauses,[],DB1),
    retractall_in_db([pr3(1,_,_),pr3(_,1,_),pr3(_,_,1)],DB1,DB2),
    mydump(DB2).
testretract :-
    nl, writeln('test_retract_4:'),
    findall(pr4(I,J,K),(for(I,1,3,1),for(J,1,3,1),for(K,1,3,1)),Clauses),
    assert_in_db(Clauses,[],DB1),
    retractall_in_db([pr4(_,_,1),pr4(_,1,_),pr4(1,_,_)],DB1,DB2),
    mydump(DB2).
testretract :-
    nl, writeln('test_retract_4:'),
    findall(pr5(2,I),for(I,1,1000,1),L),
    assert_in_db(pr5(1,27),DB0),
    assert_in_db(L,DB0,DB1),
    retractall_in_db(pr5(2,_),DB1,DB2),
    mydump(DB2).
    