
:- [altcdf].

:- import load_extensional_facts/1,
	  load_intensional_rules/1 from cdf_io.
:- import update_all_components/2 from cdf_comps_noshare.
:- import load_component/3 from cdf_comps_share.
:- import retractallExtTerm/1 from cdf_init_cdf.
:- import hasAttr/3 from cdf_init_cdf.

loadfacts:- 
	load_extensional_facts('type0_testdir').
%	load_intensional_rules('type0_testdir').

testreturns:- 

teshasAttrtreturns:- 
% bbb
	test_display(hasAttr(cid(c2,test),rid(r2,test),cid(c12,test))),
% test bbf inh: X = o12 (not c12)
	test_display(hasAttr(cid(c2,test),rid(r2,test),X)),
% test bfb inh: X = rid(prod(rid(r2,test),rid(r2,test)),test); X = rid(r2,test)
	test_display(hasAttr(cid(c2,test),X,cid(c12,test))),
% test bfb inh: X = rid(prod(rid(r2,test),rid(r2,test)),test); X = r4, X = r1.
	test_display(hasAttr(oid(o2,test),X,cid(c12,test))),
% test fbb inh: X = cid(c2,test);
	test_display(hasAttr(X,rid(r2,test),cid(c12,test))),
% test fbb inh: X = cid(o2,test);
	test_display(hasAttr(X,rid(r1,test),cid(c12,test))),
% test fbb inh: X = cid(o2,test);
	test_display(hasAttr(X,rid(r1,test),cid(c12,test))),
% test bff inh:  X = rid(r4,test) Y = oid(o12,test);
%                     X = rid(r2,test) Y = oid(o12,test);
%                     X = rid(r1,test) Y = cid(c12,test);
%                     X = rid(prod(rid(r2,test),rid(r2,test)),test) Y = cid(c12,test);
	test_display(hasAttr(oid(o2,test),X,Y)).

test_display(Goal):- 
	writeln('--------------------'),
	call(Goal),
	writeln(Goal),
	fail.
test_display(_).


end_of_file.

hasAttr_ext(cid(c2,test),rid(r2,test),oid(o12,test)).
hasAttr_ext(oid(o2,test),rid(r1,test),cid(c12,test)).
hasAttr_ext(oid(o2,test),rid(r4,test),cid(c12,test)).
hasAttr_ext(oid(o2,test),rid(r2,test),oid(o12,test)).
hasAttr_ext(oid(o2,test),rid(r4,test),oid(o12,test)).
	

end_of_file.

reset:- 
	shell('rm -rf cdfcomp*').

updtest1:- 
	load_extensional_facts('cdftest1'),
	load_intensional_rules('cdftest1'),
	update_all_components('mytest/cdfcomp1',[action(create)]).

mkinit:- shell('cp cdftest1/initialization_file.P cdfcomp1/test').

loadtest1:- 
	load_component(testo1,'mytest/cdfcomp1',[]).

loadtest1a:- 
	load_component(test,'mytest/cdfcomp1',[]).

loadtest2:- 
	load_component(testo1,'mytest/cdfcomp1',[force(yes)]).

create_new_version :-
	assert(cdf_flags(dirty,test)),
	update_all_components('mytest/cdfcomp1',[action(in_place)]).

version_conflict :-
	load_component(test,'mytest/cdfcomp1',[version(0)]),
	load_component(testo1,'mytest/cdfcomp1',[version(1)]).

create_second_copy :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	update_all_components('mytest/cdfcomp2',[action(create)]).

path_conflict :-
	load_component(test,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[]).

force_path_conflict :-
	load_component(test,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[action(union)]).

update_in_place_after_conflict :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[action(union)]),
	%% should not update
	update_all_components('mytest/cdfcomp2',[action(in_place)]).

load_twice :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp1',[force(yes)]).
	
check_deps :-
	load_component(testo1,'mytest/cdfcomp2',[]),
	retractallExtTerm(isa_ext(oid(o1,testo1),cid(c1,test))),
	update_all_components('mytest/cdfcomp2',[action(in_place)]).



end_of_file.
