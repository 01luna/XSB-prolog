/* File:      file_io.P
** Author(s): kifer
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1999
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: file_io.P,v 1.8 1999/08/12 18:07:22 kifer Exp $
** 
*/


:- compiler_options([cpp_on]).
#include "io_defs.h"
#include "standard.h"
#include "flag_defs.h"


	       /********************************/
	       /*  Formatted I/O    	       */
	       /********************************/

fmt_write(Fmt, Args) :-
       stat_flag(CURRENT_OUTPUT, FileDes),   % Current output
	fmt_write(FileDes, Fmt, Args).

fmt_write(FileDes, Fmt, Args) :-
       ( callable(Args) -> formatted_io(FMT_WRITE, FileDes, Fmt, Args, _Ret)
         ;
	 abort('Usage: fmt_write([+FileDes,] +FmtString, args(+A1,+A2,...))')
       ).

fmt_write_string(Str, Fmt, Args) :-
	( var(Str), callable(Args)
    	 -> formatted_io(FMT_WRITE_STRING, Str, Fmt, Args, _Ret)
	 ; abort('Usage: fmt_write_string(-OutputString, +FmtString, args(+A1,...))')
        ).


fmt_read(Fmt,Result,Status) :-
        stat_flag(CURRENT_INPUT, FileDes),  % Current input
	fmt_read(FileDes, Fmt,Result,Status).

fmt_read(FileDes, Fmt, Result, Status) :-
	(compound(Result), var(Status)
		     -> formatted_io(FMT_READ, FileDes, Fmt, Result, Status)
	;
	 abort('Usage: fmt_read([+FileDes,] +FmtString, result(-R1,-R2,...), -RetCode)')
    	).


/***************************************************************/
/*    	      	      	      	      	      	      	       */
/*       file_flush, file_seek, file_truncate, file_pos, etc.  */
/*    	      	      	      	      	      	      	       */
/***************************************************************/

file_flush(FileDes, Ret) :-
	file_function(FILE_FLUSH, FileDes, Ret, _D, _E, _,_).
file_seek(FileDes, Offset, Place, Ret) :-
	file_function(FILE_SEEK, FileDes, Offset, Place, Ret, _,_).
file_truncate(FileDes, Length, Ret) :-
	file_function(FILE_TRUNCATE, FileDes, Length, Ret, _E, _,_).
file_pos(FileDes, Pos) :-
	file_function(FILE_POS, FileDes, Pos, _Ret, _E, _,_).
file_open(FileName, RWMode, FileDes) :-
	file_function(FILE_OPEN, FileName, RWMode, FileDes, _E, _,_).
file_close(FileDes) :-
	file_function(FILE_CLOSE,FileDes,_X,_Y,_Z, _,_).
file_get(FileDes,Char) :-
	file_function(FILE_GET, FileDes, Char, _X, _Y, _,_).
file_put(FileDes,Char) :-
	file_function(FILE_PUT, FileDes, Char, _X, _Y, _,_).

%% These are lower level than file_read_line_atom/list
%% Therefore, they don''t check their arguments.
%% file_getbuf doesn''t intern ToString.
file_getbuf(FileDes, ByteCount, ToString, BytesRead) :-
	file_function(FILE_GETBUF, FileDes,ByteCount,ToString,BytesRead,_,_).

file_getbuf_atom(FileDes, ByteCount, ToAtom, BytesRead) :-
	(var(ToAtom), var(BytesRead) ->
	    file_function(FILE_GETBUF, FileDes,ByteCount,TmpStr,BytesRead,_,_),
	    intern_string(TmpStr, ToAtom)
	;
	 abort('Usage: file_getbuf_atom([+FileDes,] +ByteCount, -ToAtom, -BytesRead)')
        ).

file_getbuf_atom(ByteCount, ToAtom, BytesRead) :-
	stat_flag(CURRENT_INPUT, FileDes),
	(var(ToAtom), var(BytesRead) ->
	    file_function(FILE_GETBUF, FileDes,ByteCount,TmpStr,BytesRead,_,_),
	    intern_string(TmpStr, ToAtom)
	;
	 abort('Usage: file_getbuf_atom([+FileDes,] +ByteCount, -ToAtom, -BytesRead)')
        ).

file_getbuf_list(FileDes, ByteCount, ToList, BytesRead) :-
	(var(ToList), var(BytesRead) ->
	    file_function(FILE_GETBUF, FileDes,ByteCount,TmpStr,BytesRead,_,_),
	    atom_codes(TmpStr, ToList)
	;
	abort('Usage: file_getbuf_list([+FileDes,] +ByteCount, -ToList, -BytesRead)')).

file_getbuf_list(ByteCount, ToList, BytesRead) :-
	stat_flag(CURRENT_INPUT, FileDes),
	(var(ToList), var(BytesRead) ->
	    file_function(FILE_GETBUF, FileDes,ByteCount,TmpStr,BytesRead,_,_),
	    atom_codes(TmpStr, ToList)
	;
	abort('Usage: file_getbuf_list([+FileDes,] +ByteCount, -ToList, -BytesRead)')).

file_putbuf(FileDes, ByteCount, FromString, Offset, BytesWritten) :-
	(var(BytesWritten) ->
	    file_function(FILE_PUTBUF, FileDes,ByteCount,FromString,Offset,BytesWritten,_)
	;
	abort('Usage: file_putbuf([+FileDes,] +ByteCount, +FromString, +Offset, -BytesWritten)')
    ).

file_putbuf(ByteCount, FromString, Offset, BytesWritten) :-
	stat_flag(CURRENT_OUTPUT, FileDes),
	(var(BytesWritten) ->
	    file_function(FILE_PUTBUF, FileDes,ByteCount,FromString,Offset,BytesWritten,_)
	;
	abort('Usage: file_putbuf([+FileDes,] +ByteCount, +FromString, +Offset, -BytesWritten)')
	).

%% This doesn''t intern Str
file_read_line(FileDes, Str, IsFullLine) :-
	( var(Str), var(IsFullLine) ->
	    file_function(FILE_READ_LINE, FileDes, Str, IsFullLine, _, _,_)
	    ;
	    abort('Usage: file_read_line([+FileDes,] -InputStr, -IsFullLine)')
        ).

%% Like file_read_line, but Str becomes an interned atom
file_read_line_atom(FileDes, Str, IsFullLine) :-
	( var(Str), var(IsFullLine) ->
	    file_function(FILE_READ_LINE, FileDes, UnStr, IsFullLine, _, _,_),
	    intern_string(UnStr,Str)
	    ;
	    abort('Usage: file_read_line_atom([+FileDes,] -InputStr, -IsFullLine)')
        ).

%% Read line from current input stream (previously set by 'see')
%% Intern string
file_read_line_atom(Str, IsFullLine) :-
	stat_flag(CURRENT_INPUT, FileDes),  % Current input
	file_read_line_atom(FileDes, Str, IsFullLine).

%% Like file_read_line_atom, but returns list of characters
file_read_line_list(FileDes, CharLst, IsFullLine) :-
	( var(Str), var(IsFullLine) ->
	    file_function(FILE_READ_LINE, FileDes, Str, IsFullLine, _, _,_),
	    atom_codes(Str,CharLst)
	    ;
	    abort('Usage: file_read_line_list([+FileDes,] -InputStr, -IsFullLine)')
        ).

%% Read line from current input stream (previously set by 'see')
%% Return list of chars
file_read_line_list(Lst, IsFullLine) :-
	stat_flag(CURRENT_INPUT, FileDes),  % Current input
	file_read_line_list(FileDes, Lst, IsFullLine).

%% Write Str out to FileDes. Str must be atom or list of chars.
%% This is checked in C, by the builtin.
file_write_line(FileDes, Str, Offset) :-
	file_function(FILE_WRITE_LINE, FileDes, Str, Offset, _,_,_).

%% Same as file_write_line/3, but write to current output
file_write_line(Str, Offset) :-
	stat_flag(CURRENT_OUTPUT, FileDes),  % Current output
	file_function(FILE_WRITE_LINE, FileDes, Str, Offset, _,_,_).


/* Fancy stuff */
%% Like freopen
file_reopen(FileName, Mode, FileDes,ErrCode) :-
	file_function(FILE_REOPEN, FileName,  Mode, FileDes, ErrCode,_,_).

%% Like dup2: make DestFileDes into the same file descriptor as SrcFileDes
file_clone(SrcFileDes, DestFileDes, ErrorCode) :-
	file_function(FILE_CLONE, SrcFileDes, DestFileDes, ErrorCode,_,_,_).


/***************************************************************/
/*    	      	      	      	      	      	      	       */
/*       file_stat, file_size 	      	   	     	       */
/*    	      	      	      	      	      	      	       */
/***************************************************************/

file_time(FileName, Time) :- file_stat(FileName,FILE_STAT_TIME,Time).
file_size(FileName, Size) :- file_stat(FileName,FILE_STAT_SIZE,Size).

/***************************************************************
**
** print_file_contents/1
**
****************************************************************/

print_file_contents(Filename) :-
	stat_flag(CURRENT_OUTPUT, ToFileDes),  % current output
	print_file_contents(Filename, ToFileDes).

print_file_contents(FileName, ToFileDes) :-
	file_open(FileName, OREAD, Fdes),
	print_fd_contents(Fdes, ToFileDes),
	file_close(Fdes).
print_fd_contents(Fdes, ToFileDes) :-
	(file_read_line(Fdes, Line, _) -> file_write(ToFileDes, Line)),
	print_fd_contents(Fdes, ToFileDes),
	fail.        	 %% so as to not leave choice points around
print_fd_contents(_,_).


