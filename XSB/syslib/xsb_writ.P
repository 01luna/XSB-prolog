/* File:      xsb_writ.P
** Author(s): Kostis F. Sagonas
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: xsb_writ.P,v 1.7 1999/08/11 20:29:20 kifer Exp $
** 
*/


:- compiler_options([xpp_on]).

#include "char_defs.h"


		/**************************/
		/*	file_nl/1	  */
		/**************************/

/* OLD
file_nl(File) :- ( windows_os_loader
		 ->  file_put(File, 13), file_put(File, 10)
		 ;   file_put(File, 10) ).
*/
%% NEW
file_nl(File) :- (windows_os_loader
		 ->  file_put(File, CH_RETURN), file_put(File, CH_NEWLINE)
		 ;   file_put(File, CH_NEWLINE)
		 ).


		/**************************/
		/*	file_write/2	  */
		/**************************/

file_write(File, Term) :- l_write(File, Term, 999), fail.
file_write(_, _).

file_write0(File, Term) :- l_write(File, Term, 999), fail.
file_write0(_, _).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

l_write(File, Var, _) :- 
	term_type(Var, Type), 
	Type =:= 0,
	!, 
	file_puttoken(File, 0, Var).
l_write(File, '$VAR'(N), _) :- 
	!, 
	l_writevar(File, N, 0).
l_write(File, [X|Y], _) :- 
	!, 
	file_put(File, 91), 	% '['
	l_write(File, X, 999), 
	l_writetail(File, Y).
l_write(File, T, Prec) :- 	% functor(T, OP, N),
	term_type(T, Type), 
	Type =:= 1, !,		% CS
	term_psc(T, PSC), 
	psc_arity(PSC, N),
	psc_name(PSC, Name),
	OP = Name,
	( N=:=0 -> file_puttoken(File, 5, Name)
	; N=:=1 ->
		( '_$op'(Opprec, fx, OP) ->
			Nprec is Opprec-1, 
			l_writepreop(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, fy, OP) ->
			l_writepreop(File, Name, T, Prec, Opprec, Opprec)
		; '_$op'(Opprec, xf, OP) ->
			Nprec is Opprec-1, 
			l_writepostop(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, yf, OP) ->
			l_writepostop(File, Name, T, Prec, Opprec, Opprec)
		; Name == {} ->
			l_write_curly(File, T)
		; l_writestr(File, Name, N, T)
		)
	; N=:=2 ->
		( '_$op'(Opprec, xfx, OP) ->
			Nprec is Opprec-1,
			l_writebinop(File, Name, T, Prec, Opprec, Nprec, Nprec)
		; '_$op'(Opprec, xfy, OP) ->
			Nprec is Opprec-1,
			l_writebinop(File, Name, T, Prec, Opprec, Nprec, Opprec)
		; '_$op'(Opprec, yfx, OP) ->
			Nprec is Opprec-1,
			l_writebinop(File, Name, T, Prec, Opprec, Opprec, Nprec)
		; Name == apply ->
			l_hilog_writestr(File, N, T) 
		; l_writestr(File, Name, N, T)
		)
	; ( Name == apply -> 
              l_hilog_writestr(File, N, T)
	  ; l_writestr(File, Name, N, T)
	  )
	).
l_write(File, T, _) :- 
	term_type(T, Type),
	file_puttoken(File, Type, T).

l_writevar(File, N, Quoted) :-
	( integer(N) ->
		OrdLetter is N mod 26,
		ChrLetter is CH_A + OrdLetter,	% Char A
		file_put(File, ChrLetter),
		Number is N // 26,
		( Number =:= 0 -> true
		; file_puttoken(File, 2, Number) 
		)
	; ( Quoted =:= 0 -> file_puttoken(File, 5, '$VAR')
	  %% NEW
	  %%; file_put(File, 0''),
	  ; file_put(File, CH_QUOTE),
	    file_puttoken(File, 5, '$VAR'), 
	    %% NEW
	    %%file_put(File, 0'')
	    file_put(File, CH_QUOTE)
	  ),
	  %% NEW
	  %% file_put(File, 40),
	  file_put(File, CH_LPAREN),
	  l_write(File, N, 999),
	  %% NEW
	  %% file_put(File, 41)
	  file_put(File, CH_RPAREN)
	).

l_writestr(File, Name, N, Term) :-
	file_puttoken(File, 5, Name), 
	%% NEW
	%%file_put(File, 40),	% (
	file_put(File, CH_LPAREN),    % (
	term_arg(Term, 1, X),
	l_write(File, X, 999),
        l_writearg(File, Term, N, 1), 
	%% NEW
	%%file_put(File, 41).	% )
	file_put(File, CH_RPAREN).    % )

l_write_curly(File, Term) :- 
	%% NEW
	%%file_put(File, 123),	% {
	file_put(File, CH_LBRACE),	% {
	term_arg(Term, 1, Arg),
	l_write(File, Arg, 999),
	%% NEW
	%%file_put(File, 125).	% '}'
	file_put(File, CH_RBRACE).	% }

l_hilog_writestr(File, N, Term) :-
	term_arg(Term, 1, HiLogFunctor),
        l_write(File, HiLogFunctor, 999),
	term_arg(Term, 2, FirstArg),
	%% NEW
	%%file_put(File, 40),	% '('
	file_put(File, CH_LPAREN),	% (
	l_write(File, FirstArg, 999), % write the first of the HiLog args
	l_writearg(File, Term, N, 2), % write the rest  of the HiLog args
	%% NEW
	%%file_put(File, 41).	% ')'
	file_put(File, CH_RPAREN).	% )

l_writebinop(File, Op, Term, Oldp, Curp, Newlp, Newrp) :- 
	term_arg(Term, 1, Arg1),
	term_arg(Term, 2, Arg2),
	(Curp > Oldp -> 
		file_put(File, 40),		% '('
		'write binop'(File, Arg1, Op, Arg2, Newlp, Newrp),
		file_put(File, 41)		% ')'
	;
		'write binop'(File, Arg1, Op, Arg2, Newlp, Newrp)
	).

'write binop'(File, Arg1, Op, Arg2, Newlp, Newrp) :-
	l_write(File, Arg1, Newlp),
	file_put(File, 0' ),	    	% '  to fool the C preprocessor
	file_puttoken(File, 19, Op),
	file_put(File, 0' ),	    	% '  to fool the C preprocessor
	l_write(File, Arg2, Newrp).

l_writepreop(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
		file_put(File, 40),		% '('
		file_puttoken(File, 18, Op),
		l_write(File, Arg, Newp),
		file_put(File, 41)		% ')'
	;
		file_puttoken(File, 18, Op),
		l_write(File, Arg, Newp)
	).

l_writepostop(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
		file_put(File, 40),		% '('
		l_write(File, Arg, Newp),
		file_puttoken(File, 20, Op),
		file_put(File, 41)		% ')'
	;
		l_write(File, Arg, Newp),
		file_puttoken(File, 20, Op)
	).


l_writearg(_File, _T, N, N) :- !.
l_writearg(File, T, N, M) :- 
	L is M + 1, 
	file_put(File, 44), 		% ','
	term_arg(T, L, X),
        l_write(File, X, 999), 
	l_writearg(File, T, N, L).

l_writetail(File, Var) :- 
	term_type(Var, Type),
	Type =:= 0,
	!, 
	file_put(File, 124), 		% '|'
	file_puttoken(File, 0, Var), 
	file_put(File, 93).		% ']'
l_writetail(File, [X|Y]) :- 
	!, 
	file_put(File, 44), 		% ','
	l_write(File, X, 999), 
	l_writetail(File, Y).
l_writetail(File, []) :- 
	!, 
	file_put(File, 93).		% ']'
l_writetail(File, X) :- 
	file_put(File, 124), 		% '|'
	l_write(File, X, 999), 
	file_put(File, 93).		% ']'


		/**********************************/
		/*	file_write_prolog/2	  */
		/**********************************/

file_write_prolog(File, Term) :- l_write_prolog(File, Term, 999), fail.
file_write_prolog(_, _).


l_write_prolog(File, Var, _) :- 
	term_type(Var, T), 
	T=:=0, 
	!, 
	file_puttoken(File, 0, Var).
l_write_prolog(File, '$VAR'(N), _) :- 
	!,
	l_writevar(File, N, 0).
l_write_prolog(File, [X|Y], _) :- 
	!, 
	file_put(File, 91), 	% '['
	l_write_prolog(File, X, 999), 
	l_writetail_prolog(File, Y).
l_write_prolog(File, T, Prec) :- 	% functor(T, OP, N),
	term_type(T, Type), 
	Type =:= 1, !,		% CS
	term_psc(T, PSC), 
	psc_arity(PSC, N),
	psc_name(PSC, Name),
	OP = Name,
	( N=:=0 -> file_puttoken(File, 5, Name)
	; N=:=1 ->
		( '_$op'(Opprec, fx, OP) ->
			Nprec is Opprec-1, 
			l_writepreop_prolog(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, fy, OP) ->
			l_writepreop_prolog(File, Name, T, Prec, Opprec, Opprec)
		; '_$op'(Opprec, xf, OP) ->
			Nprec is Opprec-1, 
			l_writepostop_prolog(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, yf, OP) ->
			l_writepostop_prolog(File, Name, T, Prec, Opprec, Opprec)
		; Name == {} ->
			l_write_curly_prolog(File, T)
		; l_writestr_prolog(File, Name, N, T)
		)
	; N=:=2 ->
		( '_$op'(Opprec, xfx, OP) ->
			Nprec is Opprec-1,
			l_writebinop_prolog(File, Name, T, Prec, Opprec, Nprec, Nprec)
		; '_$op'(Opprec, xfy, OP) ->
			Nprec is Opprec-1,
			l_writebinop_prolog(File, Name, T, Prec, Opprec, Nprec, Opprec)
		; '_$op'(Opprec, yfx, OP) ->
			Nprec is Opprec-1,
			l_writebinop_prolog(File, Name, T, Prec, Opprec, Opprec, Nprec)
		; l_writestr_prolog(File, Name, N, T)
		)
	; l_writestr_prolog(File, Name, N, T)
	).
l_write_prolog(File, T, _) :- 
	term_type(T, Type),
	file_puttoken(File, Type, T).

l_writestr_prolog(File, Name, N, Term) :-
	file_puttoken(File, 5, Name), 
	file_put(File, 40), 		% '('
	term_arg(Term, 1, X),
	l_write_prolog(File, X, 999),
        l_writearg_prolog(File, Term, N, 1), 
	file_put(File, 41).		% ')'

l_write_curly_prolog(File, Term) :- 
	%% NEW
	%%file_put(File, 123),		% '{'
	file_put(File, CH_LBRACE),	% {
	term_arg(Term, 1, Arg),
	l_write_prolog(File, Arg, 999),
	%% NEW
	%%file_put(File, 125).		% '}'
	file_put(File, CH_RBRACE).	% }

l_writebinop_prolog(File, Op, Term, Oldp, Curp, Newlp, Newrp) :- 
	term_arg(Term, 1, Arg1),
	term_arg(Term, 2, Arg2),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	% (
	    'write binop prolog'(File, Arg1, Op, Arg2, Newlp, Newrp),
	    %% NEW
	    %%file_put(File, 41)	% ')'
	    file_put(File, CH_RPAREN)	% )
	;   
	    'write binop prolog'(File, Arg1, Op, Arg2, Newlp, Newrp)
	).

'write binop prolog'(File, Arg1, Op, Arg2, Newlp, Newrp) :-
	l_write_prolog(File, Arg1, Newlp),
	%% NEW
	%%file_put(File, 0' ),	    	% space '
	file_put(File, CH_SPACE),    	
	file_puttoken(File, 19, Op),
	%% NEW
	%%file_put(File, 0' ),	    	% space '
	file_put(File, CH_SPACE),
	l_write_prolog(File, Arg2, Newrp).

l_writepreop_prolog(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	    % (
	    file_puttoken(File, 18, Op),
	    l_write_prolog(File, Arg, Newp),
	    %% NEW
	    %%file_put(File, 41)	% ')'
	    file_put(File, CH_RPAREN)	% )
	;   
	    file_puttoken(File, 18, Op),
	    l_write_prolog(File, Arg, Newp)
	).

l_writepostop_prolog(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	% (
	    l_write_prolog(File, Arg, Newp),
	    file_puttoken(File, 20, Op),
	    %% NEW
	    %%file_put(File, 41)	% )
	    file_put(File, CH_RPAREN)	% )
	;
	    l_write_prolog(File, Arg, Newp),
	    file_puttoken(File, 20, Op)
	).

l_writearg_prolog(_File, _Term, N, N) :- !.
l_writearg_prolog(File, Term, N, M) :- 
	L is M + 1, 
	%% NEW
	%%file_put(File, 44), 		% ','
	file_put(File, CH_COMMA),	% ','
	term_arg(Term, L, X),
        l_write_prolog(File, X, 999), 
	l_writearg_prolog(File, Term, N, L).

l_writetail_prolog(File, Var) :-
	term_type(Var, Type),
	Type =:= 0,
	!, 
	%% NEW
	%%file_put(File, 124), 		% '|'
	file_put(File, CH_BAR),		% |
	file_puttoken(File, 0, Var), 
	%% NEW
	%%file_put(File, 93).	% ]
	file_put(File, CH_RBRACKET).	% ]
l_writetail_prolog(File, [X|Y]) :- !, 
	%% NEW
	%%file_put(File, 44), 		% ','
	file_put(File, CH_COMMA), 		% ','
	l_write_prolog(File, X, 999), 
	l_writetail_prolog(File, Y).
l_writetail_prolog(File, []) :- 
	%% NEW
	%%!, file_put(File, 93).		% ']'
	!, file_put(File, CH_RBRACKET).		% ]
l_writetail_prolog(File, X) :- 
	%% NEW
	%%file_put(File, 124), 		% '|'
	file_put(File, CH_BAR), 	% |
	l_write_prolog(File, X, 999), 
	%% NEW
	%%file_put(File, 93).		% ']'
	file_put(File, CH_RBRACKET).	% ']'


		/*********************************/
		/*	file_write_quoted/2      */
		/*********************************/

file_write_quoted(File, Term) :- l_write_quoted(File, Term, 999), fail.
file_write_quoted(_, _).


l_write_quoted(File, Var, _) :-
	term_type(Var, Type),
	Type =:= 0,
	!,
	file_puttoken(File, 0, Var).
l_write_quoted(File, '$VAR'(N), _) :- 
	!,
	l_writevar(File, N, 1).
l_write_quoted(File, [], _) :-
	!,
	%% NEW
	%%file_put(File, 91),     % '['
	file_put(File, CH_LBRACKET),     % [
	%% NEW
	%%file_put(File, 93).     % ']'
	file_put(File, CH_RBRACKET).     % ]
l_write_quoted(File, [X|Y], _) :-
	!, 
	%% NEW
	%%file_put(File, 91), 	% '['
	file_put(File, CH_LBRACKET), 	% [
	l_write_quoted(File, X, 999), 
	l_writetail_quoted(File, Y).
l_write_quoted(File, Atom, _) :-	% This takes care of all atoms but []
	term_type(Atom, Type),
	Type =:= 5,
	!,
	file_writequoted(File, Atom).
l_write_quoted(File, T, Prec) :- 	% functor(T, OP, N),
	term_type(T, Type), 
	Type =:= 1, !,		% CS
	term_psc(T, PSC), 
	psc_arity(PSC, N),
	psc_name(PSC, Name),
	OP = Name,
	( N=:=0 -> file_writequoted(File, Name)
	; N=:=1 ->
		( '_$op'(Opprec, fx, OP) ->
			Nprec is Opprec-1, 
			l_writeqpreop(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, fy, OP) ->
			l_writeqpreop(File, Name, T, Prec, Opprec, Opprec)
		; '_$op'(Opprec, xf, OP) ->
			Nprec is Opprec-1, 
			l_writeqpostop(File, Name, T, Prec, Opprec, Nprec)
		; '_$op'(Opprec, yf, OP) ->
			l_writeqpostop(File, Name, T, Prec, Opprec, Opprec)
		; Name == {} ->
			l_write_curly_quoted(File, T)
		; l_writestr_quoted(File, Name, N, T)
		)
	; N=:=2 ->
		( '_$op'(Opprec, xfx, OP) ->
			Nprec is Opprec-1,
			l_writeqbinop(File, Name, T, Prec, Opprec, Nprec, Nprec)
		; '_$op'(Opprec, xfy, OP) ->
			Nprec is Opprec-1,
			l_writeqbinop(File, Name, T, Prec, Opprec, Nprec, Opprec)
		; '_$op'(Opprec, yfx, OP) ->
			Nprec is Opprec-1,
			l_writeqbinop(File, Name, T, Prec, Opprec, Opprec, Nprec)
		; Name == apply ->
			l_hilog_writestr_quoted(File, N, T) 
		; l_writestr_quoted(File, Name, N, T)
		)
	; ( Name == apply -> 
              l_hilog_writestr_quoted(File, N, T)
	  ; l_writestr_quoted(File, Name, N, T)
	  )
	).
l_write_quoted(File, T, _) :- 
	term_type(T, Type),
	file_puttoken(File, Type, T).

l_writestr_quoted(File, Name, N, Term) :-
	file_writequoted(File, Name), 
	%% NEW
	%%file_put(File, 40), 			% '('
	file_put(File, CH_LPAREN),		% (
	term_arg(Term, 1, X),
	l_write_quoted(File, X, 999),
        l_writearg_quoted(File, Term, N, 1), 
	%% NEW
	%%file_put(File, 41).			% ')'
	file_put(File, CH_RPAREN).		% )

l_write_curly_quoted(File, Term) :- 
	%% NEW
	%%file_put(File, 123),		% '{'
	file_put(File, CH_LBRACE),	% {
	term_arg(Term, 1, Arg),
	l_write_quoted(File, Arg, 999),
	%% NEW
	%%file_put(File, 125).		% '}'
	file_put(File, CH_RBRACE).	% }

l_hilog_writestr_quoted(File, N, Term) :-
	term_arg(Term, 1, HiLogFunctor),
        l_write_quoted(File, HiLogFunctor, 999),
	term_arg(Term, 2, FirstArg),
	%% NEW
	%%file_put(File, 40),	% '('
	file_put(File, CH_LPAREN),	% (
	l_write_quoted(File, FirstArg,999), % write the first of the HiLog args
	l_writearg_quoted(File, Term, N,2), % write the rest  of the HiLog args
	%% NEW
	%%file_put(File, 41).	% ')'
	file_put(File, CH_RPAREN).	% )

l_writeqbinop(File, Op, Term, Oldp, Curp, Newlp, Newrp) :- 
	term_arg(Term, 1, Arg1),
	term_arg(Term, 2, Arg2),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	% (
	    'write binop quoted'(File, Arg1, Op, Arg2, Newlp, Newrp),
	    %% NEW
	    %%file_put(File, 41)	% ')'
	    file_put(File, CH_RPAREN)	% )
	;
	    'write binop quoted'(File, Arg1, Op, Arg2, Newlp, Newrp)
	).

'write binop quoted'(File, Arg1, Op, Arg2, Newlp, Newrp) :-
	l_write_quoted(File, Arg1, Newlp),
	%% NEW
	%%file_put(File, 0' ),	    	% space '
	file_put(File, CH_SPACE),
	file_puttoken(File, 19, Op),
	%% NEW
	%%file_put(File, 0' ),	    	% space '
	file_put(File, CH_SPACE),
	l_write_quoted(File, Arg2, Newrp).

l_writeqpreop(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	    % (
	    file_puttoken(File, 18, Op),
	    l_write_quoted(File, Arg, Newp),
	    %% NEW
	    %%file_put(File, 41)	    % )
	    file_put(File, CH_RPAREN)	    % )
	;
	    file_puttoken(File, 18, Op),
	    l_write_quoted(File, Arg, Newp)
	).

l_writeqpostop(File, Op, Term, Oldp, Curp, Newp) :- 
	term_arg(Term, 1, Arg),
	(Curp > Oldp -> 
	    %% NEW
	    %%file_put(File, 40),		% '('
	    file_put(File, CH_LPAREN),	% (
	    l_write_quoted(File, Arg, Newp),
	    file_puttoken(File, 20, Op),
	    %% NEW
	    %%file_put(File, 41)	% ')'
	    file_put(File, CH_RPAREN)	% )
	;   
	    l_write_quoted(File, Arg, Newp),
	    file_puttoken(File, 20, Op)
	).


l_writearg_quoted(_File, _T, N, N) :- !.
l_writearg_quoted(File, T, N, M) :- 
	L is M + 1, 
	%% NEW
	%%file_put(File, 44), 		% ','
	file_put(File, CH_COMMA),	% ','
	term_arg(T, L, X),
        l_write_quoted(File, X, 999), 
	l_writearg_quoted(File, T, N, L).

l_writetail_quoted(File, Var) :-
	term_type(Var, Type),
	Type =:= 0,
	!, 
	%% NEW
	%%file_put(File, 124), 		% '|'
	file_put(File, CH_BAR),		% |
	file_puttoken(File, 0, Var), 
	%% NEW
	%%file_put(File, 93).		% ']'
	file_put(File, CH_RBRACKET).	% ']'
l_writetail_quoted(File, [X|Y]) :- !, 
	%% NEW
	%%file_put(File, 44), 		% ','
	file_put(File, CH_COMMA),	% ','
	l_write_quoted(File, X, 999), 
	l_writetail_quoted(File, Y).
l_writetail_quoted(File, []) :- 
	%% NEW
	%%!, file_put(File, 93).		% ']'
	!, file_put(File, CH_RBRACKET).		% ]
l_writetail_quoted(File, X) :- 
	%% NEW
	%%file_put(File, 124), 		% '|'
	file_put(File, CH_BAR), 	% |
	l_write_quoted(File, X, 999), 
	%% NEW
	%%file_put(File, 93).		% ']'
	file_put(File, CH_RBRACKET).	% ]


		/*************************************/
		/*	file_write_canonical/2       */
		/*************************************/

file_write_canonical(File, Term) :- l_write_canonical(File, Term), fail.
file_write_canonical(_, _).

l_write_canonical(File, Var) :-
	term_type(Var, Type),
	Type =:= 0,
	!,
	file_puttoken(File, 0, Var).
l_write_canonical(File, []) :-
	!,
	%% NEW
	%%file_put(File, 91),	% '['
	%%file_put(File, 93).	% ']'
	file_put(File, CH_LBRACKET),	% [
	file_put(File, CH_RBRACKET).	% ]
/**l_write_canonical(File, [X|Y]) :-
	!,
	file_puttoken(File, 5, '''.''('),
	l_write_canonical(File, X),
	%% NEW
	%%file_put(File, 44),		% ','
	file_put(File, CH_COMMA),	% ','
	l_write_canonical(File, Y),
	%% NEW
	%%file_put(File, 41).		% ')'
	file_put(File, CH_RPAREN).	% )
**/
l_write_canonical(File, [X|Y]) :- !,
	file_put(File, CH_LBRACKET),
	l_write_canonical(File, X),
	l_writelisttail_canonical(File, Y),
	file_put(File, CH_RBRACKET).
l_write_canonical(File, Atom) :-
	term_type(Atom, Type),
	Type =:= 5,
	!,
	file_writequoted(File, Atom).
l_write_canonical(File, Term) :-	% functor(Term, Name, N)
	term_type(Term, Type),
	Type =:= 1, !,		% CS
	term_psc(Term, PSC),
	psc_name(PSC, Name),
	psc_arity(PSC, N),
	( N =:= 0 -> file_writequoted(File, Name)
	; l_writestr_canonical(File, Name, N, Term) ).
l_write_canonical(File, Term) :-
	term_type(Term, Type),
	file_puttoken(File, Type, Term).

l_writestr_canonical(File, Name, N, Term) :-
	file_writequoted(File, Name),
	%% NEW
	%%file_put(File, 40),		% '('
	file_put(File, CH_LPAREN),	% (
	term_arg(Term, 1, X),
	l_write_canonical(File, X),
	l_writearg_canonical(File, Term, N, 1),
	%% NEW
	%%file_put(File, 41).		% ')'
	file_put(File, CH_RPAREN).	% )
 
l_writearg_canonical(_File, _Term, N, N) :- !.
l_writearg_canonical(File, Term, N, M) :-
	L is M + 1,
	%% NEW
	%%file_put(File, 44),	% ','
	file_put(File, CH_COMMA),	% ','
	term_arg(Term, L, X),
	l_write_canonical(File, X),
	l_writearg_canonical(File, Term, N, L).

l_writelisttail_canonical(File, Var) :-
	term_type(Var, Type),
	Type =:= 0,
	!,
	file_put(File, CH_BAR),
	file_puttoken(File, 0, Var).
l_writelisttail_canonical(_File, []) :- !.
l_writelisttail_canonical(File, [X|Y]) :-
	!,
	file_put(File, CH_COMMA),
	l_write_canonical(File, X),
	l_writelisttail_canonical(File,Y).
l_writelisttail_canonical(File, X) :-
	file_put(File, CH_BAR),
	l_write_canonical(File, X).

end_of_file.

/* ------------------- end of file file_write.P ----------------------- */


/***********************************************************************
   TEST CODE
 ************

| ?- write_canonical(X).
_3119
X = _3119 

| ?- write_canonical(foo(X,a,f([]),[Y|X])).
foo(_3129,a,f([]),'.'(_3198,_3129))
X = _3129,
Y = _3198

| ?- write_canonical(foo(X,a,f([]),[a,b,c])).
foo(_3129,a,f([]),'.'(a,'.'(b,'.'(c,[]))))
X = _3129

| ?- write_canonical(1<2).
<(1,2)
yes

| ?- write_canonical(a+b).
+(a,b)
yes

 ***********************************************************************/
