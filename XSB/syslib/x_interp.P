/* File:      x_interp.P
** Author(s): David S. Warren, Terrance Swift,
**    	      Ernie Johnson, Jiyang Xu, Kostis Sagonas
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** Copyright (C) ECRC, Germany, 1990
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: x_interp.P,v 1.19 1999/08/12 14:24:28 kostis Exp $
** 
*/

:- compiler_options([cpp_on]).

#include "../emu/sig.h"
#include "../emu/flag_defs.h"
#include "../prolog_includes/standard.h"
#include "../prolog_includes/char_defs.h"

/*======================================================================*/
/*  This file contains the main program of the interpreter.		*/
/*======================================================================*/

:- interpreter.

interpreter :-
        set_inthandler('_$keyboard_int'(_), MYSIG_KEYB),
        version_message,
        prompt('| ?- ',[]),
        prompt('',[],'_$more_prompt'(_)),
        prompt(' ? ',[],'_$debug_prompt'(_)),
        fail.

interpreter :-
	push_abort_cutpoint,         %% set abort cutpoint to this cp
        %% Execute command line goal passed to XSB with the -e option
        xsb_flag(goal, CmdGoal),
        (CmdGoal == 'true.' ->
            true
        ;   file_nl(STDERR),
            file_write(STDERR, 'Evaluating command line goal:  '),
            file_nl(STDERR),
            file_write(STDERR, '| ?- '),
            file_write(STDERR, CmdGoal), file_nl(STDERR),
            file_open(CmdGoal, 3, FileDes),
            eval_command_line_goal(FileDes),
            file_close(FileDes),
            file_nl(STDERR)
        ),
        fail.

interpreter :-
	x_interp_repeat,
	pop_abort_cutpoint,
	push_abort_cutpoint, %% reset abort cutpoint
	interpreter1.	%% Protect varible state, so fail to this point
			%% does not require untrailing (when aborting or
			%% segfault handling)

interpreter1 :-
	x_interp_repeat,
	trimcore,
	stat_set_flag(HIDE_STATE, 1), %% hide call interceptions.
	stat_set_flag(INVOKE_NUM, 0),
	conset('_$break_level', 0),
	print_debug_state,
	prompt(Prompt,Prompt),
	file_write(STDERR, Prompt),
	file_flush(STDERR, _),
	file_read(STDIN, X, Vars),
	( nonvar(X), read_in_stop(X), halt, ! %% end of top loop; halt
	; process_query(X, Vars)
	).

read_in_stop(halt) :- halt.    %% quit entire system, regardless of break level
read_in_stop(end_of_file).     %% pop a break level, out if at top

eval_command_line_goal(FileDes) :-
	file_read(FileDes, Goal),
	Goal \= end_of_file,
	(call((Goal,!)) -> true
	  ;
	  true
	),
	eval_command_line_goal(FileDes).
eval_command_line_goal(_).
	

process_query(X, Vars) :-
	exclude__(Vars,PrintableVars), process_query1(X,PrintableVars).

process_query1(X, []) :-	%% no printable variables appeared in the input
	!,
	call_query(X), close_open_tables,
	!,
	file_nl(STDERR), file_write(STDERR, yes), file_nl(STDERR),
	fail.
process_query1(X, Vars) :- 
	prompt(MorePrompt,MorePrompt,'_$more_prompt'(_)),
	call_query(X),
	stat_flag(LETTER_VARS, LetterVars),
	( LetterVars =:= 0 -> print_answer(Vars)
	; ( numbervars(Vars), print_answer(Vars), fail ; true )
	),
	file_write(STDERR, MorePrompt),
	file_flush(STDERR, _),
	no_more,
	close_open_tables,
	!,
	file_nl(STDERR), file_write(STDERR, yes), file_nl(STDERR),
	fail.

no_more :- file_get(0, X), ( X =:= -1 /* end_of_file */ ; X =:= 10 ), !.
no_more :- no_more, fail.

call_query(X) :- 
%%	'_$savecp'(C),			%% moved into call/1, affect trace?
	( stat_set_flag(HIDE_STATE, 0)         %% expose tracing
	; stat_set_flag(HIDE_STATE, 1), fail   %% hide again when backtrack
	),
	'_$call'(X), 
	( stat_set_flag(HIDE_STATE, 1)	       %% hide tracing when succeed
	; stat_set_flag(HIDE_STATE, 0), fail   %% expose when backtrack to user
	).
call_query(_) :- 
	file_nl(STDERR), file_write(STDERR, no), file_nl(STDERR), fail.

%% hidden version of call
'_$call'(Y) :- 
	'_$savecp'(C), 
	goal_cut_trans(Y,X,C),
	call_expose(X).

%% first argument is an open ended list
exclude__([], []) :- !.
exclude__([V|Vs], PVs) :-
	V = vv(Name,_),
	atom_codes(Name, [Code|_]),
	( Code =:= CH_UNDERSCORE -> PVs = NPVs ; PVs = [V|NPVs] ),
	exclude__(Vs, NPVs).

print_answer([]) :- !.
print_answer([vv(Name,Val)|Tail]) :-
	file_nl(STDERR), file_write(STDERR, Name), 
	file_write(STDERR, ' = '), file_write(STDERR, Val),
	print_answer(Tail).


/* === break =========================================================== */

break :- conval('_$break_level', Blevel),
	Nblevel is Blevel+1, conset('_$break_level', Nblevel),
	file_write(STDERR, '[ Break (level '), file_write(STDERR, Nblevel),
	file_write(STDERR, ') ]'), file_nl(STDERR),
	readl_brklp1,
	conset('_$break_level', Blevel),
	file_write(STDERR, '[ End break (level '), file_write(STDERR, Nblevel),
	file_write(STDERR, ') ]'), file_nl(STDERR).

readl_brklp1 :- 
	x_interp_repeat, 
		conval('_$break_level', Blevel),
		file_write(STDERR, Blevel), file_write(STDERR, ': ?- '),
		file_flush(STDERR, _),
		file_read(STDIN, X, Vars),
		( nonvar(X), read_in_stop(X), !
			%% end read loop; pop a break level, out if X=halt.
		; process_query(X, Vars)
		).

/* === interrupt handlers ============================================== */

'_$keyboard_int'(Call) :- 
	is_xwammode(Flag),
	( Flag =:= 1 -> abort ; break, call_c(Call) ).

/* === version message ================================================= */

version_message :-
	file_nl(STDERR),
	slash(Slash),
	%% xsb_configuration(etcdir, EtcDir),
	%% fmt_write_string(CopyingMsg, '%s%scopying.msg', f(EtcDir,Slash)),
	%% print_file_contents(CopyingMsg, STDERR),
	%% file_nl(STDERR),
	xsb_configuration(config_dir, ConfigDir),
	fmt_write_string(ConfMsg, '%s%sbanner.msg', f(ConfigDir,Slash)),
	print_file_contents(ConfMsg, STDERR).

/* === utilities ======================================================= */

conset(Con, Val) :- conpsc(Con, PSC), psc_set_prop(PSC, Val).
conval(Con, Val) :- conpsc(Con, PSC), psc_prop(PSC, Val).

%% The interpreter NEEDS this repeat: do not use the one in standard.
x_interp_repeat :- true ; x_interp_repeat.

prompt(New,Old) :- prompt(New,Old,'_$main_prompt'(_)).

prompt(New,Old,Pstore) :- 
	(Old == []
	 ->	true
	 ;	get_prompt(Pstore,Old)
	),
	(Old \== New
	 ->	set_prompt(Pstore,New)
	 ;	true
	).

get_prompt(Pstore,Prompt) :-
	term_psc(Pstore, Psc),
	psc_prop(Psc, Buff),	
	intern_string(Buff, String),	%% temp solution, since ALIAS not work
	Prompt = String.		%% for double word.

set_prompt(Pstore,Prompt) :-
	term_psc(Pstore, Psc),
	psc_set_type(Psc, 8),			%% T_CSET
	conname(Prompt, String),
	psc_set_prop(Psc, String).

print_debug_state :-
	stat_flag(TRACE,Trace),
	stat_flag(DEBUG_ON,Debug),
	stat_flag(QUASI_SKIPPING,QuasiSkip),
	( (Trace > 0, QuasiSkip =:= 0)
	  ->	file_write(STDERR,[trace]), file_nl(STDERR)
	  ; (Debug > 0; (Trace > 0, QuasiSkip > 0))
	  ->	file_write(STDERR,[debug]), file_nl(STDERR)
	; true
	).
