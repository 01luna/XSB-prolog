/* File:      xsb_hook.P -- mechanism for adding hooks to xsb
** Author(s): kifer
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1999
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: xsb_hook.P,v 1.1 1999/10/10 05:05:06 kifer Exp $
** 
*/

%% Hooks
:- dynamic xsb_exit_hook(_), xsb_before_prompt_hook(_).

%% A hook is of the form hookname(HookPredicate)
%% hookname(_) just lists the callable hooks of the given kind.
%% add_xsb_hook adds hooks to hookname(_) and remove_xsb_hook(_) removes them.
%% call_xsb_hook(hookname(_)) goes over all the hooks stored in hookname(_) 
%% and calls them.

%% Hook handling
add_xsb_hook(Hook) :-
	call(Hook), !.  % hook is already there
add_xsb_hook(Hook) :-
	(   callable(Hook)
	->  assert(Hook)
	;   warning(('ADD_XSB_HOOK: ',Hook,' must be a callable literal'))
	).

remove_xsb_hook(Hook) :-
	(   callable(Hook)
	->  retract(Hook)
	;   warning(('REMOVE_XSB_HOOK: ',Hook,' must be a callable literal'))
	).

%% Hook must be of the form hookName(_)
call_xsb_hook(Hook) :-
	call(Hook),
	Hook =.. [HookName, HookCall],
	(   atom(HookName)
	->  (   callable(HookCall)
	    ->	call(HookCall)
	    ;	warning(('CALL_XSB_HOOK: ',HookCall,' must be a callable literal'))
	    )
	;   warning(('CALL_XSB_HOOK: ',HookName, ' is not a name of a hook'))
	),
	fail.
call_xsb_hook(_).
