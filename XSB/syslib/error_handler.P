/* File:      error_handler.P
** Author(s): Swift
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** Copyright (C) ECRC, Germany, 1990
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: error_handler.P,v 1.15 2004/05/07 20:42:19 vidrevich Exp $
** 
*/

:- compiler_options([xpp_on,sysmod,optimize]).

#include "sig_xsb.h"
#include "flag_defs_xsb.h"
#include "heap_defs_xsb.h"
#include "standard.h"
#include "char_defs.h"

:- import default_user_error_handler/1 from usermod.
:- dynamic default_user_error_handler/1.

/* Types of errors are taken from Section 7.12 of the ISO Standard */

default_error_handler(Error) :- 
	default_user_error_handler(Error),
        close_open_tables,
	!,fail.
default_error_handler(Error) :-
	default_sys_error_handler(Error),
	!,
	messageln('Aborting...', STDFDBK),
        close_open_tables,
	%%reset_undef_pred_handlers, 
	fail.

/* messages are handled via abort/1.  */
default_sys_error_handler('_$abort_ball'(_BackTrace)).
default_sys_error_handler('_$abort_ball'(Msg,_BackTrace)) :-
	messageln(Msg,STDERR).

default_sys_error_handler(error(Error,Msg,_Backtrace)) :-
	default_sys_error_handler(error(Error,Msg)).

default_sys_error_handler(error(instantiation_error,Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Instantiation] ', Msg), 
	           STDERR).
default_sys_error_handler(error(type_error(Valid_type,Culprit),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Type (',
		    Culprit,' in place of ',Valid_type,')] ', Msg),STDERR).
default_sys_error_handler(error(domain_error(Valid_type_in,Culprit),Msg)) :-
	(Valid_type_in = [_|_] -> 
                 concat_atom(Valid_type_in,Valid_type) ; 
  	     Valid_type = Valid_type_in),
	messageln(('++Error[XSB/Runtime/P]: [Domain (',
		Culprit,' not in domain ',Valid_type,')] ', Msg), STDERR).
default_sys_error_handler(error(existence_error(Object_type,Culprit),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Existence (No ',Object_type,
		' ',Culprit,' exists)] ', Msg), STDERR).
default_sys_error_handler(error(
                                      undefined_predicate(_Name,_Arity,_Module),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: ', Msg), STDERR).
default_sys_error_handler(error(permission_error(Op,Obj_type,Culprit),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Permission (Operation) ',
	Op,' on ',Obj_type,': ',Culprit,'] ',Msg), STDERR).
default_sys_error_handler(error(representation_error(Flag),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Representation (',Flag,
	            ')] ', Msg), STDERR).
default_sys_error_handler(error(calculation_error(Flag),Msg)) :-
	messageln(('++Error[XSB/Runtime/P]: [Calculation (',Flag,
	            ')] ', Msg), STDERR).
default_sys_error_handler(Msg) :-
	messageln(('++Error[XSB/Runtime/P] uncaught exception: ', Msg), 
	           STDERR).

/* Get a string description of an exception thrown by XSB */
get_sys_error_description('_$abort_ball'(AbortMsgs, Backtrace), ExceptionDescription, BacktraceList) :- !,
	concat_atom(AbortMsgs, ExceptionDescription),
	get_backtrace(Backtrace, BacktraceList).
get_sys_error_description('_$abort_ball'(Backtrace), 'Aborting...', BacktraceList) :- !,
	get_backtrace(Backtrace, BacktraceList).
get_sys_error_description(error(Error,Msg,Backtrace), ExceptionDescription, BacktraceList) :- !,
	get_sys_error_description(error(Error,Msg), ExceptionDescription),
	get_backtrace(Backtrace, BacktraceList).
get_sys_error_description(error(Error,Msg), ExceptionDescription, []) :-
	get_sys_error_description(error(Error,Msg), ExceptionDescription).

get_sys_error_description(error(Error,Msg,_Backtrace), ExceptionDescription) :-
	get_sys_error_description(error(Error,Msg), ExceptionDescription).

get_sys_error_description('_$abort_ball'(AbortMsgs, _Backtrace), ExceptionDescription) :- !,
	concat_atom(AbortMsgs, ExceptionDescription).
get_sys_error_description('_$abort_ball'(_Backtrace), 'Aborting...') :- !. %% not much of a description for this one
get_sys_error_description(error(instantiation_error,Msg), ExceptionDescription) :- !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: [Instantiation] '| MsgList], ExceptionDescription).
get_sys_error_description(error(type_error(Valid_type,Culprit),Msg), ExceptionDescription) :- !,
	(atom(Valid_type) -> Valid_type_a = Valid_type ; term_to_atom(Valid_type, Valid_type_a)),
	(atom(Culprit) -> Culprit_a = Culprit ; term_to_atom(Culprit, Culprit_a)), 
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: Type ',Culprit_a,' in place of ',Valid_type_a,' '| MsgList],
		    ExceptionDescription).
get_sys_error_description(error(domain_error(Valid_type_in,Culprit),Msg), ExceptionDescription) :- !,
	(atom(Culprit) -> Culprit_a = Culprit ; term_to_atom(Culprit, Culprit_a)),
	list_comma_list(MsgList, Msg),
	(Valid_type_in = [_|_]
	 ->	concat_atom(Valid_type_in,Valid_type)
	 ;	(atom(Valid_type_in) -> Valid_type = Valid_type_in ; term_to_atom(Valid_type_in, Valid_type))
	),
	concat_atom(['++Error[XSB/Runtime/P]: Domain ',Culprit_a,' not in domain ',Valid_type,' '| MsgList],
		    ExceptionDescription).
get_sys_error_description(error(existence_error(Object_type,Culprit),Msg), ExceptionDescription) :-
	atom(Object_type), atom(Culprit), !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: [Existence (No ',Object_type, ' ',Culprit,' exists)] '| MsgList],
		    ExceptionDescription).
get_sys_error_description(error(undefined_predicate(_Name, _Arity, _Module),Msg), ExceptionDescription) :- !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: '| MsgList], ExceptionDescription).
get_sys_error_description(error(permission_error(Op,Obj_type,Culprit),Msg), ExceptionDescription) :-
	atom(Op), atom(Obj_type), atom(Culprit), !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: [Permission (Operation) ',
		     Op,' on ',Obj_type,': ',Culprit,'] '|MsgList], ExceptionDescription).
get_sys_error_description(error(representation_error(Flag),Msg), ExceptionDescription) :-
	atom(Flag), !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: [Representation (',Flag,')] '| MsgList], ExceptionDescription).
get_sys_error_description(error(calculation_error(Flag),Msg), ExceptionDescription) :- 
	atom(Flag), %% !,
	list_comma_list(MsgList, Msg),
	concat_atom(['++Error[XSB/Runtime/P]: [Calculation (',Flag,')] '| MsgList], ExceptionDescription).

% list_comma_list(PrologList, CommaList)
list_comma_list(Var1, Var2):- var(Var1), var(Var2), !, fail.
list_comma_list([], true) :- !.
list_comma_list([Term|L], Term1):-
	L == [], var(Term1), !, Term1 = Term.
list_comma_list([Arg1|List], ','(Arg1,Arg2)):- !,
	list_comma_list(List, Arg2).
list_comma_list([Term], Term1) :-
	nonvar(Term1), Term1 = Term.


/*get_backtrace(+, -) gets backtrace as built by build_xsb_backtrace:
list pair, with car=forward continuation, cdr=backward continuation.
backward is [] if xsb not started with -p option */
get_backtrace([ForPscs|BackPscs], [['Forward Continuation...'|PFor]|['Backward Continuation...'| PBack]]) :-
	get_mod_pred_arity_list(ForPscs,PFor),
	get_mod_pred_arity_list(BackPscs,PBack).

get_mod_pred_arity_list([], []).
get_mod_pred_arity_list([Psc|Pscs], [ModPred|ModPreds]) :-
	(Psc =:= 0
	 ->	ModPred = '... unknown/?'
	 ;	psc_data(Psc,ModPsc),
		psc_name(ModPsc,ModName),
		psc_name(Psc,Name),
		psc_arity(Psc,Arity),
		(ModName == usermod
		 ->	concat_atom(['... ',Name,'/',Arity],ModPred)
		 ;	concat_atom(['... ',ModName,':',Name,'/',Arity],ModPred)
		)
	),
	get_mod_pred_arity_list(Pscs, ModPreds).

/* prints out backtrace as built by build_xsb_backtrace:
list pair, with car=forward continuation, cdr=backward continuation.
backward is [] if xsb not started with -p option */

print_backtrace([For|Back]) :-
	messageln('Forward Continuation...',STDERR),
	print_mod_pred_arity_list(For),
	(Back == []
	 ->	true
	 ;	messageln('Backward Continuation...',STDERR),
		print_mod_pred_arity_list(Back)
	).

print_mod_pred_arity_list([]).
print_mod_pred_arity_list([Psc|Pscs]) :-
	(Psc =:= 0
	 ->	messageln('... unknown/?',STDERR)
	 ;	psc_data(Psc,ModPsc),
		psc_name(ModPsc,ModName),
		psc_name(Psc,Name),
		psc_arity(Psc,Arity),
		(ModName \== usermod
		 ->	messageln(['... ',ModName,':',Name,'/',Arity],STDERR)
		 ;	messageln(['... ',Name,'/',Arity],STDERR)
		)
	),
	print_mod_pred_arity_list(Pscs).
%-----------------------------------------------------------------------

% ISO-compatable convenience predicates

domain_error(Valid_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(domain_error(Valid_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).

existence_error(Object_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(existence_error(Object_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).

% obsolete TLS
instantiation_error(Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(instantiation_error,
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).

instantiation_error(Predicate,Arg,State):- 
	xsb_backtrace(Bt),
	throw(error(instantiation_error,
	      (' in arg ',Arg,' of predicate ',Predicate,': must be ',State),Bt)).

permission_error(Op,Obj_type,Culprit,Predicate):- 
	xsb_backtrace(Bt),
	throw(error(permission_error(Op,Obj_type,Culprit),(' in ',Predicate),Bt)).

type_error(Valid_type,Culprit,Predicate,Arg):- 
	xsb_backtrace(Bt),
	throw(error(type_error(Valid_type,Culprit),
	                             (' in arg ',Arg,' of predicate ',Predicate),Bt)).

% Misc Errors

misc_error(Message):- 
	xsb_backtrace(Bt),
	throw(error(misc_error,Message,Bt)).

%--------------------------------
% These checks can be reused for various types of ISO compatability.

%-------------
% Checks that a term is an atom.
check_atom(Term,Predicate,Arg) :- 
	(atom(Term) -> 
	    true
	 ;  type_error(atom,Term,Predicate,Arg) ).

%-------------
% Checks that a term is ground
check_ground(Term,Predicate,Arg) :- 
	(ground(Term) -> 
	    true
	 ;  instantiation_error(Predicate,Arg,ground) ).

%-------------
% Checks that a term is not a variable
check_nonvar(Term,Predicate,Arg) :- 
	(var(Term) -> 
	    instantiation_error(Predicate,Arg,nonvar)
             ;  true).

%-------------
% Checks that a term is a variable
check_var(Term,Predicate,Arg) :- 
	(var(Term) -> 
	    true
             ;  instantiation_error(Predicate,Arg,variable) ).

%-------------

% Checks that Term is a list containing no variable elements
check_nonvar_list(Term,Predicate,Arg):- 
	check_nonvar(Term,Predicate,Arg),
	(check_nonvar_list1(Term,Predicate,Arg) -> 
	    true
	 ;  type_error(list,Term,Predicate,Arg)).
	    
check_nonvar_list1([],_Predicate,_Arg).
check_nonvar_list1([H|T],Predicate,Arg):- 
	(nonvar(H) -> 
	    check_nonvar_list1(T,Predicate,Arg)
	; 
	    instantiation_error(Predicate,Arg)).

%-------------

% Checks that a given Term is a "stream.
% Should make stream a term for better checking.  
check_stream(Stream,Predicate,Arg) :- 
	check_nonvar(Stream,Predicate,Arg),
	(atom(Stream) -> 
	    true
	;
	    type_error(stream,Stream,Predicate,Arg)).

