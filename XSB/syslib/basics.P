/* File:      basics.P
** Author(s): David S. Warren, Kostis F. Sagonas
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: basics.P,v 1.1.1.1 1998/11/05 16:59:57 sbprolog Exp $
** 
*/


% ground/1 checks for ground term (Prolog version at end of file).
% This version uses function calls, and could be made somewhat more 
% efficient via macros, if necessary.

ground(T) :- fast_ground(T).


% good ole member
member(X,[X|_]).
member(X,[_|L]) :- member(X,L).

memberchk(X,[X|_]) :- !.
memberchk(X,[_|L]) :- memberchk(X,L).


% append! ta-da!
append([],L,L).
append([X|L1],L2,[X|L3]) :- append(L1,L2,L3).


% A not so naive reverse
reverse(L, R) :- reverse_acc(L, [], R).

reverse_acc([], Acc, Acc).
reverse_acc([Head|Tail], Acc, Reversed) :-
	reverse_acc(Tail, [Head|Acc], Reversed).


% Some Prologs like to call this delete!
select(Element, [Element|Rest_Elements], Rest_Elements).
select(Element, [Element1|Rest_L1], [Element1|Rest_L2]) :-
	select(Element, Rest_L1, Rest_L2).


% length/2 that works both ways
length(L,N) :-
	var(N)
	 ->	length1(L,N)
	 ;	length2(L,N).

length1([], 0).
length1([_|R], N) :- length1(R, N1), N is N1 + 1.

length2(L,N) :-
	N =< 0
	 ->	L=[]
	 ;	N1 is N-1, L=[_|L1],
		length2(L1,N1).


% ith/3 that works both ways
% ith(Index,List,Element)
ith(Index,List,Element) :-
	term_type(Index,T),
	(T =:= 2		% integer
	 ->	ith0(Index,List,Element)
	 ;	ith1(List,1,Index,Element)
	).

ith0(I,[X|L],Y) :-
	I > 0,
	(I =< 1
	 ->	Y=X
	 ;	I1 is I-1,
		ith0(I1,L,Y)
	).

ith1([X|_],I,I,X).
ith1([_|L],I1,I,X) :- I2 is I1+1, ith1(L,I2,I,X).

/* copy_term0 is defined on machine.P */
copy_term(A,B) :- copy_term0(A,C), B = C.

/* --------------------- end of file basics.P ------------------------- */
