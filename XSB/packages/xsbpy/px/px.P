:- compiler_options([xpp_on]).

#include "table_status_defs.h"

:- export set_comprehension/2.
:- export test_pred/2.
:- import table_status/5 from tables.
:- import functor/4 from standard.
:- import comma_to_list/2 from basics.

set_comprehension(Goal,Set):-
%    writeln(tables:is_tabled(Goal)),
%    functor(Goal,M,P,A),writeln(functor(Goal,M,P,A)),    functor(Goal1,M,P,A),
    (tables:is_tabled(Goal) ->
        set_comprehension_tabled(Goal,Set)
       ; 
        set_comprehension_nontabled(Goal,Set)).

set_comprehension_nontabled(Goal,AnsList):- 
%    writeln(set_comprehension_nontabled(Goal,Goals)),
    abolish_table_pred(px_table_call(_)),
    (px_table_call(Goal),fail ; true),
    findall((Goal,Resid),variant_get_residual(px_table_call(Goal),Resid),AnsList1),
    sort(AnsList1,AnsList2,[keep_dups]),
%    writeln(al2(AnsList2)),
    pythonize_list(AnsList2,AnsList).
%    writeln(ans(AnsList)).

set_comprehension_tabled(Goal,AnsList):-
%    writeln(set_comprehension_tabled(Goal)),
    table_status(Goal, _PredTypeCode, _CallTypeCode, AnsSetStatusCode,_SF),
    (AnsSetStatusCode == COMPLETED_ANSWER_SET -> 
	 true
       ; (Goal,fail ; true) ),
    findall((Goal,Resid),variant_get_residual(Goal,Resid),AnsList1),
%    writeln(goal(AnsList1)),
    sort(AnsList1,AnsList2,[keep_dups]),
    pythonize_list(AnsList2,AnsList).
%    writeq(anslist(AnsList)),nl.

pythonize_term(H1,H1):- atomic(H1),!.
pythonize_term(H1,H2):- H1 = [_|_],!,pythonize_list(H1,H2).
pythonize_term(H1,H2):- H1 = ','(_,_),!,pythonize_comma_list(H1,H2).
pythonize_term(H1,H2):- H1 = ':'(_,B),!,pythonize_term(B,H2).
pythonize_term(H1,H2):-
    H1 =.. [F|Args],      % need to handle HiLog
    pythonize_list(Args,Args1),
%    writeln(args1(Args1)),
%    writeq(f(F)),nl,
    (F == '' ->
      H2 =.. [''|Args1]
      ; H2 =.. ['',F|Args1]).

pythonize_list([],[]).
pythonize_list([H1|T1],[H2|T2]):- 
    pythonize_term(H1,H2),
    pythonize_list(T1,T2). 

pythonize_comma_list(In,Out):- !,
    comma_to_list(In,Inlist),
    pythonize_list(Inlist,Outlist),
    Out =.. ['' |Outlist].

:- table px_table_call/1 as variant, opaque.
px_table_call(X) :- call(X).

end_of_file.

get_last_arg(Ans,LastArg):-
    functor(Ans,_,A),
    arg(A,Ans,LastArg).

pythonize_redidual_list([],[]).
pythonize_redidual_list([H1|R1],[H2|R2]):-
    pythonize_term(H1,H2),
    pythonize_redidual_list(R1,R2).

