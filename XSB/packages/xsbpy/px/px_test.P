:- export zero_ary_true/0,instan/1,
   zero_ary_undef/0, win/1, one_ary_undef/1,
   zero_ary_fail/0,one_ary_fail/1,
   throw_an_error/2.
% for stress tests
:- export simple_call/2,simple_cmd/1,
   nondet_query/1, prolog_makelist/2.
% interrupt tests
:- export tc_rep_max/0.
% Utils.
:- export prolog_paths/1,append_prolog_paths/1.
:- export test_callback_1/1.
    
:- import timed_call/2 from standard.
:- import add_lib_dir/1 from consult.

%:- import pyfunc/3 from xsbpy.
%?- [xsbpy].

test_callback_1(Paths):-
    pyfunc(xp_utils,python_paths(),Paths).
    
prolog_paths(Dirs):-
    findall(Dir,usermod:library_directory(Dir),Dirs).

append_prolog_paths(Paths):-
    add_lib_dir(Paths).

throw_an_error(Message,_Out):-
    abort(Message).

instan(a).

zero_ary_true:-
    writeln('     I am a zero-ary predicate called from pt.P').

:- table win/1.
win(X):- tnot(win(X)).

:- table zero_ary_undef/0.
zero_ary_undef :- tnot(zero_ary_undef).

zero_ary_fail():- fail.

one_ary_fail(_):- fail.
one_ary_undef(b):- zero_ary_undef.

simple_call(N,N1):- N1 is N + 1.
simple_cmd(N):- _N1 is N + 1.

nondet_query(a).
nondet_query(b).
nondet_query(c).
nondet_query(d).


prolog_makelist(0,[]):-!.
prolog_makelist(N,[N|T]):-
    N1 is N - 1,
    prolog_makelist(N1,T).
    
    
tc_rep_max:- catch(timed_call(px_test:loop,
			      [repeating(100,px_test:myrep_3),max(500,px_test:mymax_3)]),_,
		   writeln(finished_tc_rep_max)).

myrep_3:- writeln('tc_rep_max interrupt').

mymax_3:- abort('tc_3 phew!').

loop:- loop.



