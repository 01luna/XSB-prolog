@apl{xsbdoc} is an @em{automatic program documentation generator} for
XSB applications.

@apl{xsbdoc} is an adaptation of the Ciao system's @cite{ciao-man}
@apl{lpdoc} to generate a reference manual automatically from one or
more XSB source files, @apl{xsbdoc} is particularly useful for
documenting library modules, for which it automatically generates a
description of the module interface.  However, @apl{xsbdoc} can also
be used quite successfully to document full applications and to
generate nicely formatted plain ascii ``readme'' files. A fundamental
advantage of using @apl{xsbdoc} to document programs is that it is
much easier to maintain a true correspondence between the program and
its documentation, and to identify precisely to what version of the
program a given printed manual corresponds.  Naturally, the
@apl{xsbdoc} manual generated by @apl{xsbdoc} itself.

@section{Overview of this document}

This first part of the document provides basic explanations on how to
generate a manual from a set of files that already contain
@concept{assertions} and @concept{comments}. Examples are given using
the files in the @tt{examples} directory provided with the
@apl{xsbdoc} package distribution.

These instructions assume that @apl{xsbdoc} (at least the executable
and the library) is installed as an XSB package.  Other installation
instructions @cindex{installation} can be found in @ref{Installing
xsbdoc}.

Other parts of this document provide:

@begin{itemize}

@item Documentation on the @em{assertions} that @apl{xsbdoc} uses
(those defined in the @apl{XSB} @pred{assertions} library.

@item Documentation on the @concept{formatting commands} that can be
embedded in @em{comments}.

@end{itemize}

This document is also an @concept{internals manual}, providing
information on how the different internal parts of @apl{xsbdoc} are
connected.  These chapters need not be read by an @apl{xsbdoc} user,
rather they are intended for those who wish to maintain and improve
@apl{xsbdoc}.  To this end, the document also provides:

@begin{itemize}

@item The documentation for the @lib{autodoc} @concept{automatic
documentation library}, which provides the main functionality of
@apl{xsbdoc}.

@item Documentation on the predicates that define the
@concept{conversion formats} used (@apl{texinfo}, and others), and
which are in the @lib{autodocformats} library.

@end{itemize}

All of the above have been generated automatically from the assertions
in the corresponding sources and can also be seen as examples of the
use of @apl{xsbdoc}.

@section{xsbdoc operation - source and target files}

The main input used by @apl{xsbdoc} in order to generate a manual are
@concept{Prolog source files}.  Basically, @apl{xsbdoc} generates a
file in the GNU @apl{texinfo} format (with a @tt{.texi} ending) for
each @apl{Prolog} file (see ``The GNU Texinfo Documentation System''
manual for more info on this format). The @apl{Prolog} files must have
a @tt{.P} ending, although information is also taken from files ending
in @tt{.H} if the corresponding @tt{.P} file is present.

If the @tt{.P} file does not define the predicates @pred{main/0} or
@pred{main/1}, it is assumed to be a @index{library} and it is
documented as such: the @tt{.texi} file generated will contain
information on the interface (e.g., the predicates exported and
imported by the file, etc.), in addition to any other machine readable
comments included in the file (see @ref{Enhancing the documentation
being generated}).  If, on the contrary, the file defines the
predicates @pred{main/0} or @pred{main/1}, it is assumed to be an
@index{application} and no description of the interface is generated
(see @ref{Some usage tips}).

If needed, @cindex{texinfo files} files written directly in
@apl{texinfo} can also be used as input files for @apl{xsbdoc}. These
files @em{must have a} @tt{.src} @em{(instead of} @tt{.texi} @em{)
ending}. This is needed to distinguish them from any automatically
generated @tt{.texi} files. Writing files directly in @apl{texinfo}
has the disadvantage that it may be difficult to adhere to all the
conventions used by @apl{xsbdoc}.  For example, these files will be
typically used as chapters and must be written as such. Also, the set
of indices used must be the same as specified in the @apl{xsbdoc}
format file for the application.  Finally, no bibliographic citations
can be used in @tt{.src} files.  Because of this, and because in the
future @apl{xsbdoc} may be able to generate documentation in formats
other than @apl{texinfo} directly (in which case these files would not
be useful), writing files in @apl{texinfo} directly is
discouraged. This facility was added mainly to be able to reuse parts
of manuals which were already written in @apl{texinfo}.  Note that if
a stand-alone file needs to be written (i.e., a piece of documentation
that is not associated to any @tt{.P} file) it can always be written
as a ``dummy'' @tt{.P} file (i.e., one that is not used as code), but
which contains machine readable comments).

A manual can be generated either from a single source file (@tt{.P} or
@tt{.src}) or from a set of source files.  In the latter case, then
one of these files should be chosen to be the @index{main file}, and
the others will be the @index{component files}.  The main file is the
one that will provide the title, author, date, summary, etc. to the
entire document.  In principle, any set of source files can be
documented, even if they contain no assertions or comments. However,
the presence of assertions or comments will greatly improve the
documentation (see @ref{Enhancing the documentation being generated}).

If the manual is generated from a single main file (i.e.,
@tt{COMPONENTS}, defined below, is empty), then the document generated
will be a flat document containing no chapters.  If the manual is
generated from a main file and one or more components, then the
document will contain chapters. The comments in the main file will be
used to generate the introduction, while each of the component files
will be used to generate a separate chapter. The contents of each
chapter will be controlled by the contents of the corresponding
component file.

As mentioned before, @apl{xsbdoc} typically generates @apl{texinfo}
files.  From the @apl{texinfo} files, @apl{xsbdoc} can generate
printed and on-line manuals in several formats (@tt{dvi}, @tt{ps},
@tt{ascii}, @tt{html}, @tt{info}, etc.)  automatically, using
different (publicly available) packages.  @apl{xsbdoc} can also
generate directly includes generating (parts of) a @concept{master
index} of documents which can be placed in an installation directory
and which will provide pointers to the individual manuals
generated. Using this feature, @tt{xsbdoc} can maintain global
@apl{html} and/or @apl{info} documentation sites automatically (see
@ref{Installing a generated manual in a public area}).

