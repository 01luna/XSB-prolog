/***************************************************************************
  file: genincludes/flrrefreshtable.fli

  Author(s): Michael Kifer

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 2003

  This is a file of template rules to generate commands for deleting facts
  from Prolog tables.
  ***************************************************************************/


#include "flora_wspredicates.flh"


%% ISA, SUB
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_SUB(X,Y,_Caller)) :-
	    	    !,
	       	    flora_abolish_table_call(WRAP_SUB(X,Y,_Caller))
	  )).
?- assert((
            FLORA_SYMBOL('refresh_table_for')(WRAP_ISA(X,Y,_Caller)) :-
	    	    !,
		    flora_abolish_table_call(WRAP_ISA(X,Y,_Caller))
	  )).
	
%% FD, IFD, MVD, IMVD
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_FD(X,Y,Z,_Caller)) :-
	    	    !,
	       	    flora_abolish_table_call(WRAP_FD(X,Y,Z,_Caller)),
	       	    flora_abolish_table_call(WRAP_FDDEF(X,Y,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IFD(X,Y,Z,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IFD(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_IFDDEF(X,Y,_Caller)),
	    	    flora_abolish_table_call(WRAP_FD(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_FDDEF(X,Y,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_MVD(X,Y,Z,_Caller)) :-
	    	    !,
		    flora_abolish_table_call(WRAP_MVD(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_MVDDEF(X,Y,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IMVD(X,Y,Z,Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IMVD(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_IMVDDEF(X,Y,_Caller)),
	    	    flora_abolish_table_call(WRAP_MVD(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_MVDDEF(X,Y,_Caller))
	  )).

%% FDSIG, IFDSIG, MVDSIG, IMVDSIG
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_FDSIG(X,Y,Z,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_FDSIG(X,Y,Z,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IFDSIG(X,Y,Z,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IFDSIG(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_FDSIG(X,Y,Z,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_MVDSIG(X,Y,Z,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_MVDSIG(X,Y,Z,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IFDSIG(X,Y,Z,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IMVDSIG(X,Y,Z,_Caller)),
	    	    flora_abolish_table_call(WRAP_MVDSIG(X,Y,Z,_Caller))
	  )).

%% FDDEF, IFDDEF, MVDDEF, IMVDDEF
/*
%% these two probably never need to be deleted explicitly
%% because FDDEF and IFDDEF wrappers are always derived predicates
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_FDDEF(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_FDDEF(X,Y,_Caller))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IFDDEF(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IFDDEF(X,Y,_Caller)),
	    	    flora_abolish_table_call(WRAP_FDDEF(X,Y,_Caller))
	  )).
*/
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_MVDDEF(X,Y,_Caller)) :-
	    	    !,
		    flora_abolish_table_call(WRAP_MVDDEF(X,Y,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IMVDDEF(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IMVDDEF(X,Y,_Caller)),
	    	    flora_abolish_table_call(WRAP_MVDDEF(X,Y,_Caller))
	  )).

%% METH, IMETH
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_METH(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_METH(X,Y,_Caller))
	  )).
	
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_IMETH(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_IMETH(X,Y,_Caller)),
	    	    flora_abolish_table_call(WRAP_METH(X,Y,_Caller))
	  )).

%% EXISTS, OBJEQL
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_EXISTS(X,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_EXISTS(X,_Caller))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_OBJEQL(X,Y,_Caller)) :-
	    	    !,
	    	    flora_abolish_table_call(WRAP_DIFFOBJEQL(X,Y,_Caller))
	  )).


%% HiLog, up to 21 arguments
/*
**    *** The rules below a just dummies - they don't work because it is
**        hard to efficiently convert a call of the form WRAP_HILOG(fun,args...)
**        to WRAP_TABLED_HILOG(rule-index,fun,args...)
**        When we switch to a different implementation of tabling we will
**        revisit these rules.
*/
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,_Caller)) :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,_))
	  )).
?- assert((
    	    FLORA_SYMBOL('refresh_table_for')(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,_Caller))
	    :-
	            !,
	    	    flora_abolish_table_call(WRAP_TABLED_HILOG(X01,X02,X03,X04,X05,X06,X07,X08,X09,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,_))
	  )).


