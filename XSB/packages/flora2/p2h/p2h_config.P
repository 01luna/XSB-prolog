/* File:      p2h_config.P -- loader for the prolog to hilog module
** Author(s): kifer
** Contact:   flora-users@lists.sourceforge.net
** 
** Copyright (C) The Research Foundation of SUNY, 2000
** 
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: p2h_config.P,v 1.8 2002-05-04 22:16:18 kifer Exp $
** 
*/

%% bootstrap_flora/0 adds this directory to the library search path.
%% Loading p2h_config.P ensures that the module prolog2hilog is compiled 
%% and loaded.

:- compiler_options([xpp_on]).
#include "extensions_xsb.h"


:- import slash/1 from machine.
:- import fmt_write_string/3, path_sysop/3 from file_io.
:- import search_module/6 from consult.
:- import xsb_configuration/2, windows_os/0 from xsb_configuration.
:- import str_cat/3, str_sub/2 from string.
:- import flora_configuration/2 from flrregistry.

is_cygwin :- xsb_configuration(architecture,A), str_sub(cygwin,A).

?-  flora_configuration(installdir, FloraDir),
    slash(Slash),
    Basename = prolog2hilog,
    fmt_write_string(Module,
		     '%s%sp2h%s%s', f(FloraDir, Slash, Slash,Basename)),
    (   %% avoid recompilation: check if prolog2hilog.OBJ exists and 
	%% is newer than prolog2hilog.c.
	search_module(Basename,Dir,_Mod,_Ext,_Base,ModuleO),
	str_cat(Module, '.c', ModuleSourceFile),
	path_sysop(newerthan,ModuleO,ModuleSourceFile)
    %% module compiled and is current, so just load
    -> [Basename]

    %% If Module isn't compiled or is old --- recompile
    ;   xsb_configuration(compiler, CC),
	xsb_configuration(config_libdir, ConfigLibdir),
	str_cat(Module, XSB_OBJ_EXTENSION_ATOM, Objfile),
	consult(Module, [cc(CC), cc_opts(' ')]),
	fmt_write_string(LibObjFile,
			 '%s%s%s%s',
			 args(ConfigLibdir,Slash,Basename,
			      XSB_OBJ_EXTENSION_ATOM)),
	path_sysop(rename,Objfile, LibObjFile),
	((windows_os; is_cygwin), !
	;
	    %% Note: the .so ending is Unix-ism. I dunno what this
	    %% corresponds to in windows. - mk
	    str_cat(Module, '.so', SharedLib),
	    fmt_write_string(LibMod,
			     '%s%s%s.so',
			     a(ConfigLibdir,Slash,Basename)),
	    path_sysop(rename,SharedLib,LibMod)
	)
     ).
