/* File:      flrcoder.P  -- The Flora Coder
**
** Author(s): Guizhen Yang
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
** 
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: flrcoder.P,v 1.32 2002-04-17 14:38:54 gzyang Exp $
**
*/


:- compiler_options([xpp_on]).

#include "flora_characters.flh"
#include "flora_errors.flh"
#include "flora_terms.flh"
#include "flora_porting.flh"


#define THISMODULE	thismodule
#define USERMODULE	usermodule
#define SYSTEMMODULE	systemmodule

#define FOTHISMODULE	fothismodule
#define FOUSERMODULE	fousermodule
#define FOSYSTEMMODULE	fosystemmodule


/****************************************************************************
  utilities
****************************************************************************/
is_prrule(PRRULE(Head,Body),Head,Body).
%% patch rule for the debug option
is_prpatchrule(PRPATCHRULE(Head,Body),Head,Body).
is_prfact(PRFACT(Head),Head).
is_prquery(PRQUERY(Goal),Goal).
is_prdirective(PRDIRECTIVE(Direct),Direct).

is_prcommand(PRCOMMAND(C),C).
is_prtable(PRTABLE(P,A),P,A).
is_primport(PRIMPORT(P,A,M),P,A,M).
is_prindex(PRINDEX(P,A,N),P,A,N).
is_prhilogtable(PRHILOGTABLE(A),A).

is_prthismodule(PRTHISMODULE(PRTHISMODULE)).
is_prthisfdbstorage(PRTHISFDBSTORAGE(PRTHISFDBSTORAGE)).
%% debug trie
is_prthisfldstorage(PRTHISFLDSTORAGE(PRTHISFLDSTORAGE)).

%% with textual information
is_pratom(PRATOM(Atom,I),Atom,I).
is_prnumber(PRNUMBER(Number,I),Number,I).
is_prvariable(PRVARIABLE(Name,I),Name,I).
is_prstring(PRSTRING(String,I),String,I).
is_prlist(PRLIST(L,T,I),L,T,I).
is_prfdbstorage(PRFDBSTORAGE(PRATOM(WS,I)),WS,I).

%% with textual information
is_skolem(PRFDSKOLEM(Obj,Att,I),WRAP_FDSKOLEM,2,[Obj,Att],I) :- !.
is_skolem(PRIFDSKOLEM(Obj,Att,I),WRAP_IFDSKOLEM,2,[Obj,Att],I) :- !.

is_prterm(PRTERM(FObj,N,ObjList),FObj,N,ObjList).

is_goallogic(PRAND(Goal1,Goal2),',',2,[Goal1,Goal2]) :- !.
is_goallogic(PROR(Goal1,Goal2),';',2,[Goal1,Goal2]) :- !.
is_goallogic(PRNOT(Goal),not,1,[Goal]) :- !.
is_goallogic(PRTNOT(Goal),FLORA_TNOT_PREDICATE,1,[Goal]) :- !.
%%is_goallogic(PRCALL(Var),'call',1,[Var]) :- !.
%% with textual information
is_goallogic(PRCUT(_I),'!',0,[]) :- !.

is_prcall(PRCALL(Var),Var).

%% with textual information
is_pratomlit(PRATOMLIT(A,I),A,I).

is_prtermlit(PRTERMLIT(FObj,N,ObjList),FObj,N,ObjList).
is_prworkspace(PRWORKSPACE(P,WS),P,WS).

%% with textual information
is_prfloralib(PRFLORALIB(PRATOM(WS,_I)),WS).
is_florasyslib(FLORASYSLIB(I,F,N,Args),F,N,Args,I).

is_prologterm(PROLOGTERM(F,N,Args),F,N,Args).
is_prologliblit(PROLOGLIBLIT(PROLOGTERM(F,N,Args)),F,N,Args).

is_prnewpred(PRNEWPRED(Name,N,Vars),Name,N,Vars).

%% with textual information
is_prnewoid(PRNEWOID(Oid,I),Oid,I).

is_flogic(PRISA(Obj1,Obj2),WRAP_D_ISA,2,[Obj1,Obj2]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRSUB(Obj1,Obj2),WRAP_D_SUB,2,[Obj1,Obj2]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMETH(Obj,Meth),WRAP_D_METH,2,[Obj,Meth]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMETH(Obj,IMeth),WRAP_D_IMETH,2,[Obj,IMeth]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRFD(Obj,Att,Val),WRAP_D_FD,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIFD(Obj,Att,Val),WRAP_D_IFD,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRFDSIG(Obj,Att,Val),WRAP_D_FDSIG,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMVDSIG(Obj,Att,Val),WRAP_D_MVDSIG,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIFDSIG(Obj,Att,Val),WRAP_D_IFDSIG,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMVDSIG(Obj,Att,Val),WRAP_D_IMVDSIG,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMVD(Obj,Att,Val),WRAP_D_MVD,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMVD(Obj,Att,Val),WRAP_D_IMVD,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMVDINC(Obj,Att,Val),WRAP_D_MVDINC,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMVDINC(Obj,Att,Val),WRAP_D_IMVDINC,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMVDTOLIST(Obj,Att,Val),WRAP_D_MVDTOLIST,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMVDTOLIST(Obj,Att,Val),WRAP_D_IMVDTOLIST,3,[Obj,Att,Val]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRFDDEF(Obj,Att),WRAP_D_FDDEF,2,[Obj,Att]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIFDDEF(Obj,Att),WRAP_D_IFDDEF,2,[Obj,Att]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRMVDDEF(Obj,Att),WRAP_D_MVDDEF,2,[Obj,Att]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRIMVDDEF(Obj,Att),WRAP_D_IMVDDEF,2,[Obj,Att]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.
is_flogic(PRTRAN(Obj,Tran),WRAP_D_TRAN,2,[Obj,Tran]) :- 
	flora_get_counter(using_debug_prefix,1),
	!.

is_flogic(PRISA(Obj1,Obj2),WRAP_ISA,2,[Obj1,Obj2]) :- !.
is_flogic(PRSUB(Obj1,Obj2),WRAP_SUB,2,[Obj1,Obj2]) :- !.
is_flogic(PRMETH(Obj,Meth),WRAP_METH,2,[Obj,Meth]) :- !.
is_flogic(PRIMETH(Obj,IMeth),WRAP_IMETH,2,[Obj,IMeth]) :- !.
is_flogic(PRFD(Obj,Att,Val),WRAP_FD,3,[Obj,Att,Val]) :- !.
is_flogic(PRIFD(Obj,Att,Val),WRAP_IFD,3,[Obj,Att,Val]) :- !.
is_flogic(PRFDSIG(Obj,Att,Val),WRAP_FDSIG,3,[Obj,Att,Val]) :- !.
is_flogic(PRMVDSIG(Obj,Att,Val),WRAP_MVDSIG,3,[Obj,Att,Val]) :- !.
is_flogic(PRIFDSIG(Obj,Att,Val),WRAP_IFDSIG,3,[Obj,Att,Val]) :- !.
is_flogic(PRIMVDSIG(Obj,Att,Val),WRAP_IMVDSIG,3,[Obj,Att,Val]) :- !.
is_flogic(PRMVD(Obj,Att,Val),WRAP_MVD,3,[Obj,Att,Val]) :- !.
is_flogic(PRIMVD(Obj,Att,Val),WRAP_IMVD,3,[Obj,Att,Val]) :- !.
is_flogic(PRMVDINC(Obj,Att,Val),WRAP_MVDINC,3,[Obj,Att,Val]) :- !.
is_flogic(PRIMVDINC(Obj,Att,Val),WRAP_IMVDINC,3,[Obj,Att,Val]) :- !.
is_flogic(PRMVDTOLIST(Obj,Att,Val),WRAP_MVDTOLIST,3,[Obj,Att,Val]) :- !.
is_flogic(PRIMVDTOLIST(Obj,Att,Val),WRAP_IMVDTOLIST,3,[Obj,Att,Val]) :- !.
is_flogic(PREXISTS(Obj),WRAP_EXISTS,1,[Obj]) :- !.
is_flogic(PRFDDEF(Obj,Att),WRAP_FDDEF,2,[Obj,Att]) :- !.
is_flogic(PRIFDDEF(Obj,Att),WRAP_IFDDEF,2,[Obj,Att]) :- !.
is_flogic(PRMVDDEF(Obj,Att),WRAP_MVDDEF,2,[Obj,Att]) :- !.
is_flogic(PRIMVDDEF(Obj,Att),WRAP_IMVDDEF,2,[Obj,Att]) :- !.
is_flogic(PRTRAN(Obj,Tran),WRAP_TRAN,2,[Obj,Tran]) :- !.
is_flogic(PROBJEQL(O1,O2),WRAP_OBJEQL,2,[O1,O2]) :- !.

is_fllibdb(FLLIBINSERT) :- !.
is_fllibdb(FLLIBINSERTALL) :- !.
is_fllibdb(FLLIBDELETE) :- !.
is_fllibdb(FLLIBDELETEALL) :- !.
is_fllibdb(FLLIBERASE) :- !.
is_fllibdb(FLLIBERASEALL) :- !.

is_fllibdb(FLLIBBTINSERT) :- !.
is_fllibdb(FLLIBBTINSERTALL) :- !.
is_fllibdb(FLLIBBTDELETE) :- !.
is_fllibdb(FLLIBBTDELETEALL) :- !.
is_fllibdb(FLLIBBTERASE) :- !.
is_fllibdb(FLLIBBTERASEALL) :- !.


/****************************************************************************
  flora_divide_program(+CompiledRuleList,-RuleList,-FactList)

  This procedure takes a list of results from the Flora compiler and split
  into a list of rules plus directives, and a list of facts. The list of
  facts will be dump into a separate file for loading into the storage trie.
****************************************************************************/
flora_divide_program([],[],[]) :- !.

flora_divide_program([H|T],RuleList,[H|FactList]) :-
	is_prfact(H,_HF),
	!,
	flora_divide_program(T,RuleList,FactList).

flora_divide_program([H|T],[H|RuleList],FactList) :-
	flora_divide_program(T,RuleList,FactList).


/****************************************************************************
  flora_extern_code(+TermList,-Status)
  dumps the output in canonical form.
****************************************************************************/
flora_extern_code(TermList,[]) :-
	flora_set_counter(using_debug_prefix,1),
	flora_write_codelist(TermList),
	flora_set_counter(using_debug_prefix,0),
	!.

%% This is for debugging.
flora_extern_code(_TermList,[error(UNKNOWN_ERROR)]).


/****************************************************************************
  flora_intern_code(+TermList,+DefaultWorkspace,-Code,-Status)
  converts a list of intermediate terms into a callable XSB code.
****************************************************************************/
flora_intern_code(TermList,DWS,Code,[]) :-
	flora_set_counter(using_debug_prefix,1),
	flora_build_codelist(TermList,DWS,Code),
	flora_set_counter(using_debug_prefix,0),
	!.

%% This is for debugging.
flora_intern_code(_TermList,_DWS,_Code,[error(UNKNOWN_ERROR)]).


/****************************************************************************
  flora_write_codelist(+CodeList)
****************************************************************************/
flora_write_codelist([]) :- !.

flora_write_codelist([T|L]) :-
	flora_write_code(T),
	flora_write_codelist(L).


/****************************************************************************
  flora_write_code(+Term)
  dumps the output in canonical form.

  Note: Function symbols by default are not associated with any workspace.
        F-Logic constructs (path logic) are by default associated with the
        "this" workspace, so are literals. Temporary predicates, Flora
        system libraries and F-Logic constructs are not HiLog terms. They
        are not supposed to unify with normal HiLog terms.
****************************************************************************/
flora_write_code(Term) :-
	( is_prrule(Term,Head,Body) ->
	    flora_write_rule(Head,Body)

	; is_prpatchrule(Term,Head,Body) ->
	    flora_write_rule(Head,Body)

	; is_prfact(Term,Head) ->
	    flora_write_fact(Head)

	; is_prquery(Term,Goal) ->
	    flora_write_query(Goal)

	; is_prdirective(Term,Direct) ->
	    flora_write_direct(Direct)
	).


/****************************************************************************
  flora_write_direct(+Term)
****************************************************************************/
flora_write_direct(Term) :-
	flora_write_atom(':-('),
	flora_write_struct(Term,FLBODYPREFIX),
	flora_write_atom(').'), nl.


/****************************************************************************
  flora_write_fact(+Term)
****************************************************************************/
flora_write_fact(Term) :-
	flora_set_counter(using_debug_prefix,0),
	flora_write_struct(Term,FLBODYPREFIX),
	flora_set_counter(using_debug_prefix,1),
	put(0'.), nl.


/****************************************************************************
  flora_write_rule(+Head,+Body)
****************************************************************************/
flora_write_rule(Head,Body) :-
	flora_write_atom(':-('),
	flora_set_counter(using_debug_prefix,0),
	flora_write_struct(Head,FLHEADPREFIX),
	flora_set_counter(using_debug_prefix,1),
	put(0',),
	flora_write_struct(Body,FLBODYPREFIX),
	flora_write_atom(').'), nl.


/****************************************************************************
  flora_write_query(+Goal)
****************************************************************************/
flora_write_query(Goal) :-
	flora_write_atom('?-('),
	flora_write_struct(Goal,FLBODYPREFIX),
	flora_write_atom(').'), nl.


/****************************************************************************
  flora_write_structlist(+TermList,+Prefix)
  writes out a list of comma-seperated terms.
****************************************************************************/
flora_write_structlist([T],Prefix) :-
	!,
	flora_write_struct(T,Prefix).

flora_write_structlist([T|L],Prefix) :-
	!,
	flora_write_struct(T,Prefix),
	put(0',),
	flora_write_structlist(L,Prefix).


/****************************************************************************
  flora_write_struct(+Term,+Prefix)
  writes out the Term constructed by Flora Compiler in canonical form.
  Term may be a function term or a predicate term.

  The object model of Flora includes atomic objects and HiLog objects.
  Atomic objects include atoms, numbers, strings while HiLog objects consist
  of a functor, which in turn is a Flora object, and a list of arguments.

  Note that f is not the same as f() and these two do not unify. The former
  is an atomic object whereas the latter is a HiLog object. Similarly,
  f() and f()() do not unify either. This is reflected in the coding scheme.

  Prefix is only prepended to F-logic wrappers.
****************************************************************************/
flora_write_struct(Term,_Prefix) :-
	is_pratom(Term,Atom,_Index),
	!,
	flora_write_quoted_atom(Atom).

flora_write_struct(Term,_Prefix) :-
	is_prnumber(Term,Number,_Index),
	!,
	write(Number).

flora_write_struct(Term,_Prefix) :-
	is_prvariable(Term,Name,_Index),
	!,
	flora_write_variable(Name).

%% ascii list: "..."
flora_write_struct(Term,_Prefix) :-
	is_prstring(Term,String,_Index),
	!,
	write(String).

flora_write_struct(Term,Prefix) :-
	is_prlist(Term,L,T,_Index),
	!,
	( L == [] ->
	    flora_write_atom('[]')
	;
	  put(0'[),
	  flora_write_structlist(L,Prefix),
	  ( T == [] ->
	      true
	  ;
	    put(0'|),
	    flora_write_struct(T,Prefix)
	  ),
	  put(0'])
        ).

flora_write_struct(Term,Prefix) :-
	is_prterm(Term,FObj,N,ObjList),
	!,
	( is_pratom(FObj,FAtom,_Index), flora_prlgdef(FAtom,N) ->
	    flora_write_prolog(FAtom,N,ObjList,Prefix)
	;
	  flora_write_hilog(FObj,N,ObjList,Prefix)
	).

flora_write_struct(Term,Prefix) :-
	is_goallogic(Term,F,N,Args),
	!,
	flora_write_quoted_atom(F),
	( N == 0 ->
	    true
	;
	  put(0'(),
	  flora_write_structlist(Args,Prefix),
	  put(0'))
        ).

flora_write_struct(Term,Prefix) :-
	is_prcall(Term,VarTerm),
	!,
	flora_write_struct(VarTerm,Prefix).

flora_write_struct(Term,Prefix) :-
	is_pratomlit(Term,A,_Index),
	!,
	( flora_prlgdef(A,0) ->
	    flora_write_quoted_atom(A)
	;
	  flora_write_atomlit(THISMODULE,_WS,A,Prefix)
	).

flora_write_struct(Term,Prefix) :-
	is_prtermlit(Term,FObj,N,ObjList),
	!,
	( is_pratom(FObj,FAtom,_Index), flora_prlgdef(FAtom,N) ->
	    flora_write_prolog(FAtom,N,ObjList,Prefix)
	;
	  flora_write_termlit(THISMODULE,_WS,FObj,N,ObjList,Prefix)
	).

flora_write_struct(Term,Prefix) :-
	is_prworkspace(Term,P,WS),
	!,
	( is_pratom(WS,WSAtom,_Index) ->
	    %% a user module name
	    flora_write_wsstruct(WSAtom,P,Prefix)
	;
	  %% a Flora system module name
	  flora_write_wsstruct(WS,P,Prefix)
	).

flora_write_struct(Term,Prefix) :-
	is_prnewpred(Term,F,N,Args),
	!,
	flora_write_newpred(F,N,Args,Prefix).

flora_write_struct(Term,_Prefix) :-
	is_prnewoid(Term,Oid,_Index),
	!,
	flora_write_newoid(Oid).

flora_write_struct(Term,Prefix) :-
	is_flogic(Term,F,N,Args),
	!,
	flora_concat_atoms([Prefix,F],NewF),
	flora_write_wsliteral(THISMODULE,_WS,NewF,N,Args,Prefix).

flora_write_struct(Term,Prefix) :-
	is_prologterm(Term,Funct,N,Args),
	!,
	is_pratom(Funct,F,_Index),
	flora_write_prolog(F,N,Args,Prefix).

flora_write_struct(Term,Prefix) :-
	is_prologliblit(Term,Funct,N,Args),
	!,
	is_pratom(Funct,F,_Index),
	flora_write_prolog(F,N,Args,Prefix).

flora_write_struct(Term,Prefix) :-
	is_florasyslib(Term,F,N,Args,_Index),
	!,
	flora_write_syslib(F,N,Args,Prefix).

flora_write_struct(Term,Prefix) :-
	is_skolem(Term,F,N,Args,_Index),
	!,
	flora_write_prolog(F,N,Args,Prefix).

flora_write_struct(Term,_Prefix) :-
	is_prthismodule(Term),
	!,
	%% The module name is not encoded.
	flora_write_atom('FLORA_THIS_MODULE_NAME').

flora_write_struct(Term,_Prefix) :-
	is_prthisfdbstorage(Term),
	!,
	%% This is an encoded storage name.
	flora_write_atom('FLORA_THIS_FDB_STORAGE').

flora_write_struct(Term,_Prefix) :-
	is_prthisfldstorage(Term),
	!,
	%% This is an encoded storage name.
	flora_write_atom('FLORA_THIS_FLD_STORAGE').

flora_write_struct(Term,_Prefix) :-
	is_prfdbstorage(Term,WSName,_Index),
	!,
	%% This refers to a Flora user module storage.
	flora_write_atom('FLORA_USER_FDB_STORAGE('),
	flora_write_functor(WSName),
	put(0')).

flora_write_struct(Term,_Prefix) :-
	( is_prcommand(Term,C) ->
	    D=C

	%%; is_prexport(Term,P,A) ->
	%%    D=export(P/A)

	; is_primport(Term,P,A,M) ->
	    D=import(from(P/A,M))
	),
	!,
	write_canonical(D).

flora_write_struct(Term,_Prefix) :-
	is_prtable(Term,P,A),
	!,
	flora_write_atom('table(/('),
	flora_write_predicate_symbol(P,A),
	put(0',),
	write(A),
	flora_write_atom('))'), nl.

flora_write_struct(Term,_Prefix) :-
	is_prhilogtable(Term,A),
	!,
	eval(A+1,N),
	flora_write_atom('table(/('),
	flora_write_workspace(THISMODULE,_WS,WRAP_HILOG),
	put(0',),
	write(N),
	flora_write_atom('))'), nl.

%%flora_write_struct(Term,_Prefix) :-
%%	is_prdynamic(Term,P,A),
%%	!,
%%	flora_write_atom('dynamic(/('),
%%	flora_write_predicate_symbol(P,A),
%%	put(0',),
%%	write(A),
%%	flora_write_atom('))'), nl.

flora_write_struct(Term,_Prefix) :-
	is_prindex(Term,P,A,N),
	!,
	flora_write_atom('index(/('),
	flora_write_predicate_symbol(P,A),
	put(0',),
	write(A),
	flora_write_atom('),'),
	write(N),
	put(0')), nl.

flora_write_struct(Term,_Prefix) :-
	atomic(Term),
	!,
	write_canonical(Term).


/****************************************************************************
  flora_write_predicate_symbol(+Funct,+Arity)

  It writes out a workspace Macro depending on Funct/Arity is defined
  as Prolog, first order, or F-logic static.
****************************************************************************/
flora_write_predicate_symbol(P,A) :-
	( flora_prlgdef(P,A) ->
	    flora_write_quoted_atom(P)

	; flora_flogicstaticdef(P,A) ->
	    flora_write_workspace(THISMODULE,_WS,P)

	; flora_firstorderdef(P,A) ->
	    flora_write_workspace(FOTHISMODULE,_WS,P)
	;
	  flora_write_quoted_atom(P)
	).


/****************************************************************************
  flora_write_variable(+Name)

  Note:  "Name" cannot be an underscore, since it should have been replaced
         by a new unique explicitly named variable.
****************************************************************************/
flora_write_variable(Name) :-
	put(CH_UNDERSCORE),
	flora_write_atom(Name).


/****************************************************************************
  flora_write_wsstruct(+Workspace,+Term,+Prefix)

  Note: Workspace is already reduced to an atom or PRFLORALIB(Atom)
        by the compiler.
****************************************************************************/
flora_write_wsstruct(WS,Term,Prefix) :-
	( is_prfloralib(WS,WSAtom) ->
	    %% a call to Flora system module
	    flora_write_sysmod(WSAtom,Term,Prefix)

	; is_pratomlit(Term,Atom,_Index) ->
	    flora_write_atomlit(USERMODULE,WS,Atom,Prefix)

	; is_prtermlit(Term,FObj,N,ObjList) ->
	    flora_write_termlit(USERMODULE,WS,FObj,N,ObjList,Prefix)

	; is_flogic(Term,F,N,Args) ->
	    flora_concat_atoms([Prefix,F],NewF),
	    flora_write_wsliteral(USERMODULE,WS,NewF,N,Args,Prefix)
        ).


/****************************************************************************
  flora_write_sysmod(+Workspace,+Term,+Prefix)

  This procedure is to write a literal associated with a Flora system module.
  Workspace is already reduced to an atom.
****************************************************************************/
flora_write_sysmod(WS,Term,Prefix) :-
	( is_pratomlit(Term,Atom,_Index) ->
	    flora_write_atomlit(SYSTEMMODULE,WS,Atom,Prefix)

	; is_prtermlit(Term,FObj,N,ObjList) ->
	    flora_write_termlit(SYSTEMMODULE,WS,FObj,N,ObjList,Prefix)

	; is_flogic(Term,F,N,Args) ->
	    flora_concat_atoms([Prefix,F],NewF),
	    flora_write_wsliteral(SYSTEMMODULE,WS,NewF,N,Args,Prefix)
	).


/****************************************************************************
  flora_write_atomlit(+Mode,+Workspace,+Atom,+prefix)
****************************************************************************/
flora_write_atomlit(Mode,WS,A,Prefix) :-
	flora_firstorderdef(A,0),
	!,
	flora_switch_firstorder_mode(Mode,NewMode),
	flora_write_wsliteral(NewMode,WS,A,0,[],Prefix).

flora_write_atomlit(Mode,WS,A,Prefix) :-
	flora_flogicstaticdef(A,0),
	!,
	flora_write_wsliteral(Mode,WS,A,0,[],Prefix).

flora_write_atomlit(Mode,WS,A,Prefix) :-
	flora_write_wsliteral(Mode,WS,WRAP_HILOG,1,[A],Prefix).


/****************************************************************************
  flora_write_termlit(+Mode,+WS,+Functor,+Arity,+Args,+Prefix)
****************************************************************************/
flora_write_termlit(Mode,WS,Funct,N,Args,Prefix) :-
	is_pratom(Funct,FAtom,_Index),
	flora_firstorderdef(FAtom,N),
	!,
	flora_switch_firstorder_mode(Mode,NewMode),
	flora_write_wsliteral(NewMode,WS,FAtom,N,Args,Prefix).

flora_write_termlit(Mode,WS,Funct,N,Args,Prefix) :-
	is_pratom(Funct,FAtom,_Index),
	flora_flogicstaticdef(FAtom,N),
	!,
	flora_write_wsliteral(Mode,WS,FAtom,N,Args,Prefix).

flora_write_termlit(Mode,WS,Funct,N,Args,Prefix) :-
	M is N+1,
	flora_write_wsliteral(Mode,WS,WRAP_HILOG,M,[Funct|Args],Prefix).


/****************************************************************************
  flora_write_wsliteral(+Mode,+Workspace,+Funct,+Arity,+Args,+Prefix)
****************************************************************************/
flora_write_wsliteral(Mode,WS,Funct,N,Args,Prefix) :-
	flora_write_workspace(Mode,WS,Funct),
	( N == 0 ->
	    true
	;
	  put(0'(),
	  flora_write_structlist(Args,Prefix),
	  put(0'))
        ).


/****************************************************************************
  flora_write_workspace(+Mode,+Workspace,+Funct)

  (1) Mode == THISMODULE: write workspace Macro for "this" module.
  (2) Mode == USERMODULE: write workspace Macro for a Flora user module.
  (3) Mode == SYSTEMMODULE: write workspace Macro for a Flora system module.
  (4) Mode == FOTHISMODULE: a first order Macro for "this" module.
  (5) Mode == FOUSERMODULE: a first order Macro for a Flora user module.
  (6) Mode == FOSYSTEMMODULE: a first order Macro for a Flora system module.
****************************************************************************/
flora_write_workspace(THISMODULE,_WS,Funct) :-
	!,
	%% _WS is a just a place holder.
	flora_write_atom('FLORA_THIS_WORKSPACE('),
	flora_write_functor(Funct),
	put(0')).

flora_write_workspace(USERMODULE,WS,Funct) :-
	!,
	flora_write_atom('FLORA_USER_WORKSPACE('),
	flora_write_functor(WS),
	put(0',),
	flora_write_functor(Funct),
	put(0')).

flora_write_workspace(SYSTEMMODULE,WS,Funct) :-
	!,
	flora_write_atom('FLORA_SYSTEM_WORKSPACE('),
	flora_write_functor(WS),
	put(0',),
	flora_write_functor(Funct),
	put(0')).

flora_write_workspace(FOTHISMODULE,_WS,Funct) :-
	!,
	%% _WS is a just a place holder.
	flora_write_atom('FLORA_FO_THIS_WORKSPACE('),
	flora_write_functor(Funct),
	put(0')).

flora_write_workspace(FOUSERMODULE,WS,Funct) :-
	!,
	flora_write_atom('FLORA_FO_USER_WORKSPACE('),
	flora_write_functor(WS),
	put(0',),
	flora_write_functor(Funct),
	put(0')).

flora_write_workspace(FOSYSTEMMODULE,WS,Funct) :-
	!,
	flora_write_atom('FLORA_FO_SYSTEM_WORKSPACE('),
	flora_write_functor(WS),
	put(0',),
	flora_write_functor(Funct),
	put(0')).


/****************************************************************************
  flora_write_functor(+Atom)

  It is for outputting a module name. For efficiency reasons, quotes are
  note allowed in module names. Otherwise, flora_write_funct/1 should be
  called to output module names so that macros cannot be broken.
****************************************************************************/
flora_write_functor(A) :-
	flora_write_quoted_atom(A).
	%%atom_codes(A,Chars),
	%%flora_write_funct(Chars).


/****************************************************************************
flora_write_funct([]).

flora_write_funct([H|T]) :-
	( H == CH_QUOTE ->
	    put(H),
            put(H)

	; H == CH_DOUBLEQUOTE ->
	    put(H),
	    put(H)
	;
	  put(H)
        ),
	flora_write_funct(T).
****************************************************************************/


/****************************************************************************
  flora_write_prolog(+F,+N,+Args,+Prefix)
  writes out "Term" as a normal Prolog term. The functor F must be an atom.

  Note: F-logic atoms inside literals are output as if they appeared
        in a rule body.
****************************************************************************/
flora_write_prolog(F,N,Args,Prefix) :-
	flora_write_quoted_atom(F),
	( N == 0 ->
	    true
	;
	  put(0'(),
	  flora_write_structlist(Args,Prefix),
	  put(0'))
        ).


/****************************************************************************
  flora_write_hilog(+F,+N,+Args,+Prefix)
  writes out "Term" as a Hilog term.
****************************************************************************/
flora_write_hilog(F,N,Args,Prefix) :-
	M is N+1,
	flora_write_prolog(WRAP_HILOG,M,[F|Args],Prefix).


/****************************************************************************
  flora_write_syslib(+Lib,+N,+Args,+Prefix)
  writes out a FLORA system call.
****************************************************************************/
flora_write_syslib(FLLIBANSWER,N,Args,Prefix) :-
	!,
	flora_write_prolog(FLLIBPROGRAMANS,N,Args,Prefix).

flora_write_syslib(Lib,1,[List],_Prefix) :-
	is_fllibdb(Lib),
	!,
	flora_set_counter(using_debug_prefix,0),
	write_canonical(Lib),
	put(0'(),
	flora_write_struct(List,FLBODYPREFIX),
	flora_set_counter(using_debug_prefix,1),
	put(0')).

flora_write_syslib(Lib,2,[List,Cond],_Prefix) :-
	is_fllibdb(Lib),
	!,
	flora_set_counter(using_debug_prefix,0),
	write_canonical(Lib),
	put(0'(),
	flora_write_struct(List,FLBODYPREFIX),
	flora_set_counter(using_debug_prefix,1),
	put(0',),
	flora_write_struct(Cond,FLBODYPREFIX),
	put(0')).

flora_write_syslib(Lib,N,Args,Prefix) :-
	( Lib == FLLIBMODLIT, N == 2 ->
	    Args=[P,WS]

	; Lib == FLLIBMODOBJ, N == 3 ->
	    Args=[P,WS,Object]
	),
	!,
	%% These two structures are used to construct a dynamic call
	%% to a Flora user module. They are used in a DB update or like
	%% a literal in a rule body.
	%% FLLIBMODLIT and FLLIBMODOBJ are also used to encode first order
	%% predicates. Its first argument will be FL_FIRSTORDER.
	( is_pratomlit(P,A,_Index) ->
	    ( flora_firstorderdef(A,0) ->
		ModeArg=fo,
		PF=A,
		is_prlist(PArgs,[],[],_I)
	    ;
	      ModeArg=[],
	      PF=WRAP_HILOG,
	      is_prlist(PArgs,[A],[],_I)
	    )

	; is_prtermlit(P,FObj,Arity,ObjList) ->
	    ( is_pratom(FObj,FAtom,_Index), flora_firstorderdef(FAtom,Arity) ->
		ModeArg=fo,
		PF=FAtom,
		is_prlist(PArgs,ObjList,[],_I)
	    ;
	      ModeArg=[],
	      PF=WRAP_HILOG,
	      is_prlist(PArgs,[FObj|ObjList],[],_I)
	    )
	;
	  ModeArg=[],
	  is_flogic(P,Wrap,Arity,ObjList),
	  flora_concat_atoms([Prefix,Wrap],PF),
	  is_prlist(PArgs,ObjList,[],_I)
	),
	!,
	( Lib == FLLIBMODLIT ->
	    ( ModeArg == [] ->
		flora_write_prolog(FLLIBMODLIT,3,[PF,PArgs,WS],Prefix)
	    ;
	      flora_write_prolog(FLLIBMODLIT,4,[FL_FIRSTORDER,PF,PArgs,WS],Prefix)
	    )
	;
	  ( ModeArg == [] ->
	      flora_write_prolog(FLLIBMODOBJ,4,[PF,PArgs,WS,Object],Prefix)
	  ;
	    flora_write_prolog(FLLIBMODOBJ,5,[FL_FIRSTORDER,PF,PArgs,WS,Object],Prefix)
	  )
	).

flora_write_syslib(F,N,Args,Prefix) :-
	flora_write_prolog(F,N,Args,Prefix).


/****************************************************************************
  flora_write_newpred(+F,+N,+Args,+Prefix)
****************************************************************************/
flora_write_newpred(F,N,Args,Prefix) :-
	flora_write_wsliteral(THISMODULE,_WS,F,N,Args,Prefix).

/****************************************************************************
  flora_write_newoid(+Oid)
****************************************************************************/
flora_write_newoid(Oid) :-
	format('FLORA_SYMBOL(''~w'')', [Oid]).


/****************************************************************************
  flora_switch_firstorder_mode(+Mode,-FOMode)
****************************************************************************/
flora_switch_firstorder_mode(THISMODULE,FOTHISMODULE) :- !.
flora_switch_firstorder_mode(USERMODULE,FOUSERMODULE) :- !.
flora_switch_firstorder_mode(SYSTEMMODULE,FOSYSTEMMODULE) :- !.
flora_switch_firstorder_mode(M,M).


/****************************************************************************
  flora_build_codelist(+TermList,+DefaultWorkspace,-Code)

  Note: TermList should not be an empty list.
****************************************************************************/
flora_build_codelist([T],DWS,Code) :-
	!,
	flora_build_code(T,DWS,Code).

flora_build_codelist([T|L],DWS,Code) :-
	flora_build_code(T,DWS,C1),
	flora_build_codelist(L,DWS,C2),
	Code =.. [',',C1,C2].


/****************************************************************************
  flora_build_code(+Term,+DefaultWorkspace,-Code)
  converts a term into an XSB internal code.

  Note: Function symbols by default are not associated with any workspace.
        F-Logic constructs (path logic) are by default associated with the
        "default" workspace, so are literals. Temporary predicates, Flora
        system libraries and F-Logic constructs are not HiLog terms. They
        are not supposed to unify with normal HiLog terms.

        By default, it assumes the code is built for a Flora user module.
****************************************************************************/
flora_build_code(Term,DWS,Code) :-
	( is_prrule(Term,Head,Body) ->
	    flora_build_rule(Head,Body,DWS,Code)

	; is_prpatchrule(Term,Head,Body) ->
	    flora_build_rule(Head,Body,DWS,Code)

	; is_prfact(Term,Head) ->
	    flora_build_fact(Head,DWS,Code)

	; is_prquery(Term,GoalTerm) ->
	    flora_build_query(GoalTerm,DWS,Code)

	; is_prdirective(Term,Direct) ->
	    flora_build_directive(Direct,DWS,Code)
	).


/****************************************************************************
  flora_build_directive(+Term,+DefaultWorkspace,-Code)

  Builds XSB compiler directive to be dumped as Prolog code
****************************************************************************/
flora_build_directive(Term,DWS,Code) :-
	flora_build_struct(Term,DWS,FLBODYPREFIX,_VarList,Code).


/****************************************************************************
  flora_build_fact(+Term,+DefaultWorkspace,-Code)
****************************************************************************/
flora_build_fact(Term,DWS,Code) :-
	flora_set_counter(using_debug_prefix,0),
	flora_build_struct(Term,DWS,FLBODYPREFIX,_VarList,Code),
	flora_set_counter(using_debug_prefix,1).


/****************************************************************************
  flora_build_rule(+Head,+Body,+DefaultWorkspace,-Code)
****************************************************************************/
flora_build_rule(Head,Body,DWS,Code) :-
	flora_set_counter(using_debug_prefix,0),
	flora_build_struct(Head,DWS,FLHEADPREFIX,VarList,HeadCode),
	flora_set_counter(using_debug_prefix,1),
	flora_build_struct(Body,DWS,FLBODYPREFIX,VarList,BodyCode),
	Code =.. [(':-'),HeadCode,BodyCode].


/****************************************************************************
  flora_build_query(Term,+DefaulWorkspace,-Code)
****************************************************************************/
flora_build_query(Term,DWS,Code) :-
	flora_build_struct(Term,DWS,FLBODYPREFIX,_VarList,Code).


/****************************************************************************
  flora_build_structlist(+TermList,+DefaultWorkspace,+Prefix,?VarList,-CodeList)
****************************************************************************/
flora_build_structlist([],_DWS,_Prefix,_VarList,[]) :- !.

flora_build_structlist([T|L],DWS,Prefix,VarList,[TCode|LCode]) :-
	!,
	flora_build_struct(T,DWS,Prefix,VarList,TCode),
	flora_build_structlist(L,DWS,Prefix,VarList,LCode).


/****************************************************************************
  flora_build_struct(+Term,+Workspace,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_struct(Term,_DWS,_Prefix,_VarList,Code) :-
	is_pratom(Term,Code,_Index),
	!.

flora_build_struct(Term,_DWS,_Prefix,_VarList,Code) :-
	is_prnumber(Term,Code,_Index),
	!.

flora_build_struct(Term,_DWS,_Prefix,VarList,Code) :-
	is_prvariable(Term,Name,_Index),
	!,
	flora_build_variable(Name,VarList,Code).

flora_build_struct(Term,_DWS,_Prefix,_VarList,Code) :-
	is_prstring(Term,Code,_Index),
	!.

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prlist(Term,L,T,_Index),
	!,
	( L == [] ->
	    Code=[]
	;
	  flora_build_structlist(L,DWS,Prefix,VarList,LCode),
	  ( T == [] ->
	      Code=LCode
	  ;
	    flora_build_struct(T,DWS,Prefix,VarList,TCode),
	    append(LCode,TCode,Code)
	  )
        ).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prterm(Term,FObj,N,ObjList),
	!,
	( is_pratom(FObj,FAtom,_Index), flora_prlgdef(FAtom,N) ->
	    flora_build_prolog(FAtom,N,ObjList,DWS,Prefix,VarList,Code)
	;
	  flora_build_hilog(FObj,N,ObjList,DWS,Prefix,VarList,Code)
	).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_goallogic(Term,F,N,Args),
	!,
	( N == 0 ->
	    Code=F
	;
	  flora_build_structlist(Args,DWS,Prefix,VarList,ACode),
	  Code =.. [F|ACode]
        ).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prcall(Term,VarTerm),
	!,
	flora_build_struct(VarTerm,DWS,Prefix,VarList,Code).

flora_build_struct(Term,DWS,Prefix,_VarList,Code) :-
	is_pratomlit(Term,A,_Index),
	!,
	( flora_prlgdef(A,0) ->
	    Code=A
	;
	  flora_build_atomlit(USERMODULE,A,DWS,Prefix,Code)
	).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prtermlit(Term,FObj,N,ObjList),
	!,
	( is_pratom(FObj,FAtom,_Index), flora_prlgdef(FAtom,N) ->
	    flora_build_prolog(FAtom,N,ObjList,DWS,Prefix,VarList,Code)
	;
	  flora_build_termlit(usermodule,FObj,N,ObjList,DWS,DWS,Prefix,VarList,Code)
	).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prworkspace(Term,P,WS),
	!,
	( is_pratom(WS,WSAtom,_Index) ->
	    %% a user module name
	    flora_build_wsstruct(P,WSAtom,DWS,Prefix,VarList,Code)
	;
	  %% a Flora system module name
	  flora_build_wsstruct(P,WS,DWS,Prefix,VarList,Code)
	).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prnewpred(Term,F,N,Args),
	!,
	flora_build_newpred(F,N,Args,DWS,Prefix,VarList,Code).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_flogic(Term,F,N,Args),
	!,
	flora_concat_atoms([Prefix,F],NewF),
	flora_build_wsliteral(USERMODULE,NewF,N,Args,DWS,DWS,Prefix,VarList,Code).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prologterm(Term,Funct,N,Args),
	!,
	is_pratom(Funct,F,_Index),
	flora_build_prolog(F,N,Args,DWS,Prefix,VarList,Code).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_prologliblit(Term,Funct,_N,Args),
	!,
	is_pratom(Funct,F,_Index),
	flora_build_structlist(Args,DWS,Prefix,VarList,ArgsCodeList),
	%% If p(a)@prolog(mod) is run from Flora shell, the code generated
	%% must look like: X =.. [p,a], call(X).
	Code=','('=..'(P,[F|ArgsCodeList]),call(P)).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_florasyslib(Term,F,N,Args,_Index),
	!,
	flora_build_syslib(F,N,Args,DWS,Prefix,VarList,Code).

flora_build_struct(Term,DWS,Prefix,VarList,Code) :-
	is_skolem(Term,F,N,Args,_Index),
	!,
	flora_build_prolog(F,N,Args,DWS,Prefix,VarList,Code).

flora_build_struct(Term,_DWS,_Prefix,_VarList,Code) :-
	is_primport(Term,P,A,M),
	!,
	Code=import(from(P/A,M)).

flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
	is_prtable(Term,P,A),
	!,
	flora_build_predicate_symbol(P,A,DWS,NewP),
	Code=table(NewP/A).

flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
	is_prhilogtable(Term,A),
	!,
	eval(A+1,N),
	flora_user_module_predicate_symbol(WRAP_HILOG,DWS,NewP),
	Code=table(NewP/N).

%%flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
%%	is_prdynamic(Term,P,A),
%%	!,
%%	flora_build_predicate_symbol(P,A,DWS,NewP),
%%	Code=dynamic(NewP/A).

flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
	is_prindex(Term,P,A,N),
	!,
	flora_build_predicate_symbol(P,A,DWS,NewP),
	Code=index(NewP/A,N).

flora_build_struct(Term,DWS,_Prefix,_VarList,DWS) :-
	is_prthismodule(Term),
	!.

flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
	is_prthisfdbstorage(Term),
	!,
	flora_user_fdb_storage_name(DWS,Code).

flora_build_struct(Term,DWS,_Prefix,_VarList,Code) :-
	is_prthisfldstorage(Term),
	!,
	%% debug storage
	flora_user_fld_storage_name(DWS,Code).

flora_build_struct(Term,_DWS,_Prefix,_VarList,Code) :-
	is_prfdbstorage(Term,WSName,_Index),
	!,
	flora_user_fdb_storage_name(WSName,Code).

flora_build_struct(Term,_DWS,_Prefix,_VarList,Term) :-
	atomic(Term),
	!.


/****************************************************************************
  flora_build_predicate_symbol(+Funct,+Arity,+WS,-Code)
****************************************************************************/
flora_build_predicate_symbol(P,A,WS,Code) :-
	( flora_prlgdef(P,A) ->
	    Code=P

	; flora_flogicstaticdef(P,A) ->
	    flora_user_module_predicate_symbol(P,WS,Code)

	; flora_firstorderdef(P,A) ->
	    flora_firstorder_user_module_predicate_symbol(P,WS,Code)
	;
	  Code=P
	).


/****************************************************************************
  flora_build_variable(+Name,?VarList,-Code)

  Note:  "Name" cannot be an underscore, since it should have been replaced
         by a new unique explicitly named variable.
****************************************************************************/
flora_build_variable(Name,[Name=Code|_],Code) :- !.

flora_build_variable(Name,[_|NVs],Code) :-
	flora_build_variable(Name,NVs,Code).


/****************************************************************************
  flora_build_wsstruct(+Term,+Workspace,+DefaultWorkspace,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_wsstruct(Term,WS,DWS,Prefix,VarList,Code) :-
	( is_prfloralib(WS,WSAtom) ->
	    flora_build_sysmod(Term,WSAtom,DWS,Prefix,VarList,Code)

	; is_pratomlit(Term,Atom,_Index) ->
	    flora_build_atomlit(USERMODULE,Atom,WS,Prefix,Code)

	; is_prtermlit(Term,FObj,N,ObjList) ->
	    flora_build_termlit(USERMODULE,FObj,N,ObjList,WS,DWS,Prefix,VarList,Code)

	; is_flogic(Term,F,N,Args) ->
	    flora_concat_atoms([Prefix,F],NewF),
	    flora_build_wsliteral(USERMODULE,NewF,N,Args,WS,DWS,Prefix,VarList,Code)
        ).


/****************************************************************************
  flora_build_sysmod(+Term,+Workspace,+DefaultWorkspace,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_sysmod(Term,WS,DWS,Prefix,VarList,Code) :-
	( is_pratomlit(Term,Atom,_Index) ->
	    flora_build_atomlit(SYSTEMMODULE,Atom,WS,Prefix,Code)

	; is_prtermlit(Term,FObj,N,ObjList) ->
	    flora_build_termlit(SYSTEMMODULE,FObj,N,ObjList,WS,DWS,Prefix,VarList,Code)

	; is_flogic(Term,F,N,Args) ->
	    flora_concat_atoms([Prefix,F],NewF),
	    flora_build_wsliteral(SYSTEMMODULE,NewF,N,Args,WS,DWS,Prefix,VarList,Code)
        ).


/****************************************************************************
  flora_build_wsliteral(+Mode,+Funct,+Arity,+Args,+WS,+DWS,+Prefix,?VarList,-Code)

  (1) Mode == USERMODULE: build a predicate for a Flora user module.
  (2) Mode == SYSTEMMODULE: build a predicate for a Flora system module.
  (3) Mode == FOUSERMODULE: build a first order predicate for a Flora user module.
  (4) Mode == FOSYSTEMMODULE: build a first order predicate for a Flora system module.
****************************************************************************/
flora_build_wsliteral(Mode,F,_N,Args,WS,DWS,Prefix,VarList,Code) :-
	flora_build_structlist(Args,DWS,Prefix,VarList,ACodeList),
	( Mode == USERMODULE ->
	    flora_user_module_predicate(F,ACodeList,WS,Code)

	; Mode == SYSTEMMODULE ->
	    flora_system_module_predicate(F,ACodeList,WS,Code)

	; Mode == FOUSERMODULE ->
	    flora_firstorder_user_module_predicate(F,ACodeList,WS,Code)

	; Mode == FOSYSTEMMODULE ->
	    flora_firstorder_system_module_predicate(F,ACodeList,WS,Code)
	).


/****************************************************************************
  flora_build_atomlit(+Mode,+Atom,+WS,+Prefix,-Code)
****************************************************************************/
flora_build_atomlit(Mode,A,WS,Prefix,Code) :-
	flora_firstorderdef(A,0),
	!,
	flora_switch_firstorder_mode(Mode,NewMode),
	flora_build_wsliteral(NewMode,A,0,[],WS,WS,Prefix,_VarList,Code).

flora_build_atomlit(Mode,A,WS,Prefix,Code) :-
	flora_flogicstaticdef(A,0),
	!,
	flora_build_wsliteral(Mode,A,0,[],WS,WS,Prefix,_VarList,Code).

flora_build_atomlit(Mode,A,WS,Prefix,Code) :-
	flora_build_wsliteral(Mode,WRAP_HILOG,1,[A],WS,WS,Prefix,_VarList,Code).


/****************************************************************************
  flora_build_termlit(+Mode,+Functor,+Arity,+Args,+WS,+DWS,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_termlit(Mode,Funct,N,Args,WS,DWS,Prefix,VarList,Code) :-
	is_pratom(Funct,FAtom,_Index),
	flora_firstorderdef(FAtom,N),
	!,
	flora_switch_firstorder_mode(Mode,NewMode),
	flora_build_wsliteral(NewMode,FAtom,N,Args,WS,DWS,Prefix,VarList,Code).

flora_build_termlit(Mode,Funct,N,Args,WS,DWS,Prefix,VarList,Code) :-
	is_pratom(Funct,FAtom,_Index),
	flora_flogicstaticdef(FAtom,N),
	!,
	flora_build_wsliteral(Mode,FAtom,N,Args,WS,DWS,Prefix,VarList,Code).

flora_build_termlit(Mode,Funct,N,Args,WS,DWS,Prefix,VarList,Code) :-
	M is N+1,
	flora_build_wsliteral(Mode,WRAP_HILOG,M,[Funct|Args],WS,DWS,Prefix,VarList,Code).


/****************************************************************************
  flora_build_prolog(+F,+N,+Args,+DWS,Prefix,?VarList,-Code)
****************************************************************************/
flora_build_prolog(F,N,Args,DWS,Prefix,VarList,Code) :-
	( N == 0 ->
	    Code=F
	;
	  flora_build_structlist(Args,DWS,Prefix,VarList,ACode),
	  Code =.. [F|ACode]
        ).


/****************************************************************************
  flora_build_hilog(+F,+N,+Args,+DWS,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_hilog(F,N,Args,DWS,Prefix,VarList,Code) :-
	M is N+1,
	flora_build_prolog(WRAP_HILOG,M,[F|Args],DWS,Prefix,VarList,Code).


/****************************************************************************
  flora_build_syslib(+Lib,+N,+Args,+DWS,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_syslib(FLLIBANSWER,N,Args,DWS,Prefix,VarList,Code) :-
	!,
	flora_build_prolog(FLLIBSHELLANS,N,Args,DWS,Prefix,VarList,Code).

flora_build_syslib(Lib,1,[List],DWS,_Prefix,VarList,Code) :-
	is_fllibdb(Lib),
	!,
	flora_set_counter(using_debug_prefix,0),
	flora_build_struct(List,DWS,FLBODYPREFIX,VarList,ListCode),
	flora_set_counter(using_debug_prefix,1),
	Code =.. [Lib,ListCode].

flora_build_syslib(Lib,2,[List,Cond],DWS,_Prefix,VarList,Code) :-
	is_fllibdb(Lib),
	!,
	flora_set_counter(using_debug_prefix,0),
	flora_build_struct(List,DWS,FLBODYPREFIX,VarList,ListCode),
	flora_set_counter(using_debug_prefix,1),
	flora_build_struct(Cond,DWS,FLBODYPREFIX,VarList,CondCode),
	Code =.. [Lib,ListCode,CondCode].

flora_build_syslib(Lib,N,Args,DWS,Prefix,VarList,Code) :-
	( Lib == FLLIBMODLIT, N == 2 ->
	    Args=[P,WS]

	; Lib == FLLIBMODOBJ, N == 3 ->
	    Args=[P,WS,Object]
	),
	!,
	( is_pratomlit(P,A,_Index) ->
	    ( flora_firstorderdef(A,0) ->
		ModeArg=fo,
		PF=A,
		is_prlist(PArgs,[],[],_I)
	    ;
	      ModeArg=[],
	      PF=WRAP_HILOG,
	      is_prlist(PArgs,[A],[],_I)
	    )

	; is_prtermlit(P,FObj,Arity,ObjList) ->
	    ( is_pratom(FObj,FAtom,_Index), flora_firstorderdef(FAtom,Arity) ->
		ModeArg=fo,
		PF=FAtom,
		is_prlist(PArgs,ObjList,[],_I)
	    ;
	      ModeArg=[],
	      PF=WRAP_HILOG,
	      is_prlist(PArgs,[FObj|ObjList],[],_I)
	    )
	;
	  ModeArg=[],
	  is_flogic(P,Wrap,Arity,ObjList),
	  flora_concat_atoms([Prefix,Wrap],PF),
	  is_prlist(PArgs,ObjList,[],_I)
	),
	!,
	( Lib == FLLIBMODLIT ->
	    ( ModeArg == [] ->
		flora_build_prolog(FLLIBMODLIT,3,[PF,PArgs,WS],DWS,Prefix,VarList,Code)
	    ;
		flora_build_prolog(FLLIBMODLIT,4,[FL_FIRSTORDER,PF,PArgs,WS],
		                   DWS,Prefix,VarList,Code)
	    )
	;
	    ( ModeArg == [] ->
		flora_build_prolog(FLLIBMODOBJ,4,[PF,PArgs,WS,Object],
		                   DWS,Prefix,VarList,Code)
	    ;
	      flora_build_prolog(FLLIBMODOBJ,5,[FL_FIRSTORDER,PF,PArgs,WS,Object],
	                         DWS,Prefix,VarList,Code)
	    )
	).

flora_build_syslib(Lib,N,Args,DWS,Prefix,VarList,Code) :-
	flora_build_prolog(Lib,N,Args,DWS,Prefix,VarList,Code).


/****************************************************************************
  flora_build_newpred(+F,+N,+Args,+DWS,+Prefix,?VarList,-Code)
****************************************************************************/
flora_build_newpred(F,N,Args,DWS,Prefix,VarList,Code) :-
	flora_build_wsliteral(USERMODULE,F,N,Args,DWS,DWS,Prefix,VarList,Code).
