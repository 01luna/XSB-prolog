/* File:      flrshell.P  -- The Flora interactive shell
**
** Author(s): Bertram Ludaescher
**            Michael Kifer
**            Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: flrshell.P,v 1.22 2001-04-27 02:34:50 kifer Exp $
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


/*********************************************************************/
flora_shell_loop :-
	flora_init_shell,
	push_abort_cutpoint,
	repeat,
	pop_abort_cutpoint,
	push_abort_cutpoint,
	%seen,
	%see(userin),
	%told,
	%tell(userout),
	flora_shell_prompt,
	flora_shell_command_line(Code,Options,Status),
	( flora_good_command(Status) ->
	    findall(Op,member(FLSYSLIB(Op),Options),OpList),
	    flora_load_library(OpList),
	    %writeln(Code),
	    call(Code)
	;
	  true
        ),
	flora_loop_guard(Status).


/*********************************************************************/
flora_init_shell :-
	consult(flrundefhook),
	add_xsb_hook(xsb_undefined_predicate_hook(flora_undefined_predicate_hook(_))),
	consult(flrutils),
	flora_load_library(FLLIBSHELLANS),
	flora_load_library(FLLIBLOAD),
	flora_load_library(FLLIBDISPLAY),
	flloadtrailer(NONE),
	flora_welcome_msg,
	all,
	flChatter,
	conset(flora_shell_loaded,1),
	!.


/*********************************************************************/
flora_welcome_msg :-
	package_configuration(version(flora),V),
	flora_stdmsg_string("\nFLORA-2 Version %S\n\n",args(V)),
	flora_stdmsg_line('Type `help.'' to show the help message.'),
	flora_stdmsg_line('Type `rundemo(demoName).'' to run demos.'),
	flora_stdmsg_nl,
	!.


/*********************************************************************/
flora_shell_prompt :- flora_stdfdbk_string("flora2 ?- ").


/*********************************************************************/
flora_loop_guard(Status) :-
	( flora_end_of_input(Status) ->
	    ( pop_stdin(cmd_line_argument) ->
		%% end of input from -e option string to XSB
		flora_stdfdbk_string("\n"),
		abort
	    ;
	      end
	    )
	;
	  abort
        ).


/*********************************************************************/
help :-
	flora_stdmsg_line("\nFLORA shell commands:\n"),
	flora_stdmsg_line('o help'),
	flora_stdmsg_line('    show this info'),
	flora_stdmsg_line('o flCompile FILE'),
	flora_stdmsg_line('    compile FILE.flr for the shell module `main'''),
	flora_stdmsg_line('o flCompile FILE>>Module'),
	flora_stdmsg_line('    compile FILE.flr for Module'),
	flora_stdmsg_line('o flLoad FILE>>Module  OR  [FILE >> Module,...]'),
	flora_stdmsg_line('    load FILE.flr into Module'),
	flora_stdmsg_line('    specifying ''FILE.P'' or ''FILE.O'' loads these files'),
	flora_stdmsg_line('    the [...] version can load a list of files files'),
	flora_stdmsg_line('o flLoad FILE  OR  [FILE,...]'),
	flora_stdmsg_line('    load FILE.flr into the shell module `main'''),
	flora_stdmsg_line('o rundemo(FILE)'),
	flora_stdmsg_line('    run a demo from FLORA demos directory'),
	flora_stdmsg_line('o flEquality {none|basic|flogic}'),
	flora_stdmsg_line('    set support for the equality predicate in the shell module `main'' to'),
	flora_stdmsg_line('    none, standard first-order, or F-logic style'),
	flora_stdmsg_line('o flAbolish Functor/Arity [, Functor/Arity]* [in Module]'),
	flora_stdmsg_line('    abolish predicate Functor/Arity in Module (`main'' is the default)'),
	flora_stdmsg_line('o abolish_all_tables'),
	flora_stdmsg_line('    flush all tabled data'),
	flora_stdmsg_line('o flProlog Functor/Arity'),
	flora_stdmsg_line('    define Functor/Arity as Prolog predicate in shell mode'),
	flora_stdmsg_line('o flPredicate Functor/Arity'),
	flora_stdmsg_line('    define Functor/Arity as non-HiLog FLORA predicate in shell mode'),
	flora_stdmsg_line('o flSign Functor({oid|form},...)'),
	flora_stdmsg_line('    define predicate signature in shell mode'),
	flora_stdmsg_line('o op(Precedence,Associativity,Operator)'),
	flora_stdmsg_line('    define an operator in shell mode'),
	flora_stdmsg_line('o reset(flProlog|flPredicate|flSign|op)'),
	flora_stdmsg_line('    clear all dynamic flProlog/flPredicate/flSign/op declarations'),
	flora_stdmsg_line('    in the FLORA shell'),
	flora_stdmsg_line('o all'),
	flora_stdmsg_line('    show all solutions (default)'),
	flora_stdmsg_line('o one'),
	flora_stdmsg_line('    show solutions one by one'),
	flora_stdmsg_line('o maxerr(all|N)'),
	flora_stdmsg_line('    set/show the maximum number of errors FLORA reports'),
	flora_stdmsg_line('o flTrace/flrNoTrace'),
	flora_stdmsg_line('    turn on/off FLORA trace'),
	flora_stdmsg_line('o end'),
	flora_stdmsg_line('    say Ciao to FLORA, stay in XSB'),
	flora_stdmsg_line('o halt'),
	flora_stdmsg_line('    quit both FLORA and XSB').


/*********************************************************************/
reset(X) :-
	var(X),
	!,
	flora_error_line("invalid argument to reset"),
	fail.

reset(FL_PROLOG) :- !, flora_shreset_prolog.
reset(FL_PREDICATE) :- !, flora_shreset_nohilog.
reset(FL_SIGNATURE) :- !, flora_shreset_signature.
reset(FL_OP) :- !, flora_shreset_operator.

reset(_) :-
	flora_error_line("invalid argument to reset"),
	!,
	fail.


/*********************************************************************/
all :-
	( flora_switch(all) ->
	    true
	;
	  assert(flora_switch(all))
	).

one :-
	retractall(flora_switch(all)).


/*********************************************************************/
end :-
	remove_xsb_hook(xsb_undefined_predicate_hook(flora_undefined_predicate_hook(_))),
	unstrap_flora,
	flora_stdmsg_line("\n\nCiao!"),
	pop_abort_cutpoint,
	abort.


/*********************************************************************/
flTrace :-
	( flora_debugger_data_loaded ->
	    true
	;
	  consult(flrdebugger)
	),
	flora_trace.

flNoTrace :-
	( flora_debugger_data_loaded ->
	    true
	;
	  consult(flrdebugger)
	),
	flora_notrace.


/*********************************************************************/
flChatter :- assert(flora_switch(chatter)).
flNoChatter :- retractall(flora_switch(chatter)).


/*********************************************************************/
rundemo(File) :-
	flora_check_filename(File),
	package_configuration(dir(flora),FloraDir),
	slash(Slash),
	%% Add the demo directory to library_directory
	fmt_write_string(DemoDir,'%s%sdemos',args(FloraDir,Slash)),
	( library_directory(DemoDir) ->
	    true
	;
	  assert(library_directory(DemoDir))
	),
	cwd(CurrWorkingDir),
	cd(DemoDir),
	flora_load_module_internal(File),
	cd(CurrWorkingDir),
	retractall(library_directory(DemoDir)).
