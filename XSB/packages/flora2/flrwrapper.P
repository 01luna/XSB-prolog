/* File:      flrwrapper.P
**
** Author(s): Guizhen Yang 
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


/*****************************************************************************
  flora_setup_flogic_bswrapper(+WS)
  sets up the wrapper predicate names for F-logic facts in the module named WS.

  Note: An F-logic wrapper predicate name is encoded as follows:
        'FLORA_PREFIX''workspace''base_wrapper'.
*****************************************************************************/
flora_setup_flogic_bswrapper(WS) :-
	flora_flogic_workspace(WS),
	!.

flora_setup_flogic_bswrapper(WS) :-
	retractall(flora_flogic_workspace(_WS)),
	assert(flora_flogic_workspace(WS)),
	fmt_write_string(WSBisa,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_ISA)),
	fmt_write_string(WSBsub,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_SUB)),
	fmt_write_string(WSBmeth,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_METH)),
	fmt_write_string(WSBimeth,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IMETH)),
	fmt_write_string(WSBtran,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_TRAN)),
	fmt_write_string(WSBfd,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_FD)),
	fmt_write_string(WSBifd,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IFD)),
	fmt_write_string(WSBfdsig,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_FDSIG)),
	fmt_write_string(WSBifdsig,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IFDSIG)),
	fmt_write_string(WSBmvd,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_MVD)),
	fmt_write_string(WSBimvd,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IMVD)),
	fmt_write_string(WSBmvdsig,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_MVDSIG)),
	fmt_write_string(WSBimvdsig,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IMVDSIG)),
	fmt_write_string(WSBexists,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_EXISTS)),
	fmt_write_string(WSBmvddef,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_MVDDEF)),
	fmt_write_string(WSBimvddef,"%s'%s'%s%s",args(FLORA_PREFIX,WS,FLFACTPREFIX,WRAP_IMVDDEF)),
	retractall(flora_flogic_bswrapper(_,_)),
	assert(flora_flogic_bswrapper(WRAP_ISA,WSBisa)),
	assert(flora_flogic_bswrapper(WRAP_SUB,WSBsub)),
	assert(flora_flogic_bswrapper(WRAP_METH,WSBmeth)),
	assert(flora_flogic_bswrapper(WRAP_IMETH,WSBimeth)),
	assert(flora_flogic_bswrapper(WRAP_TRAN,WSBtran)),
	assert(flora_flogic_bswrapper(WRAP_FD,WSBfd)),
	assert(flora_flogic_bswrapper(WRAP_IFD,WSBifd)),
	assert(flora_flogic_bswrapper(WRAP_FDSIG,WSBfdsig)),
	assert(flora_flogic_bswrapper(WRAP_IFDSIG,WSBifdsig)),
	assert(flora_flogic_bswrapper(WRAP_MVD,WSBmvd)),
	assert(flora_flogic_bswrapper(WRAP_IMVD,WSBimvd)),
	assert(flora_flogic_bswrapper(WRAP_MVDSIG,WSBmvdsig)),
	assert(flora_flogic_bswrapper(WRAP_IMVDSIG,WSBimvdsig)),
	assert(flora_flogic_bswrapper(WRAP_EXISTS,WSBexists)),
	assert(flora_flogic_bswrapper(WRAP_MVDDEF,WSBmvddef)),
	assert(flora_flogic_bswrapper(WRAP_IMVDDEF,WSBimvddef)).


/*****************************************************************************
  flora_flogic_predicate(+Funct,-Workspace,-WrapPrefix,-Base)

  Note: An F-logic wrapper predicate name (such as fd, mvd, isa, etc.)
  is encoded as follows:
        'FLORA_PREFIX''workspace''wrapper', where wrapper is prefix+base.

  WrapPrefix is the prefix of the wrapper (e.g., base_, derived_, etc.)
  Base specifies the type of the wrapped, e.g., fd, mvd, imvd, etc.
*****************************************************************************/
flora_flogic_predicate(Funct,Workspace,WrapPrefix,Base) :-
	%% Check if the functor begins with FLORA_PREFIX followed by an '.
	str_sub(FLORA_PREFIX,Funct,1),
	str_sub('''',Funct,FLORA_PREFIX_LEN_PLUS1),
	!,
	%% Locate F-logic wrapper predicate position and extract the wrapper.
	atom_codes(Funct,FunctList),
	reverse(FunctList,RevFunctList),
	atom_codes(RevFunct,RevFunctList),
	str_sub('''',RevFunct,N),
	str_length(Funct,FLen),
	eval(FLen-N+1,S),
	substring(Funct,S,FLen,Wrapper),
	!,
	%% Extract the workspace name.
	eval(S-1,T),
	substring(Funct,FLORA_PREFIX_LEN_PLUS1,T,Workspace),
	%% Separate the prefix from the base wrapper.
	str_length(Wrapper,WLen),
	( str_sub(FLFACTPREFIX,Wrapper,1) ->
	    WrapPrefix=FLFACTPREFIX,
	    substring(Wrapper,FLFACTPREFIX_LEN,WLen,Base)

	; str_sub(FLHEADPREFIX,Wrapper,1) ->
	    WrapPrefix=FLHEADPREFIX,
	    substring(Wrapper,FLHEADPREFIX_LEN,WLen,Base)

	; str_sub(FLBODYPREFIX,Wrapper,1) ->
	    WrapPrefix=FLBODYPREFIX,
	    substring(Wrapper,FLBODYPREFIX_LEN,WLen,Base)

	; str_sub(FLTRAILERPREFIX,Wrapper,1) ->
	    WrapPrefix=FLTRAILERPREFIX,
	    substring(Wrapper,FLTRAILERPREFIX_LEN,WLen,Base)
	),
	!,
	is_flogic_base(Base).


/*****************************************************************************
  is_flogic_base(+Base)
*****************************************************************************/
is_flogic_base(WRAP_ISA)        :- !.
is_flogic_base(WRAP_SUB)        :- !.
is_flogic_base(WRAP_FD)         :- !.
is_flogic_base(WRAP_MVD)        :- !.
is_flogic_base(WRAP_IFD)        :- !.
is_flogic_base(WRAP_IMVD)       :- !.
is_flogic_base(WRAP_METH)       :- !.
is_flogic_base(WRAP_IMETH)      :- !.
is_flogic_base(WRAP_EXISTS)     :- !.
is_flogic_base(WRAP_MVDDEF)     :- !.
is_flogic_base(WRAP_IMVDDEF)    :- !.
is_flogic_base(WRAP_TRAN)       :- !.
is_flogic_base(WRAP_FDSIG)      :- !.
is_flogic_base(WRAP_IFDSIG)     :- !.
is_flogic_base(WRAP_MVDSIG)     :- !.
is_flogic_base(WRAP_IMVDSIG)    :- !.
is_flogic_base(WRAP_MVDINC)     :- !.
is_flogic_base(WRAP_IMVDINC)    :- !.
is_flogic_base(WRAP_MVDTOLIST)  :- !.
is_flogic_base(WRAP_IMVDTOLIST) :- !.
is_flogic_base(WRAP_FDDEF)      :- !.
is_flogic_base(WRAP_IFDDEF)     :- !.
is_flogic_base(WRAP_OBJEQL)     :- !.


/*****************************************************************************
  flora_hilog_predicate(+Funct,-Workspace)

  Note: A HiLog wrapper predicate name is encoded as follows:
        'FLORA_PREFIX''workspace''WRAP_HILOG'.
*****************************************************************************/
flora_hilog_predicate(Funct,Workspace) :-
	%% Check if the functor begins with FLORA_PREFIX followed by an '.
	str_sub(FLORA_PREFIX,Funct,1),
	str_sub('''',Funct,FLORA_PREFIX_LEN_PLUS1),
	!,
	%% Locate HiLog wrapper predicate position.
	atom_codes(Funct,FunctList),
	reverse(FunctList,RevFunctList),
	atom_codes(RevFunct,RevFunctList),
	str_sub('''',RevFunct,N),
	str_length(Funct,Len),
	eval(Len-N+1,W),
	!,
	%% Check if it is the HiLog wrapper.
	substring(Funct,W,Len,WrapHiLog),
	WrapHiLog=WRAP_HILOG,
	%% Extract the workspace name.
	eval(W-1,S),
	substring(Funct,FLORA_PREFIX_LEN_PLUS1,S,Workspace),
	!.


/*****************************************************************************
  flora_firstorder_predicate(+Funct,-Predicate,-Workspace)

  Note: (1) A first order-HiLog predicate name is encoded as follows:
            'FLORA_PREFIX''workspace''predicate'.

        (2) This procedure will not function correctly if workspace
            contains the symbol '.
*****************************************************************************/
flora_firstorder_predicate(Funct,Predicate,Workspace) :-
	%% Check if the functor begins with FLORA_PREFIX followed by an '.
	str_sub(FLORA_PREFIX,Funct,1),
	str_sub('''',Funct,FLORA_PREFIX_LEN_PLUS1),
	!,
	%% Locate the end of workspace name.
	str_length(Funct,Len),
	substring(Funct,FLORA_PREFIX_LEN_PLUS1,Len,RestFunct),
	str_sub('''',RestFunct,N),
	!,
	%% Extract the workspace name.
	eval(N-1,M),
	substring(RestFunct,0,M,Workspace),
	%% Extract the predicate name.
	str_length(RestFunct,RestLen),
	substring(RestFunct,N,RestLen,Predicate),
	!.


/*****************************************************************************
  Take a predicate name, args, and workspace and return a Florified call
  (dith workspace attached)
  flora_wspredicate(+Functor,+Args,+Workspace,-Predicate)
*****************************************************************************/
flora_wspredicate(Functor,Args,WS,Predicate) :-
	flora_wssymbol(Functor,WS,PF),
	Predicate =.. [PF|Args].

/* Take a symbol and Florify it:
      flora_wssymbol(+Symbol,+WS,-FlorifiedSymbol)
*/
flora_wssymbol(Symbol,WS,FlorifiedSymbol) :-
	( flora_check_workspace(WS)
	-> fmt_write_string(FlorifiedSymbol, "%s'%s'%s",
			    args(FLORA_PREFIX,WS,Symbol))
	; abort
	).

/*
    Returns Florified HiLog Wrapper (with workspace attached)
    flora_wshilog(+WS, -HiLogPredSym)
*/
flora_wshilog(WS,HiLogPredSym) :-
	flora_wssymbol(WRAP_HILOG,WS,HiLogPredSym).


/*****************************************************************************
  flora_is_general_predicate(+Funct,-Workspace)
*****************************************************************************/
flora_is_general_predicate(Funct,WS) :-
	( flora_flogic_predicate(Funct,WS,_Pos,_Base)
	; flora_hilog_predicate(Funct,WS)
	; flora_firstorder_predicate(Funct,_P,WS)
	),
	!.


/*****************************************************************************
  flora_storage_name(+Workspace,-Name)
*****************************************************************************/
flora_storage_name(WS,Name) :-
	fmt_write_string(Name,"%s'%s",args(FLORA_STORAGE_PREFIX,WS)).


/*****************************************************************************
  flora_classify_functor(+Functor, -Type, -Workspace, -Basename, -ArgList)
  Type: hilog, florapred, prolog, flogic
*****************************************************************************/
flora_classify_call(Call,Type,Basename,ArgList,Workspace) :-
	Call =.. [Funct|PrelimArgList],
	!,
	(flora_flogic_predicate(Funct,Workspace,_Pos,Basename)
	-> Type = flogic, ArgList = PrelimArgList
	; flora_hilog_predicate(Funct,Workspace)
	-> Type = hilog, PrelimArgList = [Basename | ArgList]
	; flora_firstorder_predicate(Funct,Basename,Workspace)
	-> Type = florapred, ArgList = PrelimArgList
	; Type = prolog, Basename = Funct, ArgList = PrelimArgList
	  %% Workspace stays uninstantiated
	),
	!.
