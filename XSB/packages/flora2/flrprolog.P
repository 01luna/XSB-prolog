/* File:      flrprolog.P -- Flora Prolog definitions
**
** Author(s): Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2000
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
**
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
**
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


/****************************************************************************
  Flora built-in operators
****************************************************************************/
flora_prlg(FL_IMPLYOP,2).
flora_prlg(FL_IMPLYOP,1).
flora_prlg(FL_QUERYOP,1).

flora_prlg(FL_UNIVEQ,2).
flora_prlg(FL_UNIVNOTEQ,2).
flora_prlg(FL_EQ,2).
flora_prlg(FL_NOTEQ,2).
flora_prlg(FL_ORDERLT,2).
flora_prlg(FL_ORDEREQLT,2).
flora_prlg(FL_ORDERGT,2).
flora_prlg(FL_ORDEREQGT,2).
flora_prlg(FL_METAUNIV,2).
flora_prlg(FL_ASSIGN,2).
flora_prlg(FL_IS,2).
flora_prlg(FL_MATHEQ,2).
flora_prlg(FL_MATHNOTEQ,2).
flora_prlg(FL_LT,2).
flora_prlg(FL_EQLT,2).
flora_prlg(FL_GT,2).
flora_prlg(FL_EQGT,2).
flora_prlg(FL_RIGHTTO,2).
flora_prlg(FL_LEFTTO,2).

flora_prlg(FL_PLUS,2).
flora_prlg(FL_MINUS,2).
flora_prlg(FL_SYMOR,2).

flora_prlg(FL_STAR,2).
flora_prlg(FL_SLASH,2).
flora_prlg(FL_MOD,2).
flora_prlg(FL_SYMAND,2).

flora_prlg(FL_PLUS,1).
flora_prlg(FL_MINUS,1).


/****************************************************************************
  XSB predicates
****************************************************************************/
flora_prlg(findall,3).
flora_prlg(compile,1).
flora_prlg(fail,0).
flora_prlg(true,0).
flora_prlg(abolish_all_tables,0).


/****************************************************************************
  FLORA shell predicates
****************************************************************************/
flora_prlg(flcompile,1).
flora_prlg(flcompile,2).
flora_prlg(flload,1).
flora_prlg(flload,2).
flora_prlg(flconsult,1).
flora_prlg(flcompinc,1).
flora_prlg(help,0).
flora_prlg(all,0).
flora_prlg(one,0).
flora_prlg(end,0).
flora_prlg(halt,0).
flora_prlg(maxerr,1).
flora_prlg(rundemo,1).
flora_prlg(fltrace,0).
flora_prlg(flnotrace,0).
flora_prlg(chatter,0).
flora_prlg(nochatter,0).


/****************************************************************************
  definition
****************************************************************************/
flora_prlgdef(X,Y) :-
	flora_prlg(X,Y).

flora_prlgdef(X,Y) :-
	( conget(flora_shell_mode,1) ->
	    flora_shprlg(X,Y)
	;
	  flora_dynprlg(X,Y)
	).


/****************************************************************************
  flora_reset_prolog/0
****************************************************************************/
flora_reset_prolog :- retractall(flora_dynprlg(_,_)).


/****************************************************************************
  flora_define_prolog(+Op,+Arity)
****************************************************************************/
flora_define_prolog(Op,Arity) :-
	(var(Op); var(Arity)),
	!,
	assert(flora_dynprlg(Op,Arity)).

flora_define_prolog(Op,Arity) :-
	( flora_prlg(Op,Arity) ->
	    true
	;
	  assert(flora_dynprlg(Op,Arity))
	).


/****************************************************************************
  flora_shreset_prolog/0
****************************************************************************/
flora_shreset_prolog :- retractall(flora_shprlg(_,_)).


/****************************************************************************
  flora_shdefine_prolog(+Op,+Arity)
****************************************************************************/
flora_shdefine_prolog(Op,Arity) :-
	(var(Op); var(Arity)),
	!,
	assert(flora_shprlg(Op,Arity)).

flora_shdefine_prolog(Op,Arity) :-
	( flora_prlg(Op,Arity) ->
	    true
	;
	  assert(flora_shprlg(Op,Arity))
	).
