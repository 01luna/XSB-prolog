/* File:      flrshdirect.P
**
** Author(s): Guizhen Yang 
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_exceptions.flh"



:- import flora_shdefine_hilogtable/3 from flrhilogtable.

:- import flora_shdefine_operator/3 from flroperator.

:- import flora_shdefine_arguments/3 from flrarguments.

:- import flora_storage_check_module_name/1 from flrstorage.

:- import flora_module_registry/1 from flrregistry.

:- import flora_error_line/1, flora_error_line/2 from flrprint.

:- import
	flora_dyna_hilog_user_module_predicate_symbol/2,
	flora_dynz_hilog_user_module_predicate_symbol/2
   from flrwrapper.

/*****************************************************************************
  fllibshdirect

  Processes directives in the flora shell (like table, op, etc.)
*****************************************************************************/
%%fllibshdirect(FL_PROLOG,Funct,Arity) :-
%%	flora_shdefine_prolog(Funct,Arity).

fllibshdirect(FL_TABLE,Module,Funct,Arity) :-
	flora_shdefine_hilogtable(Module,Funct,Arity).

fllibshdirect(FL_OP,Preced,Assoc,Op) :-
	flora_shdefine_operator(Preced,Assoc,Op).

fllibshdirect(FL_ARGUMENTS,Funct,Arity,Args) :-
	flora_shdefine_arguments(Funct,Arity,Args).

fllibshdirect(FL_INDEX,Module,Arity,Position) :-
	flora_storage_check_module_name(Module),
	( flora_module_registry(Module) ->
	    true
	;
	    flora_error_line("Module `~w' does not exist",[Module]),
	    throw(FLORA_ABORT)
	),
	( integer(Arity), integer(Position), Position>0, Arity >= Position ->
	    A is Arity+1,
            P is Position+1,
            flora_dyna_hilog_user_module_predicate_symbol(Module,NewPA),
            flora_dynz_hilog_user_module_predicate_symbol(Module,NewPZ),
            call(index(NewPA/A,P)),
            call(index(NewPZ/A,P))
	;
	    flora_error_line("Invalid argument for the index instruction"),
	    throw(FLORA_ABORT)
	).


