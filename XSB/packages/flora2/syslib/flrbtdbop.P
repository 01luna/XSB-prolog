/* File:      flrbtdbop.P
**
** Author(s): Guizhen Yang 
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_exceptions.flh"


:- import append/3 from basics.

:- import
	flora_error_line/1,
	flora_error_heading/0,
	flora_stderr_string/1,
	flora_stderr_nl/0
   from flrprint.

:- import flora_display_error/1 from flrdisplay.

:- import
	flora_module_predicate/4,
	flora_fdb_storage_name/2,
	flora_check_module_name/1,
	flora_decode_module_name/2,
	flora_is_flogic_wrapper/3,
	flora_setup_flogic_fact_wrapper/1,
	flora_flogic_fact_wrapper/2
   from flrwrapper.

:- import flora_list2conjunct/2 from flrutils.

:- import
	flora_storage_check_module_name/1,
	flora_storage_check_deletepredicate/2,
	flora_storage_convertlist/3,
	flora_storage_is_negation_symbol/1
   from flrstorage.

/*********************************************************************
  This file is for the following backtrackable FLORA database operations:
  btinsert, btinsertall, btdelete, btdeleteall, bterase, bteraseall.
*********************************************************************/


/*****************************************************************************
  fllibbtinsert(+List)
*****************************************************************************/
FLLIBBTINSERT(List) :- FLLIBBTINSERT(List,true).


/*****************************************************************************
  fllibbtinsert(+List,+Condition)
*****************************************************************************/
FLLIBBTINSERT(List,Condition) :-
	call(Condition),
	flora_storage_insertfacts_bt(List).


/*****************************************************************************
  flora_storage_insertfacts_bt(+List)
*****************************************************************************/
flora_storage_insertfacts_bt([]) :- !.

flora_storage_insertfacts_bt([P|_T]) :-
	var(P),
	!,
	flora_error_line('uninstantiated argument of backtrackable insert operation'),
	throw(FLORA_ABORT).

flora_storage_insertfacts_bt([FLSYSDBUPDATE(P,StorageName)|T]) :-
	!,
	FLORA_DB_INSERT_BT(StorageName,P,_Inserted),
	flora_storage_insertfacts_bt(T).

flora_storage_insertfacts_bt([FLLIBMODLIT(F,Args,ModuleName)|T]) :-
	!,
	flora_storage_check_module_name(ModuleName),
	flora_module_predicate(F,Args,ModuleName,P),
	flora_fdb_storage_name(ModuleName,StorageName),
	FLORA_DB_INSERT_BT(StorageName,P,_Inserted),
	flora_storage_insertfacts_bt(T).

flora_storage_insertfacts_bt([FLLIBMODOBJ(F,Args,ModuleName,O)|T]) :-
	!,
	( flora_check_module_name(ModuleName) ->
	    flora_module_predicate(F,Args,ModuleName,O),
	    flora_storage_insertfacts_bt(T)
	;
	  throw(FLORA_ABORT)
	).

flora_storage_insertfacts_bt([','(C1,C2)|T]) :-
	!,
	%% Break up conjunction, although insertion of conjunction is not
	%% allowed in XSB.
	flora_storage_insertfacts_bt([C1,C2|T]).

flora_storage_insertfacts_bt([P|T]) :-
	%% This is a meta programming feature.
	functor(P,F,N),
	( flora_decode_module_name(F,ModuleName) ->
	    flora_storage_check_module_name(ModuleName),
	    flora_fdb_storage_name(ModuleName,StorageName),
	    FLORA_DB_INSERT_BT(StorageName,P,_Inserted),
	    flora_storage_insertfacts_bt(T)

	; N == 2, F == ';' ->
	    flora_error_line('Insertion of disjunction is not allowed!'),
	    throw(FLORA_ABORT)

	; N == 1, flora_storage_is_negation_symbol(F) ->
	    flora_error_line('Insertion of negation is not allowed!'),
	    throw(FLORA_ABORT)
	;
	  flora_error_heading,
	  flora_stderr_string('Insertion of '),
	  ( F == WRAP_HILOG ->
	      flora_stderr_string('HiLog term ')
	  ;
	    flora_stderr_string('Prolog term ')
	  ),
	  flora_display_error(P),
	  flora_stderr_string(' is not allowed!'),
	  flora_stderr_nl,
          throw(FLORA_ABORT)
	).


/*****************************************************************************
  fllibbtinsertall(+List)
*****************************************************************************/
FLLIBBTINSERTALL(List) :- FLLIBBTINSERT(List).


/*****************************************************************************
  fllibbtinsertall(+List,+Condition)
*****************************************************************************/
FLLIBBTINSERTALL(List,Condition) :-
	findall(List,Condition,FsList),
	!,
	flora_btinsertall_facts(FsList).


/*****************************************************************************
  flora_btinsertall_facts(+FactsList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_btinsertall_facts([]) :- !.

flora_btinsertall_facts([Fs|FL]) :-
	flora_storage_insertfacts_bt(Fs),
	flora_btinsertall_facts(FL).


/*****************************************************************************
  fllibbtdelete(+List)
*****************************************************************************/
FLLIBBTDELETE(List) :- FLLIBBTDELETE(List,true).


/*****************************************************************************
  fllibbtdelete(+List,+Condition)

  The semantics is such that all the literals in "List" must be base facts
  in the storage to be deleted.
*****************************************************************************/
FLLIBBTDELETE([P],true) :-
	var(P),
	!,
	flora_error_line('uninstantiated argument of backtrackable delete operation'),
	throw(FLORA_ABORT).

FLLIBBTDELETE([FLSYSDBUPDATE(P,StorageName)],true) :-
	!,
	FLORA_DB_FIND(StorageName,P),
	FLORA_DB_DELETE_BT(StorageName,P,_Deleted).

FLLIBBTDELETE([FLLIBMODLIT(F,Args,ModuleName)],true) :-
	!,
	flora_storage_check_module_name(ModuleName),
	flora_module_predicate(F,Args,ModuleName,P),
	flora_fdb_storage_name(ModuleName,StorageName),
	!,
	FLORA_DB_FIND(StorageName,P),
	FLORA_DB_DELETE_BT(StorageName,P,_Deleted).

FLLIBBTDELETE(List,Condition) :-
	flora_storage_convertlist(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	!,
	call(Goal),
	flora_storage_deletelist_bt(FactList).


/*****************************************************************************
  flora_storage_deletelist_bt(+List)
*****************************************************************************/
flora_storage_deletelist_bt([]) :- !.

flora_storage_deletelist_bt([FLSYSDBUPDATE(P,StorageName)|L]) :-
	!,
	FLORA_DB_DELETE_BT(StorageName,P,_Deleted),
	flora_storage_deletelist_bt(L).

flora_storage_deletelist_bt([H|L]) :-
	!,
	flora_storage_deletelist_bt(H),
	flora_storage_deletelist_bt(L).


/*****************************************************************************
  flora_storage_deleteall_bt(+Predicate,+StorageName)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_storage_deleteall_bt(P,StorageName) :-
	findall(FLSYSDBUPDATE(P,StorageName),FLORA_DB_FIND(StorageName,P),L),
	!,
	flora_storage_deletelist_bt(L).


/*****************************************************************************
  fllibbtdeleteall(+List)
*****************************************************************************/
FLLIBBTDELETEALL(List) :- FLLIBBTDELETEALL(List,true).


/*****************************************************************************
  fllibbtdeleteall(+List,+Condition)

  The semantics is such that all the literals in "List" must be base facts
  in the storage to be deleted. This call always succeeds.
*****************************************************************************/
FLLIBBTDELETEALL([P],true) :-
	var(P),
	!,
	flora_error_line('uninstantiated argument of backtrackable delete operation'),
	throw(FLORA_ABORT).

FLLIBBTDELETEALL([FLSYSDBUPDATE(P,StorageName)],true) :-
	!,
	flora_storage_deleteall_bt(P,StorageName).

FLLIBBTDELETEALL([FLLIBMODLIT(F,Args,ModuleName)],true) :-
	!,
	flora_storage_check_module_name(ModuleName),
	flora_module_predicate(F,Args,ModuleName,P),
	flora_fdb_storage_name(ModuleName,StorageName),
	!,
	flora_storage_deleteall_bt(P,StorageName).

FLLIBBTDELETEALL(List,Condition) :-
	flora_storage_convertlist(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	findall(FactList,Goal,FsList),
	!,
	flora_btdeleteall_facts(FsList).


/*****************************************************************************
  flora_btdeleteall_facts(+FactList,-DeletedFactList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_btdeleteall_facts([]) :- !.

flora_btdeleteall_facts([Fs|FL]) :-
	flora_storage_deletelist_bt(Fs),
	flora_btdeleteall_facts(FL).


/*****************************************************************************
  fllibbterase(+List)
*****************************************************************************/
FLLIBBTERASE(List) :- FLLIBBTERASE(List,true).


/*****************************************************************************
  fllibbterase(+List,+Condition)
*****************************************************************************/
FLLIBBTERASE(List,Condition) :-
	flora_storage_convertlist(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	call(Goal),
	flora_storage_deletelist_bt(FactList),
	flora_bterase_facts(FactList).


/*****************************************************************************
  flora_bterase_facts(+List)
*****************************************************************************/
flora_bterase_facts([]) :- !.

flora_bterase_facts([FLSYSDBUPDATE(P,StorageName)|Fs]) :-
	!,
	flora_bterase_one_fact(P,StorageName),
	flora_bterase_facts(Fs).

flora_bterase_facts([H|Fs]) :-
	!,
	flora_bterase_facts(H),
	flora_bterase_facts(Fs).


/*****************************************************************************
  flora_bterase_one_fact(+Fact,+StorageName)

  Note: For an F-logic fact this predicate continues to trace links and
        delete other F-logic facts. It always succeeds.
*****************************************************************************/
flora_bterase_one_fact(Fact,StorageName) :-
	Fact =.. [Funct|Args],
	( flora_is_flogic_wrapper(Funct,ModuleName,Base) ->
	    ( Base == WRAP_ISA     -> Args=[O,_C]
	    ; Base == WRAP_SUB     -> Args=[O,_C]
	    ; Base == WRAP_FD      -> Args=[_S,_A,O]
	    ; Base == WRAP_MVD     -> Args=[_S,_A,O]
	    ; Base == WRAP_IFD     -> Args=[_S,_IA,O]
	    ; Base == WRAP_IMVD    -> Args=[_S,_IA,O]
	    ; Base == WRAP_METH    -> Args=[O,_M]
	    ; Base == WRAP_IMETH   -> Args=[O,_IM]
	    ; Base == WRAP_EXISTS  -> Args=[O]
	    ; Base == WRAP_MVDDEF  -> Args=[O,_A]
	    ; Base == WRAP_IMVDDEF -> Args=[O,_IA]
	    ; Base == WRAP_TRAN    -> Args=[O,_T]
	    ; Base == WRAP_FDSIG   -> Args=[_S,_AS,O]
	    ; Base == WRAP_IFDSIG  -> Args=[_S,_IAS,O]
	    ; Base == WRAP_MVDSIG  -> Args=[_S,_AS,O]
	    ; Base == WRAP_IMVDSIG -> Args=[_S,_IAS,O]
	    )
	;
	  true
        ),
	!,
	( var(O) ->
	    true
	;
	  flora_setup_flogic_fact_wrapper(ModuleName),
	  flora_bterase_objects([O],StorageName)
	).


/*****************************************************************************
  flora_bterase_objects(+ObjectList,+StorageName)
*****************************************************************************/
flora_bterase_objects([],_StorageName) :- !.

flora_bterase_objects([O|OList],StorageName) :-
	!,
	flora_flogic_fact_wrapper(WRAP_ISA,WSBisa),
	flora_flogic_fact_wrapper(WRAP_SUB,WSBsub),
	flora_flogic_fact_wrapper(WRAP_METH,WSBmeth),
	flora_flogic_fact_wrapper(WRAP_IMETH,WSBimeth),
	flora_flogic_fact_wrapper(WRAP_TRAN,WSBtran),
	flora_flogic_fact_wrapper(WRAP_FD,WSBfd),
	flora_flogic_fact_wrapper(WRAP_IFD,WSBifd),
	flora_flogic_fact_wrapper(WRAP_FDSIG,WSBfdsig),
	flora_flogic_fact_wrapper(WRAP_IFDSIG,WSBifdsig),
	flora_flogic_fact_wrapper(WRAP_MVD,WSBmvd),
	flora_flogic_fact_wrapper(WRAP_IMVD,WSBimvd),
	flora_flogic_fact_wrapper(WRAP_MVDSIG,WSBmvdsig),
	flora_flogic_fact_wrapper(WRAP_IMVDSIG,WSBimvdsig),
	flora_flogic_fact_wrapper(WRAP_EXISTS,WSBexists),
	flora_flogic_fact_wrapper(WRAP_MVDDEF,WSBmvddef),
	flora_flogic_fact_wrapper(WRAP_IMVDDEF,WSBimvddef),
	Wfd =.. [WSBfd,O,_,X],
	Wifd =.. [WSBifd,O,_,X],
	Wfdsig =.. [WSBfdsig,O,_,X],
	Wifdsig =.. [WSBifdsig,O,_,X],
	Wmvd =.. [WSBmvd,O,_,X],
	Wimvd =.. [WSBimvd,O,_,X],
	Wmvdsig =.. [WSBmvdsig,O,_,X],
	Wimvdsig =.. [WSBimvdsig,O,_,X],
	findall(X,( FLORA_DB_FIND(StorageName,Wfd)
                  ; FLORA_DB_FIND(StorageName,Wifd)
	          ; FLORA_DB_FIND(StorageName,Wfdsig)
                  ; FLORA_DB_FIND(StorageName,Wifdsig)
                  ; FLORA_DB_FIND(StorageName,Wmvd)
                  ; FLORA_DB_FIND(StorageName,Wimvd)
                  ; FLORA_DB_FIND(StorageName,Wmvdsig)
                  ; FLORA_DB_FIND(StorageName,Wimvdsig)
	          ),
                AddedOList
               ),
	append(OList,AddedOList,NewOList),
	sort(NewOList,NextOList),
	Pisa =.. [WSBisa,O,_],
	Psub =.. [WSBsub,O,_],
	Pmeth =.. [WSBmeth,O,_],
	Pimeth =.. [WSBimeth,O,_],
	Ptran =.. [WSBtran,O,_],
	Pfd =.. [WSBfd,O,_,_],
	Pifd =.. [WSBifd,O,_,_],
	Pfdsig =.. [WSBfdsig,O,_,_],
	Pifdsig =.. [WSBifdsig,O,_,_],
	Pmvd =.. [WSBmvd,O,_,_],
	Pimvd =.. [WSBimvd,O,_,_],
	Pmvdsig =.. [WSBmvdsig,O,_,_],
	Pimvdsig =.. [WSBimvdsig,O,_,_],
	Pexists =.. [WSBexists,O],
	Pmvddef =.. [WSBmvddef,O,_],
	Pimvddef =.. [WSBimvddef,O,_],
	!,
	flora_storage_deleteall_bt(Pisa,StorageName),
	flora_storage_deleteall_bt(Psub,StorageName),
	flora_storage_deleteall_bt(Pmeth,StorageName),
	flora_storage_deleteall_bt(Pimeth,StorageName),
	flora_storage_deleteall_bt(Ptran,StorageName),
	flora_storage_deleteall_bt(Pfd,StorageName),
	flora_storage_deleteall_bt(Pifd,StorageName),
	flora_storage_deleteall_bt(Pfdsig,StorageName),
	flora_storage_deleteall_bt(Pifdsig,StorageName),
	flora_storage_deleteall_bt(Pmvd,StorageName),
	flora_storage_deleteall_bt(Pimvd,StorageName),
	flora_storage_deleteall_bt(Pmvdsig,StorageName),
	flora_storage_deleteall_bt(Pimvdsig,StorageName),
	flora_storage_deleteall_bt(Pexists,StorageName),
	flora_storage_deleteall_bt(Pmvddef,StorageName),
	flora_storage_deleteall_bt(Pimvddef,StorageName),
	flora_bterase_objects(NextOList,StorageName).


/*****************************************************************************
  fllibbteraseall(+List)
*****************************************************************************/
FLLIBBTERASEALL(List) :- FLLIBBTERASEALL(List,true).


/*****************************************************************************
  fllibbteraseall(+List,+Condition)
*****************************************************************************/
FLLIBBTERASEALL(List,Condition) :-
	flora_storage_convertlist(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	findall(FactList,Goal,FsList),
	!,
	flora_btdeleteall_facts(FsList),
	flora_bteraseall_facts(FsList).


/*****************************************************************************
  flora_bteraseall_facts(+FactList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_bteraseall_facts([]) :- !.

flora_bteraseall_facts([Fs|FL]) :-
	!,
	flora_bterase_facts(Fs),
	flora_bteraseall_facts(FL).
