/* File:      flrdynmod.P
**
** Author(s): Guizhen Yang 
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_exceptions.flh"


:- import append/3 from basics.

:- import
	flora_check_module_name/1,
	flora_module_predicate/4,
	flora_decode_predicate/7,
	is_flora_callable_literal/1
   from flrwrapper.

:- import flora_increment_counter/4 from flrporting.

:- import convert_to_body_literal/2 from flrcanon.

:- import
	flora_temp_protect_call/2,
	flora_temp_unprotect_call/1
    from flrundefined.

:- import
	flora_in_debug_mode/1,
	flora_debug_module_registry/1
   from flrregistry.

:- import flora_abort/1 from flrutils.

:- import
	flora_add_last/3,
	flora_bind_last/2
   from flrtrim.

:- import flora_add_undef_export_call/2,
	  flora_remove_undef_export_call/1
   from flrexport.

/*********************************************************************
  This file is for the following dynamic module references:
  FLLIBMODLIT and FLLIBMODOBJ.

  FLLIBMODLIT is used when the compiler encounters literal@Variable
  where literal is F-logic or HiLog
  FLLIBMODOBJ is used when compiler finds term@Variable inside a predicate,
  e.g., f(g@V)
*********************************************************************/


/*********************************************************************
  FLLIBMODLIT(+Functor,+Args,+ModuleName,+CallerInfo)
*********************************************************************/
FLLIBMODLIT(F,Arg,ModuleName,CallerInfo) :-
	%% If module is a variable, we must protect the call
	%% from undefinedness checks
	(var(ModuleName) -> ProtectCall = true ; true),
	(var(Arg)
	-> flora_abort([Arg,'@',ModuleName,': Attempt to call uninstantiated literal'])
	; flora_check_module_name(ModuleName),
	    ( get_libmod_callable(F,Arg,ModuleName,CallerInfo,P) ->
		(P=FLLIBMODLIT(F,NArg,ModuleName,CallerInfo) ->
		    flora_abort(['#(',NArg,')@',ModuleName,': Attempt to call uninstantiated literal'])
		;
		    true
		),
		%% Assign an Id to be used by both the export & the
		%% undefinedness check.
		(nonvar(ProtectCall) ->
		    (
		      %% New Id for protecting calls. Unique Id is used because
		      %% several calls to the same method/predicate may be in
		      %% progress at the same time, and we don't want to
		      %% inadvertantly unprotect a call that might still
		      %% need to be protected
		      %% the same Id is also used for the export call.
		      flora_increment_counter(FLORA_SYMBOL('protect_undef_call'),1,_,IdExport),
		      flora_add_undef_export_call(P,IdExport),
		      %% Protect call P from undefinedness check
		      (  flora_in_debug_mode(_),
			  flora_debug_module_registry(ModuleName)
		      ->  IdUndef = IdExport,
			  flora_temp_protect_call(P,IdUndef)
		      ;   
			  IdUndef = 0
		      )
		    )
		;
		    (
		      IdExport = 0,
		      IdUndef = 0
		    )
		),
		%% Whether P succeeds or fails we must remove the temporary
		%% skeleton from the set of facts protected from undefinedness
		%% checking in flrundefined.P so that undefinedness could be
		%% checked again for P.
		%% Likewise remove the predicate from the export undef registry.
		%% It can happen that Id is not equal to 0 but IdUndef is.
		(
		  (
		    call(P), 
		    (IdExport > 0 ->  flora_remove_undef_export_call(IdExport)
		    ;   true
		    ),
		    (IdUndef > 0 ->  flora_temp_unprotect_call(IdUndef)
		    ;   true
		    )
		  )
		; 
		  IdExport > 0, flora_remove_undef_export_call(IdExport), fail
		; 
		  IdUndef > 0, flora_temp_unprotect_call(IdUndef), fail
		)
	    )
	).


/*********************************************************************
  FLLIBMODOBJ(+Functor,+Args,+ModuleName,+CallerInfo,-Predicate)
*********************************************************************/
FLLIBMODOBJ(F,Arg,ModuleName,CallerInfo,Pout) :-
	(var(Arg)
	->
	    Pout = FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)
	    %%flora_abort([Arg,'@',ModuleName,': Attempt to query uninstantiated literal'])
	; flora_check_module_name(ModuleName),
	    ( get_libmod_callable(F,Arg,ModuleName,CallerInfo,P) -> true ),
            (P =FLLIBMODLIT(F,_NArg,ModuleName,CallerInfo) ->
	        Pout = FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)
            ;
	        convert_to_body_literal(P,Pout)
            )
	).

/*********************************************************************
  get_libmod_callable(+Functor,+Args,+ModuleName,+CallerInfo,-Callable)

  This is common part of FLLIBMODLIT and FLLIBMODOBJ. Takes a term and
  a module and returns a callable structure (molecule or a predicate).
  The input can also be already callable. In this case just return in.
*********************************************************************/
get_libmod_callable(F,Arg,ModuleName,CallerInfo,P) :-
        (
	  is_list(Arg), !,	% Term@X
	    %% This case is compiled as FLLIBMODLIT(F,Args,WS,CallerInfo)
	    %% so the caller is already accounted for
	    ( F == WRAP_HILOG ->
		%% remove the #
		Arg = [FL_TRAN,Term,TCallerInfo],
		( atom(Term) ->
		    %% #atom@X
		    flora_module_predicate(F,[Term,TCallerInfo],ModuleName,P)
		; var(Term) ->
		    P=FLLIBMODLIT(F,Term,ModuleName,CallerInfo)
		; is_flora_callable_literal(Term) ->
		    Term = P
		;
		    %% #compound@X
		    Term =.. [WRAP_HILOG|As],
		    append(As,[TCallerInfo],NewArg),
		    flora_module_predicate(F,NewArg,ModuleName,P)
		)
	    ;
		flora_module_predicate(F,Arg,ModuleName,P),
		flora_bind_last(P,CallerInfo)
	    )
        ; atom(Arg), !,		% Var@..., Var bound to atom
	    (   %% If already a hilog predicate-use it. Is this case possible?
		%% else construct it
		Arg = P
	    )
        ; is_nondistr_control(Arg), !,
            Arg = P
        ; is_distr_control(Arg,Op,ArgList), !,
            distribute_workspace(F,ArgList,ModuleName,CallerInfo,ArgListOut),
            P =.. [Op|ArgListOut]
	; %% Var@..., Var bound to compound
	    flora_decode_predicate(Arg,_,PredModName,Wrapper,_,_,Args), !,
	    ( %% if already a hilog or flogic predicate -- use it
		nonvar(PredModName),
		%% Arg is already a FLORA callable predicate,
		%% so use *its* module name, NOT the one from CallerInfo
		CallerInfo = [Caller, _ |Rest],
		flora_bind_last(Arg,[Caller , PredModName| Rest]),
		Arg = P,
		!
	    ; %% else construct it
		( Wrapper == WRAP_HILOG ->
		    ( Args=[FL_TRAN,Term] ->
			%% non-tabled hilog
			( atom(Term) ->
			    flora_add_last([Term],AugmentedArgs,CallerInfo),
			    flora_module_predicate(WRAP_HILOG,AugmentedArgs,ModuleName,P)
			;
			    Term =.. [WRAP_HILOG|As],
			    flora_add_last(As,AugmentedArgs,CallerInfo),
			    flora_module_predicate(WRAP_HILOG,AugmentedArgs,ModuleName,P)
			)
		    ;
			%% tabled hilog
			flora_add_last(Args,AugmentedArgs,CallerInfo),
			flora_module_predicate(WRAP_TABLED_HILOG,AugmentedArgs,ModuleName,P)
		    )
		;
		    %% Var@... where Var bound to a prolog predicate
		    Arg = P
		)
	    )
	).
	
is_distr_control(','(B1,B2),',',[B1,B2]).
is_distr_control(';'(B1,B2),';',[B1,B2]).

is_nondistr_control(FLLIBIFTHENELSE(_Cond,_Then,_Else)).
is_nondistr_control(FLLIBIFTHEN(_Cond,_Then)).
is_nondistr_control(FLLIBUNLESSDO(_Cond,_Action)).
is_nondistr_control(FLLIBWHILEDO(_Cond,_Action)).
is_nondistr_control(FLLIBDOUNTIL(_Cond,_Action)).
is_nondistr_control(FLLIBWHILELOOP(_Cond,_Action)).
is_nondistr_control(FLLIBLOOPUNTIL(_Cond,_Action)).
is_nondistr_control(FLORA_TNOT_PREDICATE(_Cond)).
is_nondistr_control(not(_Cond)).
is_nondistr_control(FLLIBMODLIT(_W,_A,_M,_C)).

distribute_workspace(_F,[],_Mod,_CallerInfo,[]) :- !.
distribute_workspace(F,[H|L],Mod,CallerInfo,[FLLIBMODLIT(F,H,Mod,CallerInfo)|NL]) :-
        distribute_workspace(F,L,Mod,CallerInfo,NL).
