/* File:      flrdynmod.P
**
** Author(s): Guizhen Yang 
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


:- import
	flora_check_module_name/1,
	flora_module_predicate/4,
	flora_firstorder_module_predicate/4
   from flrwrapper.


/*********************************************************************
  This file is for the following dynamic module references:
  FLLIBMODLIT and FLLIBMODOBJ.

  FLLIBMODLIT is used when the compiler encounters literal@Variable
  where literal is F-logic, HiLog, or Firstorder
  FLLIBMODOBJ is used when compiler finds term@Variable inside a predicate,
  e.g., f(g@V)
*********************************************************************/


/*********************************************************************
  fllibmodlit(+Functor,+Args,+ModuleName)
*********************************************************************/
fllibmodlit(F,Args,ModuleName) :-
	( flora_check_module_name(ModuleName) ->
	    flora_module_predicate(F,Args,ModuleName,P),
	    !,
	    call(P)
	;
	  abort
	).


/*********************************************************************
  fllibmodobj(+Functor,+Args,+ModuleName,-Predicate)
*********************************************************************/
fllibmodobj(F,Args,ModuleName,P) :-
	( flora_check_module_name(ModuleName) ->
	    flora_module_predicate(F,Args,ModuleName,P)
	;
	  abort
	),
	!.


/*********************************************************************
  fllibmodlit(FL_FIRSTORDER,+Functor,+Args,+ModuleName)
*********************************************************************/
fllibmodlit(FL_FIRSTORDER,F,Args,ModuleName) :-
	( flora_check_module_name(ModuleName) ->
	    flora_firstorder_module_predicate(F,Args,ModuleName,P),
	    !,
	    call(P)
	;
	  abort
	).


/*********************************************************************
  fllibmodobj(FL_FIRSTORDER,+Functor,+Args,+ModuleName,-Predicate)
*********************************************************************/
fllibmodobj(FL_FIRSTORDER,F,Args,ModuleName,P) :-
	( flora_check_module_name(ModuleName) ->
	    flora_firstorder_module_predicate(F,Args,ModuleName,P)
	;
	  abort
	),
	!.
