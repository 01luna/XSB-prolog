/* File:      flrdynmod.P
**
** Author(s): Guizhen Yang 
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


:- import
	flora_check_module_name/1,
	flora_module_predicate/4,
	flora_decode_module_prefix/3,
	flora_firstorder_module_predicate/4
   from flrwrapper.

:- import flora_error_line/2 from flrprint.


/*********************************************************************
  This file is for the following dynamic module references:
  FLLIBMODLIT and FLLIBMODOBJ.

  FLLIBMODLIT is used when the compiler encounters literal@Variable
  where literal is F-logic, HiLog, or Firstorder
  FLLIBMODOBJ is used when compiler finds term@Variable inside a predicate,
  e.g., f(g@V)
*********************************************************************/


/*********************************************************************
  fllibmodlit(+Functor,+Args,+ModuleName)
*********************************************************************/
fllibmodlit(F,Arg,ModuleName) :-
	( flora_check_module_name(ModuleName) ->
	    (var(Arg) -> flora_error_line('Uninstantiated literal, ~w@~w',
					  [Arg,ModuleName]),
			 abort
	    ; (
		is_list(Arg), Arg = Args, !, % Term@X
	        flora_module_predicate(F,Args,ModuleName,P)
	      ; atom(Arg), !,	% Var@..., Var bound to atom
		(	      % if already a hilog predicate -- use it
		    flora_decode_module_prefix(Arg,_,_), Arg = P, !
		%% else construct it
		; flora_module_predicate(WRAP_HILOG,[Arg],ModuleName,P)
		)
	      ; Arg =.. [Funct|Args], !, % Var@..., Var bound to compound
		(   % if already a hilog or flogic predicate -- use it
		    flora_decode_module_prefix(Funct,_,_), Arg = P, !
		%% else construct it
		; flora_module_predicate(Funct,Args,ModuleName,P)
		)
	      ),
	      !,
	      call(P)
	    )
	;
	  abort
	).


/*********************************************************************
  fllibmodobj(+Functor,+Args,+ModuleName,-Predicate)
*********************************************************************/
fllibmodobj(F,Arg,ModuleName,P) :-
	( flora_check_module_name(ModuleName) ->
	    (var(Arg) -> flora_error_line('Uninstantiated literal, ~w@~w',
					  [Arg,ModuleName]),
			 abort
	    ; ( 
		is_list(Arg), Arg = Args, !, % Term@X
		flora_module_predicate(F,Args,ModuleName,P)
	      ; atom(Arg), !,	% Var@..., Var bound to atom
		(   % if already a hilog predicate -- use it
		    flora_decode_module_prefix(Arg,_,_), Arg = P, !
		%% else construct it
		; flora_module_predicate(WRAP_HILOG,[Arg],ModuleName,P)
		)
	      ; Arg =.. [Funct|Args], !, % Var@..., Var bound to compound
		(   % if already a hilog or flogic predicate -- use it
		    flora_decode_module_prefix(Funct,_,_), Arg = P, !
		%% else construct it
		; flora_module_predicate(Funct,Args,ModuleName,P)
		)
	      )
	    )
	;
	  abort
	),
	!.


/*********************************************************************
  fllibmodlit(FL_FIRSTORDER,+Functor,+Args,+ModuleName)
*********************************************************************/
fllibmodlit(FL_FIRSTORDER,F,Args,ModuleName) :-
	( flora_check_module_name(ModuleName) ->
	    flora_firstorder_module_predicate(F,Args,ModuleName,P),
	    !,
	    call(P)
	;
	  abort
	).


/*********************************************************************
  fllibmodobj(FL_FIRSTORDER,+Functor,+Args,+ModuleName,-Predicate)
*********************************************************************/
fllibmodobj(FL_FIRSTORDER,F,Args,ModuleName,P) :-
	( flora_check_module_name(ModuleName) ->
	    flora_firstorder_module_predicate(F,Args,ModuleName,P)
	;
	  abort
	),
	!.
