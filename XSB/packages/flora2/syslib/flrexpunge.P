/* File:      flrexpunge.P
**
** Author(s): Guizhen Yang 
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


:- import abolish/1 from assert.

:- import findall/3 from setof.

:- import storage_find_fact/2, storage_delete_fact/3 from storage.

:- import flora_error_line/4 from flrprint.

:- import
	flora_check_module_name/1,
	flora_module_predicate_symbol/3,
	flora_fdb_storage_name/2
   from flrwrapper.



/*****************************************************************************
  fllibexpunge
*****************************************************************************/
fllibexpunge(FAList) :- fllibexpunge(FAList,FLORA_DEFAULT_WORKSPACE).

%% "ModuleName" could be the name of either a Flora user module or system module.
fllibexpunge(FAList,ModuleName) :-
	( flora_check_module_name(ModuleName) ->
	    flora_fdb_storage_name(ModuleName,StorageName),
	    flora_expunge(FAList,ModuleName,StorageName)
	;
	  abort
	).


/*****************************************************************************
  flora_expunge(+FAList,+ModuelName,+StorageName)
*****************************************************************************/
flora_expunge([],_ModuleName,_StorageName) :- !.

#mode save
#mode nostring "\!#'"
flora_expunge([F/A],ModuleName,StorageName) :-
	( not atom(F) ->
	    flora_error_line('FL_EXPUNGE: invalid predicate symbol'),
	    abort
	
	; not integer(A) ->
	    flora_error_line('FL_EXPUNGE: invalid predicate arity'),
	    abort
	;
	  flora_module_predicate_symbol(F,ModuleName,P),
	  abolish(P/A),
	  functor(Fact,P,A),
	  findall(Fact,storage_find_fact(StorageName,Fact),FactList),
	  flora_storage_expungelist(FactList,StorageName)
	).
#mode restore


/*****************************************************************************
  flora_storage_expungelist(+FactList,+StorageName)
*****************************************************************************/
flora_storage_expungelist([],_StorageName) :- !.

flora_storage_expungelist([F|L],StorageName) :-
	!,
	storage_delete_fact(StorageName,F,_Deleted),
	flora_storage_expungelist(L).
