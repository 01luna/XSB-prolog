/* File:      flrdbop.P
**
** Author(s): Guizhen Yang 
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


:- import var/1, call/1 from standard.

:- import clause/2, assert/1, retract/1, retractall/1 from assert.

:- import findall/3, sort/2 from setof.

:- import append/3 from basics.

:- import flora_register_syslib/1 from flrlibman.

:- import flora_error_line/1 from flrprint.

:- import
	flora_setup_flogic_bswrapper/1,
	flora_flogic_bswrapper/2,
	flora_flogic_predicate/4,
	flora_wspredicate/4
   from flrwrapper.

:- import flora_list2conjunct/2 from flrutils.


/*********************************************************************
  This file is for the following FLORA database operations:
  insert, insertall, delete, deleteall, erase, eraseall.
*********************************************************************/
?- flora_register_syslib(FLLIBDBOP).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBINSERT).


/*****************************************************************************
  fllibinsert(+List)
*****************************************************************************/
fllibinsert(List) :- fllibinsert(List,true).


/*****************************************************************************
  fllibinsert(+List,+Condition)
*****************************************************************************/
fllibinsert(List,Condition) :-
	call(Condition),
	flora_insert_facts(List).


/*****************************************************************************
  flora_insert_facts(+List)
*****************************************************************************/
flora_insert_facts([]) :- !.

flora_insert_facts([H|_T]) :-
	var(H),
	!,
	flora_error_line('uninstantiated argument of insert operation'),
	abort.

flora_insert_facts([FLLIBMODLIT(P,Args,WS)|T]) :-
	!,
	flora_wspredicate(P,Args,WS,H),
	assert(H),
	flora_insert_facts(T).

flora_insert_facts([FLLIBMODOBJ(P,Args,WS,O)|T]) :-
	!,
	flora_wspredicate(P,Args,WS,O),
	flora_insert_facts(T).

flora_insert_facts([H|T]) :-
	assert(H),
	flora_insert_facts(T).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBINSERTALL).


/*****************************************************************************
  fllibinsertall(+List)
*****************************************************************************/
fllibinsertall(List) :- fllibinsert(List).


/*****************************************************************************
  fllibinsertall(+List,+Condition)
*****************************************************************************/
fllibinsertall(List,Condition) :-
	findall(List,Condition,FsList),
	!,
	flora_insertall_facts(FsList).


/*****************************************************************************
  flora_insertall_facts(+FactsList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_insertall_facts([]) :- !.

flora_insertall_facts([Fs|FL]) :-
	flora_insert_facts(Fs),
	!,
	flora_insertall_facts(FL).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBDELETE).


/*****************************************************************************
  fllibdelete(+List)
*****************************************************************************/
fllibdelete(List) :- fllibdelete(List,true).


/*****************************************************************************
  fllibdelete(+List,+Condition)

  The semantics is such that all the literals in "List" must be base facts
  to be deleted.
*****************************************************************************/
fllibdelete([P],true) :-
	var(P),
	!,
	flora_error_line('uninstantiated argument of delete operation'),
	abort.

fllibdelete([P],true) :-
	!,
	( P = FLLIBMODLIT(F,Args,WS) ->
	    flora_wspredicate(F,Args,WS,X)
	;
	  X=P
	),
	retract(X).

fllibdelete(List,Condition) :-
	flora_convert_facts(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	call(Goal),
	flora_check_facts(FactList),
 	flora_delete_facts(FactList).


/*****************************************************************************
  flora_convert_facts(+List,-CallList,-FactList)
*****************************************************************************/
flora_convert_facts([],[],[]) :- !.

flora_convert_facts([FLLIBMODLIT(P,Args,WS)|L],
                    [flora_wspredicate(P,Args,WS,F),F|CL],
                    [F|FL]) :-
	!,
	flora_convert_facts(L,CL,FL).

flora_convert_facts([FLLIBMODOBJ(P,Args,WS,Obj)|L],
                    [flora_wspredicate(P,Args,WS,Obj)|CL],
                    FL) :-
	!,
	flora_convert_facts(L,CL,FL).

flora_convert_facts([F|L],[F|CL],[F|FL]) :-
	!,
	flora_convert_facts(L,CL,FL).


/*****************************************************************************
  flora_check_facts(+List)
*****************************************************************************/
flora_check_facts([]) :- !.

flora_check_facts([F|L],[F|FL]) :-
	!,
	clause(F,true),
	flora_check_facts(L,FL).


/*****************************************************************************
  flora_delete_facts(+List)

  Note: This function does not always necessarily succeed.
*****************************************************************************/
flora_delete_facts(L) :-
	flora_retract_facts(L,FL,Status),
	( Status ==  success ->
	    true
	;
	  flora_assert_facts(FL),
	  fail
	).


/*****************************************************************************
  flora_retract_facts(+List,-RetractedList,-Status)
*****************************************************************************/
flora_retract_facts([],[],success) :- !.

flora_retract_facts([F|Fs],[F|FL],Status) :-
	retract(F),
	!,
	flora_retract_facts(Fs,FL,Status).

flora_retract_facts(_Fs,[],failure).


/*****************************************************************************
  flora_assert_facts(+List)
*****************************************************************************/
flora_assert_facts([]) :- !.

flora_assert_facts([F|Fs]) :-
	!,
	assert(F),
	flora_assert_facts(Fs).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBDELETEALL).


/*****************************************************************************
  fllibdeleteall(+List)
*****************************************************************************/
fllibdeleteall(List) :- fllibdeleteall(List,true).


/*****************************************************************************
  fllibdeleteall(+List,+Condition)

  The semantics is such that all the literals in "List" must be base facts
  to be deleted. This call always succeeds.
*****************************************************************************/
fllibdeleteall([P],true) :-
	var(P),
	!,
	flora_error_line('uninstantiated argument of deleteall operation'),
	abort.

fllibdeleteall([P],true) :-
	!,
	( P = FLLIBMODLIT(F,Args,WS) ->
	    flora_wspredicate(F,Args,WS,X)
	;
	  X=P
	),
	retractall(X).

fllibdeleteall(List,Condition) :-
	flora_convert_facts(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	findall(FactList,Goal,FsList),
	!,
	flora_deleteall_facts(FsList,_DeletedFsList).


/*****************************************************************************
  flora_deleteall_facts(+FactsList,-DeletedList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_deleteall_facts([],[]) :- !.

flora_deleteall_facts([Fs|FL],[Fs|DFL]) :-
	flora_check_facts(Fs),
	flora_delete_facts(Fs),
	!,
	flora_deleteall_facts(FL,DFL).

flora_deleteall_facts([_Fs|FL],DFL) :-
	flora_deleteall_facts(FL,DFL).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBERASE).


/*****************************************************************************
  flliberase(+List)
*****************************************************************************/
flliberase(List) :- flliberase(List,true).


/*****************************************************************************
  flliberase(+List,+Condition)
*****************************************************************************/
flliberase(List,Condition) :-
	flora_convert_facts(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	call(Goal),
	flora_check_facts(FactList),
	flora_delete_facts(FactList),
	flora_erase_facts(FactList).


/*****************************************************************************
  flora_erase_facts(+List)
*****************************************************************************/
flora_erase_facts([]) :- !.

flora_erase_facts([F|Fs]) :-
	!,
	flora_erase_one_fact(F),
	flora_erase_facts(Fs).


/*****************************************************************************
  flora_erase_one_fact(+Fact)

  Note: For an F-logic fact this predicate continues to trace links and
        delete other F-logic facts. It always succeeds.
*****************************************************************************/
flora_erase_one_fact(Fact) :-
	Fact =.. [Funct|Args],
	( flora_flogic_predicate(Funct,Workspace,_Position,Base) ->
	    ( Base == WRAP_ISA     -> Args=[O,_C]
	    ; Base == WRAP_SUB     -> Args=[O,_C]
	    ; Base == WRAP_FD      -> Args=[_S,_A,O]
	    ; Base == WRAP_MVD     -> Args=[_S,_A,O]
	    ; Base == WRAP_IFD     -> Args=[_S,_IA,O]
	    ; Base == WRAP_IMVD    -> Args=[_S,_IA,O]
	    ; Base == WRAP_METH    -> Args=[O,_M]
	    ; Base == WRAP_IMETH   -> Args=[O,_IM]
	    ; Base == WRAP_EXISTS  -> Args=[O]
	    ; Base == WRAP_MVDDEF  -> Args=[O,_A]
	    ; Base == WRAP_IMVDDEF -> Args=[O,_IA]
	    ; Base == WRAP_TRAN    -> Args=[O,_T]
	    ; Base == WRAP_FDSIG   -> Args=[_S,_AS,O]
	    ; Base == WRAP_IFDSIG  -> Args=[_S,_IAS,O]
	    ; Base == WRAP_MVDSIG  -> Args=[_S,_AS,O]
	    ; Base == WRAP_IMVDSIG -> Args=[_S,_IAS,O]
	    )
	;
	  true
        ),
	!,
	( var(O) ->
	    true
	;
	  flora_setup_flogic_bswrapper(Workspace),
	  flora_erase_objects([O])
	).


/*****************************************************************************
  flora_erase_objects(+ObjectList)
*****************************************************************************/
flora_erase_objects([]) :- !.

flora_erase_objects([O|OList]) :-
	!,
	flora_flogic_bswrapper(WRAP_ISA,WSBisa),
	flora_flogic_bswrapper(WRAP_SUB,WSBsub),
	flora_flogic_bswrapper(WRAP_METH,WSBmeth),
	flora_flogic_bswrapper(WRAP_IMETH,WSBimeth),
	flora_flogic_bswrapper(WRAP_TRAN,WSBtran),
	flora_flogic_bswrapper(WRAP_FD,WSBfd),
	flora_flogic_bswrapper(WRAP_IFD,WSBifd),
	flora_flogic_bswrapper(WRAP_FDSIG,WSBfdsig),
	flora_flogic_bswrapper(WRAP_IFDSIG,WSBifdsig),
	flora_flogic_bswrapper(WRAP_MVD,WSBmvd),
	flora_flogic_bswrapper(WRAP_IMVD,WSBimvd),
	flora_flogic_bswrapper(WRAP_MVDSIG,WSBmvdsig),
	flora_flogic_bswrapper(WRAP_IMVDSIG,WSBimvdsig),
	flora_flogic_bswrapper(WRAP_EXISTS,WSBexists),
	flora_flogic_bswrapper(WRAP_MVDDEF,WSBmvddef),
	flora_flogic_bswrapper(WRAP_IMVDDEF,WSBimvddef),
	Wfd =.. [WSBfd,O,_,X],
	Wifd =.. [WSBifd,O,_,X],
	Wfdsig =.. [WSBfdsig,O,_,X],
	Wifdsig =.. [WSBifdsig,O,_,X],
	Wmvd =.. [WSBmvd,O,_,X],
	Wimvd =.. [WSBimvd,O,_,X],
	Wmvdsig =.. [WSBmvdsig,O,_,X],
	Wimvdsig =.. [WSBimvdsig,O,_,X],
	findall(X,(Wfd; Wifd; Wfdsig; Wifdsig; Wmvd; Wimvd; Wmvdsig; Wimvdsig),AddedOList),
	append(OList,AddedOList,NewOList),
	sort(NewOList,NextOList),
	Pisa =.. [WSBisa,O,_],
	Psub =.. [WSBsub,O,_],
	Pmeth =.. [WSBmeth,O,_],
	Pimeth =.. [WSBimeth,O,_],
	Ptran =.. [WSBtran,O,_],
	Pfd =.. [WSBfd,O,_,_],
	Pifd =.. [WSBifd,O,_,_],
	Pfdsig =.. [WSBfdsig,O,_,_],
	Pifdsig =.. [WSBifdsig,O,_,_],
	Pmvd =.. [WSBmvd,O,_,_],
	Pimvd =.. [WSBimvd,O,_,_],
	Pmvdsig =.. [WSBmvdsig,O,_,_],
	Pimvdsig =.. [WSBimvdsig,O,_,_],
	Pexists =.. [WSBexists,O],
	Pmvddef =.. [WSBmvddef,O,_],
	Pimvddef =.. [WSBimvddef,O,_],
	!,
	retractall(Pisa),
	retractall(Psub),
	retractall(Pmeth),
	retractall(Pimeth),
	retractall(Ptran),
	retractall(Pfd),
	retractall(Pifd),
	retractall(Pfdsig),
	retractall(Pifdsig),
	retractall(Pmvd),
	retractall(Pimvd),
	retractall(Pmvdsig),
	retractall(Pimvdsig),
	retractall(Pexists),
	retractall(Pmvddef),
	retractall(Pimvddef),
	flora_erase_objects(NextOList).


/*********************************************************************
  system library registration
*********************************************************************/
?- flora_register_syslib(FLLIBERASEALL).


/*****************************************************************************
  flliberaseall(+List)
*****************************************************************************/
flliberaseall(List) :- flliberaseall(List,true).


/*****************************************************************************
  flliberaseall(+List,+Condition)
*****************************************************************************/
flliberaseall(List,Condition) :-
	flora_convert_facts(List,CallList,FactList),
	flora_list2conjunct([Condition|CallList],Goal),
	findall(FactList,Goal,FsList),
	flora_deleteall_facts(FsList,DeletedFsList),
	flora_eraseall_facts(DeletedFsList).


/*****************************************************************************
  flora_eraseall_facts(+FactsList)

  Note: This predicate always succeeds.
*****************************************************************************/
flora_eraseall_facts([]) :- !.

flora_eraseall_facts([Fs|FL]) :-
	!,
	flora_erase_facts(Fs),
	flora_eraseall_facts(FL).
