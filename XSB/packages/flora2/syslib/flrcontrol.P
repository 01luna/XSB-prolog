/* File:      flrcontrol.P
**
** Author(s): Michael Kifer
**            Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrcontrol.P,v 1.12 2002-03-12 23:56:17 gzyang Exp $
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"

:- import flora_commit_storage/0 from flrutils.


/***************************************************************************
  if-then-else statement
***************************************************************************/
FLLIBIFTHENELSE(Cond,Then,_Else) :-
	call(Cond),
	call(Then).

FLLIBIFTHENELSE(Cond,_Then,Else) :-
	sk_not(Cond),
	call(Else).


/***************************************************************************
  if-then statement

  The semantics is such that the entire statement succeeds when the
  condition part fails.
***************************************************************************/
FLLIBIFTHEN(Cond,Then) :-
	call(Cond),
	call(Then).

FLLIBIFTHEN(Cond,_Then) :-
	sk_not(Cond).


%% UNLESS ... DO ... is like IF...THEN true ELSE ...
FL_UNLESS(FL_DO(Cond,_Action)) :- call(Cond).
FL_UNLESS(FL_DO(Cond,Action)) :- sk_not(Cond), call(Action).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%   while-do and do-until loops commit storage after each iteration
%%%%   so they are not backtrackable (backtracking over updates can occur
%%%%   only within the condition or action parts, but not after an iteration
%%%%   is finished)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% This should fail ONLY if Cond is true, but Action fails.
%% We use catch/throw to achieve this
FL_WHILE(FL_DO(Cond,Action)) :- 
	FLORA_SYMBOL('catch')((call(Cond),
			       (call(Action) -> flora_commit_storage, fail
			       ; throw(quitLoop)
			       )
			      ; true
			      ),
			      quitLoop,	% catcher
			      fail). % fail, if condition was thrown

%% Fails only if Action becomes false before Cond becomes true
FL_DO(FL_UNTIL(Action,Cond)) :-
	call(Action),
	flora_commit_storage,
	call(Cond).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% while-loop and loop-while
%%% These loops are fully backtrackable, but they are more expensive, 
%%% since they are recursive.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FL_WHILE(FL_LOOP(Cond,Action)) :- 
	call(Cond),
	call(Action),
	FL_WHILE(FL_LOOP(Cond,Action)).

FL_LOOP(FL_UNTIL(Action,Cond)) :-
	call(Action),
	call(Cond),
	FL_LOOP(FL_UNTIL(Action,Cond)).


%% These exist in order to be able to hide the calls 
%% to catch/throw in the debugger
FLORA_SYMBOL('catch')(X,Y,Z) :- catch(X,Y,Z).
