/* File:      flrclause.P
**
** Author(s): Chang Zhao
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 1999-2002
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_exceptions.flh"

:- import
        flora_rule_signature/5,
        flora_build_pred_signature/2,
        flora_preprocess_headlist/2,
        convert_to_head_literal/2,
        flora_restore_from_signature/2
    from flrcanon.

:- import
        flora_decode_predicate/6
   from flrwrapper.


/**********************************************************************
 flora_clause_prefix(+Mode,-Prefix)
************************************************************************/ 
flora_clause_prefix(NULL, _Prefix).
flora_clause_prefix(STATIC,FLHEADPREFIX).
flora_clause_prefix(DYNA,FLDYNAPREFIX).
flora_clause_prefix(DYNZ,FLDYNZPREFIX).
flora_clause_prefix(DYNAMIC,FLDYNAPREFIX).
flora_clause_prefix(DYNAMIC,FLDYNZPREFIX).


/***********************************************************************
 FLLIBCLAUSE(+Mode,+HeadList,?RuleBody)
************************************************************************/ 
FLLIBCLAUSE(Mode,HeadList,Body) :-
        flora_preprocess_headlist(HeadList,NewHeadList),
        fllibclause_exec(Mode,NewHeadList,Body).

fllibclause_exec(Mode,[Head],Body) :-
        !,
        copy_term(Body,BodyCopy),
        copy_term(Head,HeadCopy),
        flora_build_pred_signature(BodyCopy,BodySig),
        flora_build_pred_signature(HeadCopy,HeadSig),
        (nonvar(HeadSig),HeadSig=FLCANON(_Wrap,Args,Module,Pred),nonvar(Pred) ->
            convert_to_head_literal(Pred,HeadPred),
            flora_decode_predicate(HeadPred,Type,_MN,_Prefix,Funct,_As),
            (Type == flogic ->
                NewHeadSig = FLCANON(Funct,Args,Module,HeadPred)
            ;
                NewHeadSig = HeadSig
            )
        ;
            NewHeadSig = HeadSig
        ),
        flora_clause_prefix(Mode,Prefix),
        flora_rule_signature(Prefix,NewHeadSig,BodySig,_RuleList,_BridgeRule),
        flora_restore_from_signature(NewHeadSig,Head),
        flora_restore_from_signature(BodySig,Body).

fllibclause_exec(Mode,[H|L],Body) :-
        copy_term(Body,BodyCopy),
        copy_term(H,HCopy),
        flora_build_pred_signature(BodyCopy,BodySig),
        flora_build_pred_signature(HCopy,HeadSig),
        (nonvar(HeadSig),HeadSig=FLCANON(_Wrap,Args,Module,Pred),nonvar(Pred) ->
            convert_to_head_literal(Pred,HeadPred),
            flora_decode_predicate(HeadPred,Type,_MN,_Prefix,Funct,_As),
            (Type == flogic ->
                NewHeadSig = FLCANON(Funct,Args,Module,HeadPred)
            ;
                NewHeadSig = HeadSig
            )
        ;
            NewHeadSig = HeadSig
        ),
        flora_clause_prefix(Mode,Prefix),
        flora_rule_signature(Prefix,NewHeadSig,BodySig,_RuleList,_Bridgerule), 
        flora_clause_list(Prefix,L,BodySig), 
        flora_restore_from_signature(NewHeadSig,H),
        flora_restore_from_signature(BodySig,Body).

flora_clause_list(_Prefix,[],_BodySig) :- 
        !.

flora_clause_list(Prefix,[H|L],BodySig) :-
        copy_term(H,HCopy),
        flora_build_pred_signature(HCopy,HeadSig),
        (nonvar(HeadSig),HeadSig=FLCANON(_Wrap,Args,Module,Pred),nonvar(Pred) ->
            convert_to_head_literal(Pred,HeadPred),
            flora_decode_predicate(HeadPred,Type,_MN,_Prefix,Funct,_As),
            (Type == flogic ->
                NewHeadSig = FLCANON(Funct,Args,Module,HeadPred)
            ;
                NewHeadSig = HeadSig
            )
        ;
            NewHeadSig = HeadSig
        ),
        flora_rule_signature(Prefix,NewHeadSig,BodySig,_RuleList,_BridgeRule),
        flora_restore_from_signature(NewHeadSig,H),
        flora_clause_list(Prefix,L,BodySig).
        
/***********************************************************************
 FLLIBINSRULESIG(+HeadList,+RuleBody,+Newpred)
************************************************************************/ 
FLLIBINSRULESIG(HeadList,Body,Newpred) :-
        is_list(HeadList),
        !,
        %% multiple atoms appear in the rule head
        flora_build_pred_signature(Body,BodySig),
        BridgeRule =.. [FL_IMPLYOP,Body,Newpred],
        flora_insrulesig_list(HeadList,BodySig,BridgeRule).

FLLIBINSRULESIG(Head,Body,_Newpred) :-
        %% only a single atom appears in the rule head
        flora_build_pred_signature(Head,HeadSig),
        flora_build_pred_signature(Body,BodySig),
        assert(flora_rule_signature(FLHEADPREFIX,HeadSig,BodySig,[],[])).
        
flora_insrulesig_list([],_BodySig,_BridgeRule) :- !.
flora_insrulesig_list([H|L],BodySig,BridgeRule) :- 
        flora_build_pred_signature(H,HeadSig),
        assert(flora_rule_signature(FLHEADPREFIX,HeadSig,BodySig,[],[BridgeRule])),
        flora_insrulesig_list(L,BodySig,BridgeRule).

