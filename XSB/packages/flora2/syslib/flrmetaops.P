/* File:      flrmetaops.P
**
** Author(s): kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) The Research Foundation of SUNY, 2001
**
** FLORA-2 is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** FLORA-2 is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with FLORA-2; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrmetaops.P,v 1.13 2004-06-20 08:33:31 kifer Exp $
** 
*/


:- compiler_options([xpp_on]).

:- import flora_module_predicate/4 from flrwrapper.

:- import
	get_canonical_form/2,
	convert_to_body_literal/2
    from flrcanon.

:- import flora_list2conjunct/2 from flrutils.

#include "flora_terms.flh"

/******************************************************************************
  FLLIBUNIVEQFORM(?X,?Y)
  The meta predicate ~
******************************************************************************/
FLLIBUNIVEQFORM(X,Y) :-
	(var(X) ; var(Y)),
	!,
	X=Y.

FLLIBUNIVEQFORM((X,XX),(Y,YY)) :-
	FLLIBUNIVEQFORM(X,Y),
	FLLIBUNIVEQFORM(XX,YY).

FLLIBUNIVEQFORM((X,XX),FLLIBMODLIT(FL_LIBMOD,(Y,YY),M,_Caller)) :-
	FLLIBUNIVEQFORM(X,FLLIBMODLIT(FL_LIBMOD,Y,M,_Caller)),
	FLLIBUNIVEQFORM(XX,FLLIBMODLIT(FL_LIBMOD,YY,M,_Caller)).

FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,(X,XX),M,_Caller), (Y,YY)) :-
	FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,X,M,_Caller),Y),
	FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,XX,M,_Caller),YY).

FLLIBUNIVEQFORM((X;XX),(Y;YY)) :-
	FLLIBUNIVEQFORM(X,Y),
	FLLIBUNIVEQFORM(XX,YY).

FLLIBUNIVEQFORM((X;XX),FLLIBMODLIT(FL_LIBMOD,(Y;YY),M,_Caller)) :-
	FLLIBUNIVEQFORM(X,FLLIBMODLIT(FL_LIBMOD,Y,M,_Caller)),
	FLLIBUNIVEQFORM(XX,FLLIBMODLIT(FL_LIBMOD,YY,M,_Caller)).

FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,(X;XX),M,_Caller), (Y;YY)) :-
	FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,X,M,_Caller),Y),
	FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,XX,M,_Caller),YY).

%% Now neither X nor Y are variables

%% Speed up the case of  nonvar1@Var1 ~ nonvar2@Var2
FLLIBUNIVEQFORM(FLLIBMODLIT(WrapX,X,MX,_Caller),FLLIBMODLIT(WrapY,Y,MY,_Caller)) :-
	WrapX \== FL_LIBMOD,
	WrapY \== FL_LIBMOD,
	WrapX = WrapY,
	X=Y,
	MX=MY.

FLLIBUNIVEQFORM(FLSYSRULEUPDATE(H1,B1,_,_),FLSYSRULEUPDATE(H2,B2,_,_)) :-
	!,
	flora_list2conjunct(H1,H1C),
	flora_list2conjunct(H2,H2C),
	FLLIBUNIVEQFORM(H1C,H2C),
	FLLIBUNIVEQFORM(B1,B2).

%% lists of formulas. Note: [a,b] ~ [A,B] fails because [] means flload
%% when reified
FLLIBUNIVEQFORM([],[]).
FLLIBUNIVEQFORM([H1|T1],[H2|T2]) :-
	!,
	FLLIBUNIVEQFORM(H1,H2),
	FLLIBUNIVEQFORM(T1,T2).

%% (... :- ...) ~ X
FLLIBUNIVEQFORM(FLSYSRULEUPDATE(H,B,_,_),FLLIBMODLIT(FL_LIBMOD,Var,_,_)) :-
	!,
	var(Var),
	Var = FLSYSRULEUPDATE(H,B,_,_).

%% X ~ (... :- ...)
FLLIBUNIVEQFORM(FLLIBMODLIT(FL_LIBMOD,Var,_,_),FLSYSRULEUPDATE(H,B,_,_)) :-
	!,
	var(Var),
	Var = FLSYSRULEUPDATE(H,B,_,_).


%% Speed up the case of nonvar1@nonvarmod1 ~ nonvar2@nonvarmod2
FLLIBUNIVEQFORM(X,Y) :-
	X \= FLLIBMODLIT(_,_,_,_),
	Y \= FLLIBMODLIT(_,_,_,_),
	!,
	X=Y.

%% Common (expensive) case
FLLIBUNIVEQFORM(X,Y) :-
	get_canonical_form(X,FLCANON(Wrap1,Args,Mod,Callable1)),
	get_canonical_form(Y,FLCANON(Wrap2,Args,Mod,Callable2)),
        (nonvar(Args) -> Wrap1=Wrap2; true),
	( var(Callable1),nonvar(Wrap1),nonvar(Args),nonvar(Mod)
	-> flora_module_predicate(Wrap1,Args,Mod,Callable1); true),
	( var(Callable2),nonvar(Wrap2),nonvar(Args),nonvar(Mod)
	-> flora_module_predicate(Wrap2,Args,Mod,Callable2); true),
	convert_to_body_literal(Callable1,Callable),
	convert_to_body_literal(Callable2,Callable),
	( var(Callable), nonvar(Wrap1), nonvar(Args)
	%% Cases like a(X)@M ~ Y@Z where module stays unbound
	-> Callable = FLLIBMODLIT(Wrap1,Args,Mod,_Caller)
	;  var(Callable), nonvar(Wrap2), nonvar(Args)
	%% Cases like Y@Z ~ a(X)@M where module stays unbound
	-> Callable = FLLIBMODLIT(Wrap2,Args,Mod,_Caller)
	;  true
	).


/******************************************************************************
  FLLIBMETAUNIV(?X,?Y)
  The meta predicate =..
******************************************************************************/

FLLIBMETAUNIV(X,Y) :- X =.. Y.
