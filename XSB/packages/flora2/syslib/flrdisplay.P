/* File:        flrdisplay.P
**
** Author(s): Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrdisplay.P,v 1.5 2002-02-26 10:31:29 kifer Exp $
** 
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "standard.h"


:- import file_write/2 from xsb_writ.
:- import concat_atom/2 from string.

:- export
	flora_stderr_write/1,
	flora_stdfdbk_write/1,
	flora_write_string/2,
	flora_write/2.


/********************************************************************/
flora_stderr_write(X) :- flora_write(STDERR,X).
flora_stdfdbk_write(X) :- flora_write(STDFDBK,X).



/********************************************************************/
%% Write Flora term to I/O port
flora_write(IOPort,X) :- flora_write_string(X,Str), file_write(IOPort, Str).

%% Write Flora term to string
flora_write_string(X,Str) :-
	flora_write_string1(X, AtomList, Tail), Tail = [],
	concat_atom(AtomList,Str).

flora_write_string1(X, Tail, NewTail) :-
	var(X),
	!,
	fmt_write_string(Xatom,'%S',arg(X)),
	Tail = [Xatom | NewTail].

flora_write_string1(X, Tail, NewTail) :-
	atomic(X),
	!,
	%% Note: atom_codes won't do here because X can be an atom or a number
	Tail = [X | NewTail].

flora_write_string1([], Tail, NewTail) :- 
	Tail = ['[]' | NewTail].

flora_write_string1([H|T], Tail, NewTail) :-
	!,
	Tail = ['[' | NewTail1],
	flora_write_args([H|T], NewTail1 , NewTail2),
	NewTail2 = [']' | NewTail].

flora_write_string1(X,Tail, NewTail) :-
	X =.. [WRAP_HILOG,Funct|Args],
	!,
	flora_write_string1(Funct,Tail,NewTail1),
	NewTail1 = ['(' | NewTail2],
	flora_write_args(Args,NewTail2,NewTail3),
	NewTail3 = [')'| NewTail].

flora_write_string1(WRAP_FDSKOLEM(O1,O2),Tail, NewTail) :-
	!,
	flora_write_string1(O1,Tail,NewTail1),
	NewTail1 = ['.' | NewTail2],
	flora_write_string1(O2,NewTail2,NewTail).

flora_write_string1(WRAP_IFDSKOLEM(O1,O2),Tail,NewTail) :-
	!,
	flora_write_string1(O1,Tail,NewTail1),
	NewTail1 = ['!' | NewTail2],
	flora_write_string1(O2,NewTail2,NewTail).

flora_write_string1(X,Tail,NewTail) :-
	X =.. [Funct|Args],
	!,
	Tail = [Funct, '(' | NewTail1],
	flora_write_args(Args,NewTail1,NewTail2),
	NewTail2 = [')' | NewTail].


flora_write_args([],_Tail,_NewTail) :- !.

%% This catches lists [X|Y] where Y is a var.
%% Otherwise it might unify with [X] in the next clause.
flora_write_args([X|Y],Tail,NewTail) :-
	var(Y),
	!,
	flora_write_string1(X,Tail,NewTail1),
	NewTail1 = ['|' | NewTail2],
	flora_write_string1(Y,NewTail2,NewTail).

flora_write_args([X],Tail,NewTail) :-
        !,
        flora_write_string1(X,Tail,NewTail).

flora_write_args([X1,X2|Xs],Tail,NewTail) :-
        flora_write_string1(X1,Tail,NewTail1),
	NewTail1 = [',' | NewTail2],
        flora_write_args([X2|Xs],NewTail2,NewTail).

