/* File:      flrnohilog.P
**
** Author(s): Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999-2001
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
**
*/


:- compiler_options([xpp_on]).


#include "flora_terms.flh"


flora_firstorder(FLORA_THIS_MODULE,1) :- !.


/****************************************************************************
  flora_firstorderdef(+Functor,+Arity)
****************************************************************************/
flora_firstorderdef(X,Y) :-
	flora_firstorder(X,Y),
	!.

flora_firstorderdef(X,Y) :-
	( conget(flora_shell_mode,1) ->
	    flora_shfirstorder(X,Y)
	;
	  flora_dynfirstorder(X,Y)
	).


/****************************************************************************
  flora_reset_firstorder/0
****************************************************************************/
flora_reset_firstorder :- retractall(flora_dynfirstorder(_,_)).


/****************************************************************************
  flora_define_firstorder(+Functor,+Arity)
****************************************************************************/
flora_define_firstorder(Functor,Arity) :-
	(var(Functor); var(Arity)),
	!,
	assert(flora_dynfirstorder(Functor,Arity)).

flora_define_firstorder(Functor,Arity) :-
	( flora_firstorder(Functor,Arity) ->
	    true
	;
	  assert(flora_dynfirstorder(Functor,Arity))
	).


/****************************************************************************
  flora_shreset_firstorder/0
****************************************************************************/
flora_shreset_firstorder :- retractall(flora_shfirstorder(_,_)).


/****************************************************************************
  flora_shdefine_firstorder(+Functor,+Arity)
****************************************************************************/
flora_shdefine_firstorder(Functor,Arity) :-
	(var(Functor); var(Arity)),
	!,
	assert(flora_shfirstorder(Functor,Arity)).

flora_shdefine_firstorder(Functor,Arity) :-
	( flora_firstorder(Functor,Arity) ->
	    true
	;
	  assert(flora_shfirstorder(Functor,Arity))
	).
