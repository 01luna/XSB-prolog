/* File:      family_rel.flp
** Author(s): Bertram Ludaescher
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) Bertram Ludaescher, 1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: family_rel.flr,v 1.1 2001-01-08 20:57:47 gzyang Exp $
** 
*/

%%% ======================================================================
%%% QUERYING THE PEDIGREE OF ``THE FALLERS'' 
%%% (German TV serial; see: www.swf.de/diefallers/stammbaum/index.html)
%%% 
%%% This demo contains a purely RELATIONAL (= DATALOG) version
%%%
%%% ======================================================================

%%% ======================================================================
%%% DEFINE SOME BASE FACTS (EDB RELATIONS) ABOUT THE ``FALLERS'' 
%%% ======================================================================


:- auto_table.
:- prologall.

%%% Ladies first:
female(rita). 
female(johanna).
female(monique).
female(christina).
female(kati).
female(eva).

%%% Gentlemen:
male(wilhelm). 
male(franz).
male(heinz).
male(hermann).
male(bernhard).
male(karl).
male(albert).

%%% spouse(Husband, Wife); for a change in this order (male emancipation)
spouse(wilhem,rita).
spouse(hermann,johanna).
spouse(karl,christina).

%%% compute symmetric closure of spouse:
spouse(X,Y) :- spouse(Y,X).	% now spouse is an IDB (derived) relation!

%%% child(Parent, Child)  -- read as ``child_of P is C''
child(wilhelm,franz).
child(wilhelm,heinz).
child(wilhelm,hermann).
child(rita,X) :- child(wilhelm,X).	% rita & wilhelm have the same kids
child(hermann,bernhard).
child(hermann,karl).
child(hermann,kati).
child(johanna,X) :- child(hermann,X).	% like above for johanna & hermann 
child(bernhard,albert).
child(monique,albert).
child(kati,eva).

%%% ======================================================================
%%% DEFINE SOME DERIVED (IDB) RELATIONS
%%% ======================================================================

parent(C,P) :- child(P,C).		% read as ``parent_of C is P''

father(C,P) :- child(P,C), male(P).	% use the child relation...
mother(C,P) :- parent(C,P), female(P).	% ... or the parent relation

brother(X,B) :- parent(X,P), parent(B,P), male(B), not X=B.
sister(X,S) :- parent(X,P), parent(S,P), female(S), not X=S.

%%% define a relation recursively:
ancestor(X,Y) :- parent(X,Y).		% read as ``ancestor_of X is Y''
ancestor(X,Y) :- ancestor(X,Z), ancestor(Z,Y).


%%% ======================================================================
%%% now ask some queries:
%%% ======================================================================

?- brother(X,Brother).
?- ancestor(eva,Ancestor).		% hmm, according to the bible...



%%% ======================================================================
%%% **EXERCISE**
%%%	Define: aunt, uncle, sister_in_law, brother_in_law, cousin !
%%%	(or have a look at the extended and OO version: family_obj.flp ;-)
%%% ======================================================================




