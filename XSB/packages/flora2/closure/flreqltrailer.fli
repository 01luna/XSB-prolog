/***************************************************************************
  file: closure/flreqltrailer.fli

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 1999-2001

  This is a template file to generate the FLORA trailer with
  equality maintenance.

  The actual include file, flreqltrailer.flh,
  is generated by the predicate flWrapAround/1 in
  flrwraparound.P. It is invoked by the makefile when Flora is built.
***************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"

:- import flora_warning_line/1 from flrprint.
:- import flora_funct_arity/2 from flrwrapper.


/***************************************************************************
  Note that all programs rules are translated with with a 'derived_' prefix.
  These rules are bridged to the trailer using wrapper predicates with a
  'inferred_' prefix.
***************************************************************************/


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
%% inferred_sub_eql/2
inferred_sub_eql(X,Y) :-
	inferred_sub(X,Y).

inferred_sub_eql(X,Y) :-
	diffobjeql(X,OX),
	inferred_sub(OX,Y).

inferred_sub_eql(X,Y) :-
	diffobjeql(Y,OY),
	inferred_sub(X,OY).

inferred_sub_eql(X,Y) :-
	diffobjeql(X,OX),
	diffobjeql(Y,OY),
	inferred_sub(OX,OY).


%% sub/2
sub(X,Y) :-
	inferred_sub_eql(X,Y),
	(X=Y, flora_warning_line('cycle in class hierarchy'); true).

sub(X,Y) :-
	silent_sub(X,Z),
	inferred_sub_eql(Z,Y),
	(X=Y, flora_warning_line('cycle in class hierarchy'); true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% inferred_isa_eql/2
inferred_isa_eql(O,C) :-
	inferred_isa(O,C).

inferred_isa_eql(O,C) :-
	diffobjeql(O,OX),
	inferred_isa(OX,C).

inferred_isa_eql(O,C) :-
	diffobjeql(C,CX),
	inferred_isa(O,CX).

inferred_isa_eql(O,C) :-
	diffobjeql(O,OX),
	diffobjeql(C,CX),
	inferred_isa(OX,CX).


%% isa/2
isa(O,C) :-
	inferred_isa_eql(O,C).

isa(O,C) :-
	inferred_isa_eql(O,S),
	sub(S,C).


/*****************************************************************************
  The following rules propogate the effects of equality.
*****************************************************************************/
%% inferred_ifd_eql/3
inferred_ifd_eql(C,M,V) :-
	inferred_ifd(C,M,V).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(C,CX),
	inferred_ifd(CX,M,V).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(V,VX),
	inferred_ifd(C,M,VX).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(M,MX),
	inferred_ifd(C,MX,V).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_ifd(C,MX,VX).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(V,VX),
	inferred_ifd(CX,M,VX).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_ifd(CX,MX,V).

inferred_ifd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_ifd(CX,MX,VX).


%% inferred_fd_eql/3
inferred_fd_eql(O,M,V) :-
	inferred_fd(O,M,V).

inferred_fd_eql(O,M,V) :-
	diffobjeql(O,OX),
	inferred_fd(OX,M,V).

inferred_fd_eql(O,M,V) :-
	diffobjeql(M,MX),
	inferred_fd(O,MX,V).

inferred_fd_eql(O,M,V) :-
	diffobjeql(V,VX),
	inferred_fd(O,M,VX).

inferred_fd_eql(O,M,V) :-
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_fd(O,MX,VX).

inferred_fd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(V,VX),
	inferred_fd(OX,M,VX).

inferred_fd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_fd(OX,MX,V).

inferred_fd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_fd(OX,MX,VX).


%% inferred_imvd_eql/3
inferred_imvd_eql(C,M,V) :-
	inferred_imvd(C,M,V).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(C,CX),
	inferred_imvd(CX,M,V).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(M,MX),
	inferred_imvd(C,MX,V).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(V,VX),
	inferred_imvd(C,M,VX).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_imvd(C,MX,VX).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(V,VX),
	inferred_imvd(CX,M,VX).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_imvd(CX,MX,V).

inferred_imvd_eql(C,M,V) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_imvd(CX,MX,VX).


%% inferred_imvddef_eql/2
inferred_imvddef_eql(C,M) :-
	inferred_imvddef(C,M).

inferred_imvddef_eql(C,M) :-
	diffobjeql(C,CX),
	inferred_imvddef(CX,M).

inferred_imvddef_eql(C,M) :-
	diffobjeql(M,MX),
	inferred_imvddef(C,MX).


%% inferred_mvd_eql/3
inferred_mvd_eql(O,M,V) :-
	inferred_mvd(O,M,V).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(O,OX),
	inferred_mvd(OX,M,V).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(M,MX),
	inferred_mvd(O,MX,V).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(V,VX),
	inferred_mvd(O,M,VX).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_mvd(O,MX,VX).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(V,VX),
	inferred_mvd(OX,M,VX).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_mvd(OX,MX,V).

inferred_mvd_eql(O,M,V) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	diffobjeql(V,VX),
	inferred_mvd(OX,MX,VX).


%% inferred_mvddef_eql/2
inferred_mvddef_eql(O,M) :-
	inferred_mvddef(O,M).

inferred_mvddef_eql(O,M) :-
	diffobjeql(O,OX),
	inferred_mvddef(OX,M).

inferred_mvddef_eql(O,M) :-
	diffobjeql(M,MX),
	inferred_mvddef(O,MX).


/*****************************************************************************
  inheritable methods that are locally defined

  The argument "MethSign" is in the form of Funct/Arity/Type.
*****************************************************************************/
%% local_ifd/2
local_ifd(S,MethSign) :-
	var(MethSign),
	!,
	inferred_ifd_eql(S,M,_V),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_ifd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_ifd_eql(S,M,_V).
	%% Should have a cut here when XSB will allow


%% local_fd/2
local_fd(S,MethSign) :-
	var(MethSign),
	!,
	inferred_fd_eql(S,M,_V),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_fd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_fd_eql(S,M,_V).
	%% Should have a cut here when XSB will allow


%% local_imvd/2
local_imvd(S,MethSign) :-
	var(MethSign),
	inferred_imvd_eql(S,M,_V),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_imvd(S,MethSign) :-
	var(MethSign),
	!,
	inferred_imvddef_eql(S,M),
	flora_funct_arity(M,MethSign).

local_imvd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_imvd_eql(S,M,_V).
	%% Should have a cut here when XSB will allow

local_imvd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_imvddef_eql(S,M).


%% local_mvd/2
local_mvd(S,MethSign) :-
	var(MethSign),
	inferred_mvd_eql(S,M,_V),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_mvd(S,MethSign) :-
	var(MethSign),
	!,
	inferred_mvddef_eql(S,M),
	flora_funct_arity(M,MethSign).

local_mvd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_mvd_eql(S,M,_V).
	%% Should have a cut here when XSB will allow

local_mvd(S,MethSign) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	inferred_mvddef_eql(S,M).


/*****************************************************************************
  nonmonotonic multiple inheritance of scalar attributes
  from superclasses to subclasses
*****************************************************************************/
ifd(C,M,V) :-
	inferred_ifd_eql(C,M,V).

ifd(C,M,V) :-
	var(M),
	!,
	inheritance_ifd_eql(Super,M,V),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_ifd(C,MethSign)),
	candidate_class_ifd(Super,MethSign,C),
	FLORA_TNOT(multiple_class_ifd(Super,MethSign,C)).

ifd(C,M,V) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_ifd(C,MethSign)),
	candidate_class_ifd(Super,MethSign,C),
	inheritance_ifd_eql(Super,M,V),
	FLORA_TNOT(multiple_class_ifd(Super,MethSign,C)).


/*****************************************************************************
  nonmonotonic multiple inheritance of scalar attributes
  from superclasses to instances/members
*****************************************************************************/
fd(O,M,V) :-
	inferred_fd_eql(O,M,V).

fd(O,M,V) :-
	var(M),
	!,
	inheritance_ifd_eql(Super,M,V),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_fd(O,MethSign)),
	candidate_object_ifd(Super,MethSign,O),
	FLORA_TNOT(multiple_object_ifd(Super,MethSign,O)).

fd(O,M,V) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_fd(O,MethSign)),
	candidate_object_ifd(Super,MethSign,O),
	inheritance_ifd_eql(Super,M,V),
	FLORA_TNOT(multiple_object_ifd(Super,MethSign,O)).


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to subclasses
*****************************************************************************/
imvd(C,M,V) :-
	inferred_imvd_eql(C,M,V).

imvd(C,M,V) :-
	var(M),
	!,
	inheritance_imvd_eql(Super,M,V),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_imvd(C,MethSign)),
	candidate_class_imvd(Super,MethSign,C),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C)).

imvd(C,M,V) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_imvd(C,MethSign)),
	candidate_class_imvd(Super,MethSign,C),
	inheritance_imvd_eql(Super,M,V),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C)).


imvddef(C,M) :-
	inferred_imvddef_eql(C,M).

imvddef(C,M) :-
	var(M),
	!,
	inheritance_imvddef_eql(Super,M),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_imvd(C,MethSign)),
	candidate_class_imvd(Super,MethSign,C),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C)).

imvddef(C,M) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_imvd(C,MethSign)),
	candidate_class_imvd(Super,MethSign,C),
	inheritance_imvddef_eql(Super,M),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C)).

imvddef(C,M) :-
	imvd(C,M,_V).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to instances/members
*****************************************************************************/
mvd(O,M,V) :-
	inferred_mvd_eql(O,M,V).

mvd(O,M,V) :-
	var(M),
	!,
	inheritance_imvd_eql(Super,M,V),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_mvd(O,MethSign)),
	candidate_object_imvd(Super,MethSign,O),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O)).

mvd(O,M,V) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_mvd(O,MethSign)),
	candidate_object_imvd(Super,MethSign,O),
	inheritance_imvd_eql(Super,M,V),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O)).


mvddef(O,M) :-
	inferred_mvddef_eql(O,M).

mvddef(O,M) :-
	var(M),
	!,
	inheritance_imvddef_eql(Super,M),
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_mvd(O,MethSign)),
	candidate_object_imvd(Super,MethSign,O),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O)).

mvddef(O,M) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLORA_TNOT(local_mvd(O,MethSign)),
	candidate_object_imvd(Super,MethSign,O),
	inheritance_imvddef_eql(Super,M),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O)).

mvddef(O,M) :-
	nonvar(M),  % the cut above might not work under local scheduling
	mvd(O,M,_V).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
meth(O,M) :-
	inferred_meth(O,M).

meth(O,M) :-
	diffobjeql(O,OX),
	inferred_meth(OX,M).

meth(O,M) :-
	diffobjeql(M,MX),
	inferred_meth(O,MX).

meth(O,M) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_meth(OX,MX).

meth(O,M) :-
	isa(O,C),
	imeth(C,M).


imeth(C,M) :-
	inferred_imeth(C,M).

imeth(C,M) :-
	diffobjeql(C,CX),
	inferred_imeth(CX,M).

imeth(C,M) :-
	diffobjeql(M,MX),
	inferred_imeth(C,MX).

imeth(C,M) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_imeth(CX,MX).

imeth(C,M) :-
	inheritance_sub(C,S),
	imeth(S,M).


/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
tran(O,T) :-
	inferred_tran(O,T).

tran(O,T) :-
	diffobjeql(O,OX),
	inferred_tran(OX,T).

tran(O,T) :-
	diffobjeql(T,TX),
	inferred_tran(O,TX).

tran(O,T) :-
	diffobjeql(O,OX),
	diffobjeql(T,TX),
	inferred_tran(OX,TX).

/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% fdsig/3
fdsig(O,M,R) :-
	inferred_fdsig(O,M,R).

fdsig(O,M,R) :-
	diffobjeql(O,OX),
	inferred_fdsig(OX,M,R).

fdsig(O,M,R) :-
	diffobjeql(M,MX),
	inferred_fdsig(O,MX,R).

fdsig(O,M,R) :-
	diffobjeql(R,RX),
	inferred_fdsig(O,M,RX).

fdsig(O,M,R) :-
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_fdsig(O,MX,RX).

fdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_fdsig(OX,M,RX).

fdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_fdsig(OX,MX,R).

fdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_fdsig(OX,MX,RX).

fdsig(O,M,R) :-
	isa(O,C),
	ifdsig(C,M,R).


%% fdsigdef/2
fdsigdef(O,M) :-
	inferred_fdsigdef(O,M).

fdsigdef(O,M) :-
	diffobjeql(O,OX),
	inferred_fdsigdef(OX,M).

fdsigdef(O,M) :-
	diffobjeql(M,MX),
	inferred_fdsigdef(O,MX).

fdsigdef(O,M) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_fdsigdef(OX,MX).

fdsigdef(O,M) :-
	isa(O,C),
	ifdsigdef(C,M).

fdsigdef(O,M) :-
	fdsig(O,M,_V).
	%% Should have a cut here when XSB will allow


%% ifdsig/3
ifdsig(C,M,R) :-
	inferred_ifdsig(C,M,R).

ifdsig(C,M,R) :-
	diffobjeql(C,CX),
	inferred_ifdsig(CX,M,R).

ifdsig(C,M,R) :-
	diffobjeql(M,MX),
	inferred_ifdsig(C,MX,R).

ifdsig(C,M,R) :-
	diffobjeql(R,RX),
	inferred_ifdsig(C,M,RX).

ifdsig(C,M,R) :-
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_ifdsig(C,MX,RX).

ifdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(R,RX),
	inferred_ifdsig(CX,M,RX).

ifdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_ifdsig(CX,MX,R).

ifdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_ifdsig(CX,MX,RX).

ifdsig(C,M,R) :-
	inheritance_sub(C,S),
	ifdsig(S,M,R).


%% ifdsigdef/2
ifdsigdef(C,M) :-
	inferred_ifdsigdef(C,M).

ifdsigdef(C,M) :-
	diffobjeql(C,CX),
	inferred_ifdsigdef(CX,M).

ifdsigdef(C,M) :-
	diffobjeql(M,MX),
	inferred_ifdsigdef(C,MX).

ifdsigdef(C,M) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_ifdsigdef(CX,MX).

ifdsigdef(C,M) :-
	inheritance_sub(C,S),
	ifdsigdef(S,M).

ifdsigdef(C,M) :-
	ifdsig(C,M,_V).
	%% Should have a cut here when XSB will allow


%% mvdsig/3
mvdsig(O,M,R) :-
	inferred_mvdsig(O,M,R).

mvdsig(O,M,R) :-
	diffobjeql(O,OX),
	inferred_mvdsig(OX,M,R).

mvdsig(O,M,R) :-
	diffobjeql(M,MX),
	inferred_mvdsig(O,MX,R).

mvdsig(O,M,R) :-
	diffobjeql(R,RX),
	inferred_mvdsig(O,M,RX).

mvdsig(O,M,R) :-
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_mvdsig(O,MX,RX).

mvdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_mvdsig(OX,M,RX).

mvdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_mvdsig(OX,MX,R).

mvdsig(O,M,R) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_mvdsig(OX,MX,RX).

mvdsig(O,M,R) :-
	isa(O,C),
	imvdsig(C,M,R).


%% mvdsigdef/2
mvdsigdef(O,M) :-
	inferred_mvdsigdef(O,M).

mvdsigdef(O,M) :-
	diffobjeql(O,OX),
	inferred_mvdsigdef(OX,M).

mvdsigdef(O,M) :-
	diffobjeql(M,MX),
	inferred_mvdsigdef(O,MX).

mvdsigdef(O,M) :-
	diffobjeql(O,OX),
	diffobjeql(M,MX),
	inferred_mvdsigdef(OX,MX).

mvdsigdef(O,M) :-
	isa(O,C),
	imvdsigdef(C,M).

mvdsigdef(O,M) :-
	mvdsig(O,M,_V).
	%% Should have a cut here when XSB will allow


%% imvdsig/3
imvdsig(C,M,R) :-
	inferred_imvdsig(C,M,R).

imvdsig(C,M,R) :-
	diffobjeql(C,CX),
	inferred_imvdsig(CX,M,R).

imvdsig(C,M,R) :-
	diffobjeql(M,MX),
	inferred_imvdsig(C,MX,R).

imvdsig(C,M,R) :-
	diffobjeql(R,RX),
	inferred_imvdsig(C,M,RX).

imvdsig(C,M,R) :-
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_imvdsig(C,MX,RX).

imvdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(R,RX),
	inferred_imvdsig(CX,M,RX).

imvdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_imvdsig(CX,MX,R).

imvdsig(C,M,R) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	diffobjeql(R,RX),
	inferred_imvdsig(CX,MX,RX).

imvdsig(C,M,R) :-
	inheritance_sub(C,S),
	imvdsig(S,M,R).


%% imvdsigdef/2
imvdsigdef(C,M) :-
	inferred_imvdsigdef(C,M).

imvdsigdef(C,M) :-
	diffobjeql(C,CX),
	inferred_imvdsigdef(CX,M).

imvdsigdef(C,M) :-
	diffobjeql(M,MX),
	inferred_imvdsigdef(C,MX).

imvdsigdef(C,M) :-
	diffobjeql(C,CX),
	diffobjeql(M,MX),
	inferred_imvdsigdef(CX,MX).

imvdsigdef(C,M) :-
	inheritance_sub(C,S),
	imvdsigdef(S,M).

imvdsigdef(C,M) :-
	imvdsig(C,M,_V).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  object existence
*****************************************************************************/
exists(X) :-
	inferred_exists(X).

exists(X) :-
	diffobjeql(X,OX),
	inferred_exists(OX).


/*****************************************************************************
  basic equality maintenance
*****************************************************************************/
%% Means X,Y are equal, but not identical
diffobjeql(X,Y) :-
	inferred_objeql(X,Y),
	X \= Y.

diffobjeql(X,Y) :-
	inferred_objeql(Y,X),
	X \= Y.

diffobjeql(X,Y) :-
	diffobjeql(X,Z),
	diffobjeql(Z,Y),
	X \= Y.
