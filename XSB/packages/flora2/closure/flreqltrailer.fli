/***************************************************************************
  file: closure/flreqltrailer.fli

  Author(s): Guizhen Yang

  Contact:   xsb-contact@cs.sunysb.edu

  Copyright (C) The Research Foundation of SUNY, 1999-2001

  This is a template file to generate the FLORA trailer with
  equality maintenance.

  The actual trailer, flreqltrailer.flh,
  is generated by the predicate flCompileInclude/1 in
  flrutils.P. It is invoked by the makefile when Flora is built.
***************************************************************************/


#include "flrpred.fli"


:- import flora_warning_line/1 from flrprint.


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
%% inferred_sub_eql/2
inferred_sub_eql(X,Y) :-
	inferred_sub(X,Y).

inferred_sub_eql(X,Y) :-
	diffobjeql(X,OX),
	inferred_sub(OX,Y).

inferred_sub_eql(X,Y) :-
	diffobjeql(Y,OY),
	inferred_sub(X,OY).

inferred_sub_eql(X,Y) :-
	diffobjeql(X,OX),
	diffobjeql(Y,OY),
	inferred_sub(OX,OY).


%% super_sub/2
super_sub(X,Y) :-
	inferred_sub_eql(X,Z),
	inferred_sub_eql(Z,Y).

super_sub(X,Y) :-
	super_sub(X,Z),
	inferred_sub_eql(Z,Y).


%% immediate_sub/2
immediate_sub(X,Y) :-
	inferred_sub_eql(X,Y),
	tnot(super_sub(X,Y)).


%% sub/2
sub(X,Y) :-
	inferred_sub_eql(X,Y),
	(X=Y, flora_warning_line('cycle in class hierarchy'); true).

sub(X,Y) :-
	super_sub(X,Y),
	(X=Y, flora_warning_line('cycle in class hierarchy'); true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% inferred_isa_eql/2
inferred_isa_eql(O,C) :-
	inferred_isa(O,C).

inferred_isa_eql(O,C) :-
	diffobjeql(O,OX),
	inferred_isa(OX,C).

inferred_isa_eql(O,C) :-
	diffobjeql(C,CX),
	inferred_isa(O,CX).

inferred_isa_eql(O,C) :-
	diffobjeql(O,OX),
	diffobjeql(C,CX),
	inferred_isa(OX,CX).


%% super_isa/2
super_isa(O,C) :-
	inferred_isa_eql(O,S),
	sub(S,C).


%% ultimate_isa/2
ultimate_isa(O,C) :-
	inferred_isa_eql(O,C),
	tnot(super_isa(O,C)).


%% isa/2
isa(O,C) :-
	inferred_isa_eql(O,C).

isa(O,C) :-
	super_isa(O,C).


/*****************************************************************************
  nonmonotonic inheritance of scalar attributes among classes
*****************************************************************************/
%% inferred_ifd_eql/3
inferred_ifd_eql(C,A,V) :-
	inferred_ifd(C,A,V).

inferred_ifd_eql(C,A,V) :-
	diffobjeql(C,CX),
	inferred_ifd(CX,A,V).

inferred_ifd_eql(C,A,V) :-
	diffobjeql(V,VX),
	inferred_ifd(C,A,VX).

inferred_ifd_eql(C,A,V) :-
	diffobjeql(C,CX),
	diffobjeql(V,VX),
	inferred_ifd(CX,A,VX).


%% defined_inferred_ifd/2
defined_inferred_ifd(C,A) :-
	inferred_ifd_eql(C,A,_V).


%% conflic_ifd/2
conflict_ifd(C,A) :-
	immediate_sub(C,S1),
	immediate_sub(C,S2),
	S1 \= S2,
	ifddef(S1,A),
	ifddef(S2,A).


%% ifd/3
ifd(C,A,V) :-
	inferred_ifd_eql(C,A,V).

ifd(C,A,V) :-
	immediate_sub(C,S),
	ifd(S,A,V),
	tnot(defined_inferred_ifd(C,A)),
	tnot(conflict_ifd(C,A)).


/*****************************************************************************
  nonmonotonic inheritance of (defined) multivalued attributes among classes
*****************************************************************************/
%% inferred_imvd_eql/3
inferred_imvd_eql(C,A,V) :-
	inferred_imvd(C,A,V).

inferred_imvd_eql(C,A,V) :-
	diffobjeql(C,CX),
	inferred_imvd(CX,A,V).

inferred_imvd_eql(C,A,V) :-
	diffobjeql(V,VX),
	inferred_imvd(C,A,VX).

inferred_imvd_eql(C,A,V) :-
	diffobjeql(C,CX),
	diffobjeql(V,VX),
	inferred_imvd(CX,A,VX).


%% defined_inferred_imvd/2
defined_inferred_imvd(C,A) :-
	inferred_imvd_eql(C,A,_V).

defined_inferred_imvd(C,A) :-
	inferred_imvddef_eql(C,A).


%% conflict_imvd/2
conflict_imvd(C,A) :-
	immediate_sub(C,S1),
	immediate_sub(C,S2),
	S1 \= S2,
	imvddef(S1,A),
	imvddef(S2,A).


%% imvd
imvd(C,A,V) :-
	inferred_imvd_eql(C,A,V).

imvd(C,A,V) :-
	immediate_sub(C,S),
	imvd(S,A,V),
	tnot(defined_inferred_imvd(C,A)),
	tnot(conflict_imvd(C,A)).


%% inferred_imvddef_eql/2
inferred_imvddef_eql(C,A) :-
	inferred_imvddef(C,A).

inferred_imvddef_eql(C,A) :-
	diffobjeql(C,CX),
	inferred_imvddef(CX,A).


%% imvddef/2
imvddef(C,A) :-
	inferred_imvddef_eql(C,A).

imvddef(C,A) :-
	immediate_sub(C,S),
	imvddef(S,A),
	tnot(defined_inferred_imvd(C,A)),
	tnot(conflict_imvd(C,A)).

imvddef(C,A) :-
	imvd(C,A,_V).


/*****************************************************************************
  nonmonotonic inheritance of scalar attributes among objects
*****************************************************************************/
%% inferred_fd_eql/3
inferred_fd_eql(O,A,V) :-
	inferred_fd(O,A,V).

inferred_fd_eql(O,A,V) :-
	diffobjeql(O,OX),
	inferred_fd(OX,A,V).

inferred_fd_eql(O,A,V) :-
	diffobjeql(V,VX),
	inferred_fd(O,A,VX).

inferred_fd_eql(O,A,V) :-
	diffobjeql(O,OX),
	diffobjeql(V,VX),
	inferred_fd(OX,A,VX).


%% defined_inferred_fd
defined_inferred_fd(O,A) :-
	inferred_fd_eql(O,A,_V).


%% conflict_obj_ifd/2
conflict_obj_ifd(O,A) :-
	ultimate_isa(O,C1),
	ultimate_isa(O,C2),
	C1 \= C2,
	ifddef(C1,A),
	ifddef(C2,A).


%% fd/3
fd(O,A,V) :-
	inferred_fd_eql(O,A,V).

fd(O,A,V) :-
	ultimate_isa(O,C),
	ifd(C,A,V),
	tnot(defined_inferred_fd(O,A)),
	tnot(conflict_obj_ifd(O,A)).


/*****************************************************************************
  nonmonotonic inheritance of (defined) multivalued attributes among objects
*****************************************************************************/
%% inferred_mvd_eql/3
inferred_mvd_eql(O,A,V) :-
	inferred_mvd(O,A,V).

inferred_mvd_eql(O,A,V) :-
	diffobjeql(O,OX),
	inferred_mvd(OX,A,V).

inferred_mvd_eql(O,A,V) :-
	diffobjeql(V,VX),
	inferred_mvd(O,A,VX).

inferred_mvd_eql(O,A,V) :-
	diffobjeql(O,OX),
	diffobjeql(V,VX),
	inferred_mvd(OX,A,VX).


%% defined_inferred_mvd/2
defined_inferred_mvd(O,A) :-
	inferred_mvd_eql(O,A,_V).

defined_inferred_mvd(O,A) :-
	inferred_mvddef_eql(O,A).


%% conflict_obj_imvd/2
conflict_obj_imvd(O,A) :-
	ultimate_isa(O,C1),
	ultimate_isa(O,C2),
	C1 \= C2,
	imvddef(C1,A),
	imvddef(C2,A).


%% mvd/3
mvd(O,A,V) :-
	inferred_mvd_eql(O,A,V).

mvd(O,A,V) :-
	ultimate_isa(O,C),
	imvd(C,A,V),
	tnot(defined_inferred_mvd(O,A)),
	tnot(conflict_obj_imvd(O,A)).


%% inferred_mvddef_eql/2
inferred_mvddef_eql(O,A) :-
	inferred_mvddef(O,A).

inferred_mvddef_eql(O,A) :-
	diffobjeql(O,OX),
	inferred_mvddef(OX,A).


%% mvddef/2
mvddef(O,A) :-
	inferred_mvddef_eql(O,A).

mvddef(O,A) :-
	ultimate_isa(O,C),
	imvddef(C,A),
	tnot(defined_inferred_mvd(O,A)),
	tnot(conflict_obj_imvd(O,A)).

mvddef(O,A) :-
	mvd(O,A,_V).


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
meth(O,M) :-
	inferred_meth(O,M).

meth(O,M) :-
	diffobjeql(O,OX),
	inferred_meth(OX,M).

meth(O,M) :-
	isa(O,C),
	imeth(C,M).


imeth(C,M) :-
	inferred_imeth(C,M).

imeth(C,M) :-
	diffobjeql(C,CX),
	inferred_imeth(CX,M).

imeth(C,M) :-
	sub(C,S),
	imeth(S,M).


/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
tran(O,T) :-
	inferred_tran(O,T).

tran(O,T) :-
	diffobjeql(O,OX),
	inferred_tran(OX,T).


/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% fdsig/3
fdsig(O,MethodArgs,R) :-
	inferred_fdsig(O,MethodArgs,R).

fdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	inferred_fdsig(OX,MethodArgs,R).

fdsig(O,MethodArgs,R) :-
	diffobjeql(R,RX),
	inferred_fdsig(O,MethodArgs,RX).

fdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_fdsig(OX,MethodArgs,RX).

fdsig(O,MethodArgs,R) :-
	isa(O,C),
	ifdsig(C,MethodArgs,R).


%% ifdsig/3
ifdsig(O,MethodArgs,R) :-
	inferred_ifdsig(O,MethodArgs,R).

ifdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	inferred_ifdsig(OX,MethodArgs,R).

ifdsig(O,MethodArgs,R) :-
	diffobjeql(R,RX),
	inferred_ifdsig(O,MethodArgs,RX).

ifdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_ifdsig(OX,MethodArgs,RX).

ifdsig(S,MethodArgs,R) :-
	sub(S,C),
	ifdsig(C,MethodArgs,R).


%% mvdsig/3
mvdsig(O,MethodArgs,R) :-
	inferred_mvdsig(O,MethodArgs,R).

mvdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	inferred_mvdsig(OX,MethodArgs,R).

mvdsig(O,MethodArgs,R) :-
	diffobjeql(R,RX),
	inferred_mvdsig(O,MethodArgs,RX).

mvdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_mvdsig(OX,MethodArgs,RX).

mvdsig(O,MethodArgs,R) :-
	isa(O,C),
	imvdsig(C,MethodArgs,R).


%% imvdsig/3
imvdsig(O,MethodArgs,R) :-
	inferred_imvdsig(O,MethodArgs,R).

imvdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	inferred_imvdsig(OX,MethodArgs,R).

imvdsig(O,MethodArgs,R) :-
	diffobjeql(R,RX),
	inferred_imvdsig(O,MethodArgs,RX).

imvdsig(O,MethodArgs,R) :-
	diffobjeql(O,OX),
	diffobjeql(R,RX),
	inferred_imvdsig(OX,MethodArgs,RX).

imvdsig(S,MethodArgs,R) :-
	sub(S,C),
	imvdsig(C,MethodArgs,R).


/*****************************************************************************
  object existence
*****************************************************************************/
exists(X) :-
	inferred_exists(X).

exists(X) :-
	diffobjeql(X,OX),
	inferred_exists(OX).


/*****************************************************************************
  basic equality maintenance
*****************************************************************************/
diffobjeql(X,Y) :-
	inferred_objeql(X,Y),
	X \= Y.

diffobjeql(X,Y) :-
	inferred_objeql(Y,X),
	X \= Y.

diffobjeql(X,Y) :-
	diffobjeql(X,Z),
	diffobjeql(Z,Y),
	X \= Y.


