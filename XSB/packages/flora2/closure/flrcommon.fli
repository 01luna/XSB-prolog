/***************************************************************************
  file: closure/flrcommon.fli

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 1999-2001
***************************************************************************/


#include "flora_wspredicates.flh"


/***************************************************************************
  tabling directives

  Note: Tabling inferred_* predicates appears to be not necessary
***************************************************************************/
:- table
	sub/2,		%% inferred_sub/2,
	isa/2,		%% inferred_isa/2,
	fd/3,		%% inferred_fd/3,
	ifd/3,		%% inferred_ifd/3,
	mvd/3,		%% inferred_mvd/3,
	imvd/3,		%% inferred_imvd/3,
	mvddef/2,	%% inferred_mvddef/2,
	imvddef/2,	%% inferred_imvddef/2,
	fdsig/3,	%% inferred_fdsig/3,
	fdsigdef/2,	%% inferred_fdsigdef/2,
	ifdsig/3,	%% inferred_ifdsig/3,
	ifdsigdef/2,	%% inferred_ifdsigdef/2,
	mvdsig/3,	%% inferred_mvdsig/3,
	mvdsigdef/2,	%% inferred_mvdsigdef/2,
	imvdsig/3,	%% inferred_imvdsig/3,
	imvdsigdef/2,	%% inferred_imvdsigdef/2,
	meth/2,		%% inferred_meth/2,
	imeth/2,	%% inferred_imeth/2,
	exists/1,	%% inferred_exists/1,
	diffobjeql/2,	%% inferred_objeql/2,
	fddef/2,
	ifddef/2.


:- table
	local_ifd/2,
	local_fd/2,
	local_imvd/2,
	local_mvd/2,
	%%override_class_ifd/3,
	%%multiple_class_ifd/3,
	candidate_class_ifd/3,
	%%override_object_ifd/3,
	%%multiple_object_ifd/3,
	candidate_object_ifd/3,
	%%override_class_imvd/3,
	%%multiple_class_imvd/3,
	candidate_class_imvd/3,
	%%override_object_imvd/3,
	%%multiple_object_imvd/3,
	candidate_object_imvd/3.


/*
:- table
	inferred_sub_eql/2,
	inferred_isa_eql/2,
	inferred_ifd_eql/3,
	inferred_imvd_eql/3,
	inferred_imvddef_eql/2,
	inferred_fd_eql/3,
	inferred_mvd_eql/3,
	inferred_mvddef_eql/2.
*/


/***************************************************************************
  inferred predicates

  These wrapper predicates with the 'inferred_' prefix are needed to make
  the trailer dynamically loadable. Note that the program rules use wrapper
  predicates with the 'derived_' prefix.
***************************************************************************/
inferred_sub(X,Y) :- derived_sub(X,Y).
inferred_isa(O,C) :- derived_isa(O,C).
inferred_fd(O,A,V) :- derived_fd(O,A,V).
inferred_ifd(C,A,V) :- derived_ifd(C,A,V).
inferred_mvd(O,A,V) :- derived_mvd(O,A,V).
inferred_imvd(C,A,V) :- derived_imvd(C,A,V).
inferred_mvddef(O,A) :- derived_mvddef(O,A).
inferred_imvddef(C,A) :- derived_imvddef(C,A).
inferred_fdsig(O,MethodArgs,R) :- derived_fdsig(O,MethodArgs,R).
inferred_fdsigdef(O,MethodArgs) :- derived_fdsigdef(O,MethodArgs).
inferred_ifdsig(O,MethodArgs,R) :- derived_ifdsig(O,MethodArgs,R).
inferred_ifdsigdef(O,MethodArgs) :- derived_ifdsigdef(O,MethodArgs).
inferred_mvdsig(O,MethodArgs,R) :- derived_mvdsig(O,MethodArgs,R).
inferred_mvdsigdef(O,MethodArgs) :- derived_mvdsigdef(O,MethodArgs).
inferred_imvdsig(O,MethodArgs,R) :- derived_imvdsig(O,MethodArgs,R).
inferred_imvdsigdef(O,MethodArgs) :- derived_imvdsigdef(O,MethodArgs).
inferred_meth(O,M) :- derived_meth(O,M).
inferred_imeth(C,M) :- derived_imeth(C,M).
inferred_tran(O,T) :- derived_tran(O,T).
inferred_exists(X) :- derived_exists(X).
inferred_objeql(X,Y) :- derived_objeql(X,Y).


/*****************************************************************************
  inheritance book-keeping information for scalar methods

  Note that the argument "Class" here is considered as a class.
  It is about inheritance from superclasses to subclasses.
*****************************************************************************/
override_class_ifd(C,MethSign,Class) :-
	sub(X,C),
	sub(Class,X),
	X \= C,
	X \= Class,
	local_ifd(X,MethSign).


candidate_class_ifd(C,MethSign,Class) :-
	var(MethSign),
	!,
	sub(Class,C),
	local_ifd(C,MethSign),
	C \= Class,
	sk_not(override_class_ifd(C,MethSign,Class)).

candidate_class_ifd(C,MethSign,Class) :-
	local_ifd(C,MethSign),
	sub(Class,C),
	C \= Class,
	sk_not(override_class_ifd(C,MethSign,Class)).


multiple_class_ifd(C,MethSign,Class) :-
	candidate_class_ifd(X,MethSign,Class),
	X \= C.


/*****************************************************************************
  inheritance book-keeping information for scalar methods

  Note that the argument "Object" here is considered as an object.
  It is about inheritance from superclasses to instances/members.
*****************************************************************************/
override_object_ifd(C,MethSign,Object) :-
	sub(X,C),
	isa(Object,X),
	X \= C,
	X \= Object,
	local_ifd(X,MethSign).


candidate_object_ifd(C,MethSign,Object) :-
	var(MethSign),
	!,
	isa(Object,C),
	local_ifd(C,MethSign),
	C \= Object,
	sk_not(override_object_ifd(C,MethSign,Object)).

candidate_object_ifd(C,MethSign,Object) :-
	local_ifd(C,MethSign),
	isa(Object,C),
	C \= Object,
	sk_not(override_object_ifd(C,MethSign,Object)).


multiple_object_ifd(C,MethSign,Object) :-
	candidate_object_ifd(X,MethSign,Object),
	X \= C.


/*****************************************************************************
  inheritance book-keeping information for multivalued methods

  Note that the argument "Class" here is considered as a class.
  It is about inheritance from superclasses to subclasses.
*****************************************************************************/
override_class_imvd(C,MethSign,Class) :-
	sub(X,C),
	sub(Class,X),
	X \= C,
	X \= Class,
	local_imvd(X,MethSign).


candidate_class_imvd(C,MethSign,Class) :-
	var(MethSign),
	!,
	sub(Class,C),
	local_imvd(C,MethSign),
	C \= Class,
	sk_not(override_class_imvd(C,MethSign,Class)).

candidate_class_imvd(C,MethSign,Class) :-
	local_imvd(C,MethSign),
	sub(Class,C),
	C \= Class,
	sk_not(override_class_imvd(C,MethSign,Class)).


multiple_class_imvd(C,MethSign,Class) :-
	candidate_class_imvd(X,MethSign,Class),
	X \= C.


/*****************************************************************************
  inheritance book-keeping information for multivalued methods

  Note that the argument "Object" here is considered as an object.
  It is about inheritance from superclasses to instances/members.
*****************************************************************************/
override_object_imvd(C,MethSign,Object) :-
	sub(X,C),
	isa(Object,X),
	X \= C,
	X \= Object,
	local_imvd(X,MethSign).


candidate_object_imvd(C,MethSign,Object) :-
	var(MethSign),
	!,
	isa(Object,C),
	local_imvd(C,MethSign),
	C \= Object,
	sk_not(override_object_imvd(C,MethSign,Object)).

candidate_object_imvd(C,MethSign,Object) :-
	local_imvd(C,MethSign),
	isa(Object,C),
	C \= Object,
	sk_not(override_object_imvd(C,MethSign,Object)).


multiple_object_imvd(C,MethSign,Object) :-
	candidate_object_imvd(X,MethSign,Object),
	X \= C.


/***************************************************************************
  defined scalar attributes
***************************************************************************/
fddef(O,A) :- fd(O,A,_V).

ifddef(C,A) :- ifd(C,A,_V).


/***************************************************************************
  multivalued attributes inclusion
***************************************************************************/
mvdinc(_O,_M,[]) :- !.
mvdinc(O,M,[H|T]) :- mvd(O,M,H), mvdinc(O,M,T).


imvdinc(_O,_M,[]) :- !.
imvdinc(O,M,[H|T]) :- imvd(O,M,H), imvdinc(O,M,T).


/****************************************************************************
  multivalued attributes aggregation

  Note: (1) These two predicates always succeeds.
        (2) These two predicates are not tabled.
****************************************************************************/
mvdtolist(O,M,L) :-
	mvddef(O,M),
	findall(V,mvd(O,M,V),L).

mvdtolist(O,M,[]) :-
	sk_not(mvddef(O,M)).


imvdtolist(O,M,L) :-
	imvddef(O,M),
	findall(V,imvd(O,M,V),L).
 
imvdtolist(O,M,[]) :-
	sk_not(imvddef(O,M)).


/****************************************************************************
  exists/1
****************************************************************************/
exists(X) :- fd(X,_,_).
exists(X) :- fd(_,_,X).
exists(X) :- mvd(X,_,_).
exists(X) :- mvd(_,_,X).
exists(X) :- mvddef(X,_).
exists(X) :- ifd(X,_,_).
exists(X) :- ifd(_,_,X).
exists(X) :- imvd(X,_,_).
exists(X) :- imvd(_,_,X).
exists(X) :- imvddef(X,_).
exists(X) :- isa(X,_).
exists(X) :- isa(_,X).
exists(X) :- sub(X,_).
exists(X) :- sub(_,X).
exists(X) :- meth(X,_).
exists(X) :- imeth(X,_).


/****************************************************************************
  objeql/2
****************************************************************************/
objeql(X,Y) :- (nonvar(X); nonvar(Y)), X=Y.
objeql(X,Y) :- diffobjeql(X,Y).


/****************************************************************************
    Introduced in support of the debugger
****************************************************************************/
%% like sub, but the debugger won't trace it
silent_sub(C,S) :- sub(C,S).

%% like sub, but the debugger will print it specially and won't trace inside
inheritance_sub(C,S) :- sub(C,S).

%% Like inferred_* but the debugger will print it in a special way
inheritance_ifd(C,M,V) :- inferred_ifd(C,M,V).
inheritance_imvd(C,M,V) :- inferred_imvd(C,M,V).
inheritance_imvddef(C,M) :- inferred_imvddef(C,M).

%% Like inferred_* but the debugger will print it in a special way
inheritance_ifd_eql(C,M,V) :- inferred_ifd_eql(C,M,V).
inheritance_imvd_eql(C,M,V) :- inferred_imvd_eql(C,M,V).
inheritance_imvddef_eql(C,M) :- inferred_imvddef_eql(C,M).
