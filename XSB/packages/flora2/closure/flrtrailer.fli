/***************************************************************************
  file: closure/flrtrailer.fli

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) The Research Foundation of SUNY, 1999-2001

  This is a template file to generate the FLORA trailer that has no
  equality maintenance.

  The actual trailer, flrltrailer.flh,
   is generated by the predicate flCompileInclude/1 in
  flrutils.P. It is invoked by the makefile when Flora is built.
***************************************************************************/


#include "includes/flrpred.fli"



/***************************************************************************
  closure rules for X::Y
***************************************************************************/
super_sub(X,Y) :-
	inferred_sub(X,Z),
	inferred_sub(Z,Y).

super_sub(X,Y) :-
	super_sub(X,Z),
	inferred_sub(Z,Y).


immediate_sub(X,Y) :-
	inferred_sub(X,Y),
	tnot(super_sub(X,Y)).


sub(X,Y) :-
	inferred_sub(X,Y),
	( X=Y, flora_warning_line('cycle in class hierarchy')@prolog(flrutils)
	;
	  true
	).

sub(X,Y) :-
	super_sub(X,Y),
	( X=Y, flora_warning_line('cycle in class hierarchy')@prolog(flrutils)
	;
	  true
	).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
super_isa(O,C) :-
	inferred_isa(O,S),
	sub(S,C).


immediate_isa(O,C) :-
	inferred_isa(O,C),
	tnot(super_isa(O,C)).


isa(O,C) :-
	inferred_isa(O,C).

isa(O,C) :-
	silent_sub(S,C),
	inferred_isa(O,S).


/*****************************************************************************
  nonmonotonic inheritance of scalar attributes among classes
*****************************************************************************/
defined_inferred_ifd(C,A) :-
	inferred_ifd(C,A,_V).


conflict_ifd(C,A) :-
	immediate_sub(C,S1),
	immediate_sub(C,S2),
	S1 \= S2,
	ifddef(S1,A),
	ifddef(S2,A).


ifd(C,A,V) :-
	inferred_ifd(C,A,V).

ifd(C,A,V) :-
	ifd(S,A,V),
	immediate_sub(C,S),
	tnot(defined_inferred_ifd(C,A)),
	tnot(conflict_ifd(C,A)).


/*****************************************************************************
  nonmonotonic inheritance of (defined) multivalued attributes among classes
*****************************************************************************/
defined_inferred_imvd(C,A) :-
	inferred_imvd(C,A,_V).

defined_inferred_imvd(C,A) :-
	inferred_imvddef(C,A).


conflict_imvd(C,A) :-
	immediate_sub(C,S1),
	immediate_sub(C,S2),
	S1 \= S2,
	imvddef(S1,A),
	imvddef(S2,A).


imvd(C,A,V) :-
	inferred_imvd(C,A,V).

imvd(C,A,V) :-
	imvd(S,A,V),
	immediate_sub(C,S),
	tnot(defined_inferred_imvd(C,A)),
	tnot(conflict_imvd(C,A)).


imvddef(C,A) :-
	inferred_imvddef(C,A).

imvddef(C,A) :-
	imvddef(S,A),
	immediate_sub(C,S),
	tnot(defined_inferred_imvd(C,A)),
	tnot(conflict_imvd(C,A)).

imvddef(C,A) :-
	imvd(C,A,_V).


/*****************************************************************************
  nonmonotonic inheritance of scalar attributes among objects
*****************************************************************************/
defined_inferred_fd(O,A) :-
	inferred_fd(O,A,_V).


conflict_obj_ifd(O,A) :-
	immediate_isa(O,C1),
	immediate_isa(O,C2),
	C1 \= C2,
	ifddef(C1,A),
	ifddef(C2,A).


fd(O,A,V) :-
	inferred_fd(O,A,V).

fd(O,A,V) :-
	ifd(C,A,V),
	immediate_isa(O,C),
	tnot(defined_inferred_fd(O,A)),
	tnot(conflict_obj_ifd(O,A)).


/*****************************************************************************
  nonmonotonic inheritance of (defined) multivalued attributes among objects
*****************************************************************************/
defined_inferred_mvd(O,A) :-
	inferred_mvd(O,A,_V).

defined_inferred_mvd(O,A) :-
	inferred_mvddef(O,A).


conflict_obj_imvd(O,A) :-
	immediate_isa(O,C1),
	immediate_isa(O,C2),
	C1 \= C2,
	imvddef(C1,A),
	imvddef(C2,A).


mvd(O,A,V) :-
	inferred_mvd(O,A,V).

mvd(O,A,V) :-
	imvd(C,A,V),
	immediate_isa(O,C),
	tnot(defined_inferred_mvd(O,A)),
	tnot(conflict_obj_imvd(O,A)).


mvddef(O,A) :-
	inferred_mvddef(O,A).

mvddef(O,A) :-
	imvddef(C,A),
	immediate_isa(O,C),
	tnot(defined_inferred_mvd(O,A)),
	tnot(conflict_obj_imvd(O,A)).

mvddef(O,A) :-
	mvd(O,A,_V).


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
meth(O,M) :-
	inferred_meth(O,M).

meth(O,M) :-
	isa(O,C),
	imeth(C,M).


imeth(C,M) :-
	inferred_imeth(C,M).

imeth(C,M) :-
	inheritance_sub(C,S),
	imeth(S,M).


/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
tran(O,T) :-
	inferred_tran(O,T).


/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
fdsig(O,MethodArgs,R) :-
	inferred_fdsig(O,MethodArgs,R).

fdsig(O,MethodArgs,R) :-
	isa(O,C),
	ifdsig(C,MethodArgs,R).


ifdsig(O,MethodArgs,R) :-
	inferred_ifdsig(O,MethodArgs,R).

ifdsig(S,MethodArgs,R) :-
	inheritance_sub(S,C),
	ifdsig(C,MethodArgs,R).


mvdsig(O,MethodArgs,R) :-
	inferred_mvdsig(O,MethodArgs,R).

mvdsig(O,MethodArgs,R) :-
	isa(O,C),
	imvdsig(C,MethodArgs,R).


imvdsig(O,MethodArgs,R) :-
	inferred_imvdsig(O,MethodArgs,R).

imvdsig(S,MethodArgs,R) :-
	inheritance_sub(S,C),
	imvdsig(C,MethodArgs,R).


/*****************************************************************************
  object existence
*****************************************************************************/
exists(X) :-
	inferred_exists(X).


/*****************************************************************************
  equality maintenance
*****************************************************************************/
diffobjeql(X,Y) :-
	inferred_objeql(X,Y),
	X \= Y.


