
:- [altcdf].

:- import load_extensional_facts/1 from cdf_io.
:- import update_all_components/2 ,
	   load_component/3 from cdf_components.

reset:- 
	shell('\rm -r cdfcomp1/*').

updtest1:- 
	load_extensional_facts('cdftest1'),
	update_all_components('mytest/cdfcomp1',[action(create)]).

loadtest1:- 
	load_component(testo1,'mytest/cdfcomp1',[]).

loadtest1a:- 
	load_component(test,'mytest/cdfcomp1',[]).

loadtest2:- 
	load_component(testo1,'mytest/cdfcomp1',[force(yes)]).

create_new_version :-
	assert(cdf_flags(dirty,test)),
	update_all_components('mytest/cdfcomp1',[action(in_place)]).

version_conflict :-
	load_component(test,'mytest/cdfcomp1',[version(0)]),
	load_component(testo1,'mytest/cdfcomp1',[version(1)]).

create_second_copy :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	update_all_components('mytest/cdfcomp2',[action(create)]).

path_conflict :-
	load_component(test,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[]).

force_path_conflict :-
	load_component(test,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[action(union)]).

update_in_place_after_conflict :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp2',[action(union)]),
	%% should not update
	update_all_components('mytest/cdfcomp2',[action(in_place)]).

load_twice :-
	load_component(testo1,'mytest/cdfcomp1',[]),
	load_component(testo1,'mytest/cdfcomp1',[force(yes)]).
	


end_of_file.

try in different sessions

updtest1.

 loadtest1, loadtest2, 

updtest1  

oadtest1,loadtest1.
  