% TLS: keep all this in usermod.

:- import check_ground/2, check_types/2, check_identity/2,
	classify_if_necessary/2
	from cdf_checks.

/* cdf flags: 
caching
logging
*/

% keep a table with all possible flags here.
cdf_flag(dirty).
cdf_flag(componentUpdate).
cdf_flag(componentLoad).
cdf_flag(newExtTermSingle).
cdf_flag(newExtTermBatch).
cdf_flag(retractallExtTermSingle).


% initial_cdf_flag/2 facts can be overridden by declaring
% corresponding user_cdf_flag/2 facts in $(HOME)/.xsb/xsbrc.P

%initial_cdf_flag(dirty,<component>).
initial_cdf_flag(componentUpdate,check(A,B,[classify_if_necessary(A,B)])).
initial_cdf_flag(newExtTermSingle,check(A,B,[check_ground(A,B),
				   	     check_types(A,B),
					     check_identity(A,B)])).
initial_cdf_flag(newExtTermBatch,check(A,B,[check_ground(A,B),
				   	     check_types(A,B),
					     check_identity(A,B)])).


:- dynamic cdf_flags/2.
:- index(cdf_flags/2,trie).

:- dynamic caching_cdf/1.
:- dynamic cdf_dirty/1.
:- dynamic using_xj/0.

component_table_ext(isa_ext(A,B),A,[B]).
component_table_ext(hasAttr_ext(A,B,C),B,[A,C]).
component_table_ext(allAttr_ext(A,B,C),B,[A,C]).
component_table_ext(classHasAttr_ext(A,B,C),B,[A,C]).

component_table_int(isa_int(_,_),1,[arg(2,warn)]).
component_table_int(hasAttr_int(_,_,_),2,[arg(1,warn),arg(3,no_warn)]).
component_table_int(allAttr_int(_,_,_),2,[arg(1,warn),arg(3,no_warn)]).
component_table_int(classHasAttr_int(_,_,_),2,[arg(1,warn),arg(3,no_warn)]).

component_table_int(assert_cdf_int(_),null,[]).
component_table_int(retractall_cdf_int(_),null,[]).

