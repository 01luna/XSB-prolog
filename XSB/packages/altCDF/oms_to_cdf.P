:- import newExtTerm/1, initialize_state/0 from cdf_init_cdf.

% loads internal OMS facts into memory and converts them into CDF facts that can be dumped using dump_extensional_facts/1 after that.
oms_to_cdf(OMSDir):-
	initialize_state, % for settring up correct dynamic declarations, etc.
	oms_fix_dir(OMSDir,OMSDirS),
	dir_load_dync(OMSDirS,schema_oms),
	dir_load_dync(OMSDirS,data_oms),
	newExtTerm(isa_ext(crid('Name',cdf), crid('CDF Class-Object Relations', cdf))),
	newExtTerm(isa_ext(crrid('Name',cdf), crid('CDF Class-Object Relations', cdf))),
	oms_to_cdf_subclass,
%	oms_to_cdf_class,
	oms_to_cdf_irel,
	oms_to_cdf_schrel,
	oms_to_cdf_strel,
	oms_to_cdf_object,
	oms_to_cdf_memberof,
	oms_to_cdf_attribute,
	oms_to_cdf_attribute_object,
	retract_oms_facts.

% since there is no equivalent for class ('OMS Relations', 'OMS') anymore
% immediate_subclass for it and of it are ignored,
% missing links are substituted by existing facts of new standard CDF 
oms_to_cdf_subclass:-
	oms_sc(SubCid, SupCid),
	(is_subclass(SupCid, 'OMS Inheritable Relationships', 'OMS')
	 ->	TypedSupCid = rid(SupCid),
		TypedSubCid = rid(SubCid)
	 ;	(is_subclass(SupCid, 'OMS Set-Valued Relations', 'OMS')
		 ->	(check_for_crrid(SupCid) % check for crrid vs crid
			 ->	TypedSupCid = crrid(SupCid),
				TypedSubCid = crrid(SubCid)
			 ;	TypedSupCid = crid(SupCid),
				(check_for_crrid(SubCid)
				 ->	TypedSubCid = crrid(SubCid)
				 ;	TypedSubCid = crid(SubCid)
				)
			)
		 ;	TypedSupCid = cid(SupCid),
			TypedSubCid = cid(SubCid)
		)
	),
	get_cdf_id(TypedSubCid,CDFSubId),
	get_cdf_id(TypedSupCid,CDFSupId),
	newExtTerm(isa_ext(CDFSubId, CDFSupId)),
	fail.
oms_to_cdf_subclass.

check_for_crrid(Rid):-
	oms_strel(Rid0,Rid,_),
	is_subclass(Rid0, 'OMS Inheritable Relationships', 'OMS').

oms_to_cdf_class:-
	oms_cn(_, Name, NatId, Source),
	\+(Source = 'OMS'), 
	\+(Name = NatId),
	atomic(NatId), % do not keep names for product types
	(convert_system_name(cid(NatId, Source), NewId), isa_ext(NewId,_)
	 ->	newExtTerm(isa_ext(crid('Name', NewSource), crid('Name', cdf))),
		newExtTerm(classHasAttr_ext(NewId, crid('Name', NewSource), oid(Name, cdfpt)))
	 ;	convert_system_name(rid(NatId, Source), NewId), isa_ext(NewId,_), 
		newExtTerm(isa_ext(crrid('Name', NewSource), crrid('Name', cdf))),
		newExtTerm(classHasAttr_ext(NewId, crrid('Name',NewSource), oid(Name, cdfpt)))
	),
	fail.
oms_to_cdf_class.

oms_to_cdf_irel:-
	oms_rln(Cid, Rid, Tid),
	get_cdf_id(cid(Cid),Source),
	get_cdf_id(rid(Rid),Rel),
	get_cdf_id(cid(Tid),Target),
	newExtTerm(hasAttr_ext(Source, Rel, Target)),
	fail.
oms_to_cdf_irel.

oms_to_cdf_schrel:-
	oms_schrel(Cid, Rid, Tid),
	get_cdf_id(cid(Cid),Source),
	get_cdf_id(rid(Rid),Rel),
	get_cdf_id(cid(Tid),Target),
	newExtTerm(allAttr_ext(Source, Rel, Target)),
	fail.
oms_to_cdf_schrel.

oms_to_cdf_strel:-
	oms_strel(Cid, Rid, Tid),
	get_cdf_id(cid(Tid),Target),
	(get_cdf_id(cid(Cid),Source), 
	 isa_ext(Source,_)
	 ->	get_cdf_id(crid(Rid),Rel)
	 ;	get_cdf_id(rid(Cid),Source),  % is_subclass(SupCid, 'OMS Inheritable Relationships', 'OMS')
		isa_ext(Source,_),
		get_cdf_id(crrid(Rid),Rel)
	),
	newExtTerm(classHasAttr_ext(Source, Rel, Target)),
	fail.
oms_to_cdf_strel.

/*oms_to_cdf_object:-
	oms_obj(_,Name,NatId,Source),
	fail.*/
oms_to_cdf_object.

oms_to_cdf_memberof:-
	oms_mo(SubOid, SupCid),
	oms_obj(SubOid,_,SubNatId,SubSource),
	convert_system_name(oid(SubNatId, SubSource), CDFSubId),
	get_cdf_id(cid(SupCid),CDFSupId),
	newExtTerm(isa_ext(CDFSubId, CDFSupId)),
	fail.
oms_to_cdf_memberof.

oms_to_cdf_attribute:-
	oms_at(Oid, Rid, Tid),
	oms_obj(Oid,_,ONatId,OSource),
	convert_system_name(oid(ONatId,OSource), CDFOId),
	get_cdf_id(rid(Rid),CDFRId),
	get_cdf_id(cid(Tid),CDFTId),
	newExtTerm(hasAttr_ext(CDFOId, CDFRId, CDFTId)),
	fail.
oms_to_cdf_attribute.

oms_to_cdf_attribute_object:-
	oms_ao(Oid, Rid, TOid),
	oms_obj(Oid,_,ONatId,OSource),
	convert_system_name(oid(ONatId,OSource), CDFOId),
	get_cdf_id(rid(Rid),CDFRId),
	oms_obj(TOid,_,TONatId,TOSource),
	convert_system_name(oid(TONatId,TOSource), CDFTId),
	newExtTerm(hasAttr_ext(CDFOId, CDFRId, CDFTId)),
	fail.
oms_to_cdf_attribute_object.

get_cdf_id(cid(Cid), NewId):-
	oms_cn(Cid, _, CNatId, CSource),
	convert_system_name(cid(CNatId, CSource), NewId).
get_cdf_id(rid(Cid), NewId):-
	oms_cn(Cid, _, CNatId, CSource),
	convert_system_name(rid(CNatId, CSource), NewId).
get_cdf_id(crid(Cid),NewId):-
	oms_cn(Cid, _, CNatId, CSource),
	convert_system_name(crid(CNatId, CSource), NewId).
get_cdf_id(crrid(Cid),NewId):-
	oms_cn(Cid, _, CNatId, CSource),
	convert_system_name(crrid(CNatId, CSource), NewId).

/*
get_cdf_id(Cid,NewNatId,NewSource):-
	oms_cn(Cid, _, CNatId, CSource),
	convert_system_name(CNatId, CSource, NewNatId, NewSource).
*/

is_subclass(Cid, ParNatId, ParSource):-
	oms_cn(Cid, _, ParNatId, ParSource), !.
is_subclass(Cid, ParNatId, ParSource):-
	oms_sc(Cid,PCid),
	is_subclass(PCid, ParNatId, ParSource).

retract_oms_facts:-
	retractall(oms_cn(_,_,_,_)),
	retractall(oms_sc(_,_)),
	retractall(oms_rln(_,_,_)),
	retractall(oms_schrel(_,_,_)),
	retractall(oms_strel(_,_,_)),
	retractall(oms_obj(_,_,_,_)),
	retractall(oms_mo(_,_)),
	retractall(oms_at(_,_,_)),
	retractall(oms_ao(_,_,_)).

%------------------------------------------
:- import append/3 from basics.
:- import concat_atom/2 from string.
:- import load_dync/2 from consult.

oms_fix_dir(Dir,DirS) :-
	(Dir == ''
	 ->	DirS = Dir
	 ;	friendly_atom_codes(Dir,DirC),
		(append(_,[0'/],DirC)
		 ->	DirS = Dir
		 ;	append(DirC,[0'/],DirSC),
			friendly_atom_codes(DirS,DirSC)
		)
	).

friendly_atom_codes(A,Codes):- 
	(atom(A) ; var(A)) -> atom_codes(A,Codes)
	   ; writeln(non_atomic(A)),
	     atom_codes(A,Codes) . 	% and so abort.

dir_load_dync(Dir,Base) :-
	concat_atom([Dir,Base,'.P'],File),!,
	(load_dync(File,0) 		% i.e. use asserta
              -> true
	  ; oms_warning(permission,('File does not exist ',
                                    'or is not readable: ',File))).
%------------------------------------------

% Conversion Table
convert_system_name(cid('OMS Root', 'OMS'), cid('CDF Classes', cdf)):- !. 
convert_system_name(cid(integer(Int), 'OMS'), Id):- !,
	(var(Int)
	 ->	Id = cid(allIntegers, cdf)
	 ;	Id = oid(Int, cdfpt)
	).
convert_system_name(cid(atom(Atom), 'OMS'), Id):- !,
	(var(Atom)
	 ->	Id = cid(allAtoms, cdf)
	 ;	Id = oid(Atom, cdfpt)
	).
convert_system_name(aint(AInt), 'OMS', Id):- !,
	(var(AInt)
	 ->	Id = cid(allAtomInts, cdf)
	 ;	Id = oid(AInt, cdfpt)
	).
convert_system_name(float(Float), 'OMS', Id):- !,
	(var(Float)
	 ->	Id = cid(allFloats, cdf)
	 ;	Id = oid(Float, cdfpt)
	).
convert_system_name(boolean(Bool), 'OMS', Id):- !,
	(var(Bool)
	 ->	Id = cid(allBoolean, cdf)
	 ;	Id = oid(Bool, cdfpt)
	).
convert_system_name(clause(Clause,List), 'OMS', Id):- !,
	(var(Clause), var(List)
	 ->	Id = cid('Terms', cdf)
	 ;	Id = toid(Clause, cdfpt)
	).
convert_system_name(rid('OMS Inheritable Relationships', 'OMS'), rid('CDF Object-Object Relations', cdf)):- !.
convert_system_name(crid('OMS Set-Valued Relations', 'OMS'), crid('CDF Class-Object Relations', cdf)):- !.
convert_system_name(cid('OMS Primitive Types', 'OMS'), cid('CDF Primitive Types', cdf)):- !.
convert_system_name(cid('[]', 'OMS'), cid('[]', cdf)):- !.
convert_system_name(cid('OMS Relations', 'OMS'), _, _):- !, fail. % no such class anymore
convert_system_name(cid('OMS', 'OMS'), cid(cdf, cdf)):- !.
convert_system_name(cid('OMS Component', 'OMS'), cid('CDF Component', cdf)):- !. % is it there?
convert_system_name(rid('componentDepends', 'OMS'), rid('componentDepends', cdf)):- !.
convert_system_name(rid('hasPath', 'OMS'), rid('hasPath', cdf)):- !.
convert_system_name(rid('hasVersion', 'OMS'), rid('hasVersion', cdf)):- !.
convert_system_name(cid(compName('OMS', 'OMS', PathId, PathSource), 'OMS'),
		    cid(compName(cid(cdf,cdf), NewPathId), cdf)):- !,
	convert_system_name(cid(PathId, PathSource), NewPathId).	% what about component/3 ?
convert_system_name(cid(NatId, Source), cid(NewNatId, Source)):-
	structure(NatId), !,
	NatId =.. [F|Args],
	convert_system_name_list(Args, NewArgs),
	NewNatId =.. [F|NewArgs].
convert_system_name(Id, Id).

convert_system_name_list([], []).
convert_system_name_list([Id, S |Args], [Id1 |NewArgs]):-
	convert_system_name(cid(Id, S), Id1),
	convert_system_name_list(Args, NewArgs).

