/* File:      flora2.P
**
** Author(s): Michael Kifer
**            Guizhen Yang
**
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** 
*/


:- compiler_options([xpp_on,sysmod]).


:- import assert/1, retract/1 from assert.

:- import consult/1, '.'/2  from consult.

:- import
	bootstrap_package/2,
	package_configuration/2,
	unload_package/1
   from packaging.

:- import
	flImportHiLog/4,
	flImportFloraPred/4
   from flrimport.

:- import flora_wssymbol/3 from flrwrapper.

:- import current_predicate/1 from curr_sym.

:- import
	flora_load_module_internal/2, flora_load_module_internal/1,
	flora_compile_internal/2, flora_compile_internal/1
   from flrutils.

:- import fmt_write_string/3 from file_io.

:- import flora_shell_loop/0 from usermod.

:- import hide_this_show/2 from usermod.

:- import slash/1 from machine.

:- import (dynamic)/1, assert/1 from assert.

:- import abort/1, (index)/2, op/3, atom/1 from standard.

:- import notrace/0 from debugger.

:- import conget/2, conset/2 from gensym.

:- import xpp_include_dir/1 from parse.

:- dynamic hide_this_show(_,_).

:- index(hide_this_show/2,trie).

:- export
	bootstrap_flora/0,
	unstrap_flora/0,
	(flImport)/1,
	(flLoad)/1,
	(flCompile)/1,
	flModule/1,
	flora_shell/0.


/*****************************************************************************/
bootstrap_flora :-
	bootstrap_package([flora2,syslib,lib,pkgs,p2h],flora),
	!,
	assert(package_configuration(version(flora),'0.80 of April, 2001')),
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(FloraFlrIncludesDir,
			 '%s%sflrincludes',args(FloraDir,S)),
	assert(xpp_include_dir(FloraFlrIncludesDir)),
	fmt_write_string(FloraClosureDir,'%s%sclosure',args(FloraDir,S)),
	assert(xpp_include_dir(FloraClosureDir)),
	fmt_write_string(FloraIncludesDir,'%s%sincludes',args(FloraDir,S)),
	assert(xpp_include_dir(FloraIncludesDir)),
	fmt_write_string(FloraGenIncludesDir,
			 '%s%sgenincludes',args(FloraDir,S)),
	assert(xpp_include_dir(FloraGenIncludesDir)),
	[p2h_config].

bootstrap_flora.


/*****************************************************************************/
unstrap_flora :-
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(FloraFlrIncludesDir,
			 "%s%sflrincludes",args(FloraDir,S)),
	(retract(xpp_include_dir(FloraFlrIncludesDir)); true),
	fmt_write_string(FloraClosureDir,"%s%sclosure",args(FloraDir,S)),
	(retract(xpp_include_dir(FloraClosureDir)); true),
	fmt_write_string(FloraIncludesDir,"%s%sincludes",args(FloraDir,S)),
	(retract(xpp_include_dir(FloraIncludesDir)); true),
	fmt_write_string(FloraGenIncludesDir,
			 "%s%sgenincludes",args(FloraDir,S)),
	(retract(xpp_include_dir(FloraGenIncludesDir)); true),
	unload_package(flora),
	conset(flora_shell_loaded,0).


/*****************************************************************************/
%% don''t show flora_shell in trace
:- assert(hide_this_show(flora_shell,0)). 


/*****************************************************************************/
flora_shell :-
	bootstrap_flora,
	notrace,
	( conget(flora_shell_loaded,1), !
	;
	  consult(flrshell),
	  flora_shell_loop
	).

/************************************************************************
  Flora import stuff

  Syntax:
      :- flImport {hilog|firstorder} Pred/Arity as Pred1(_,_,...)
                                from File[.flr]>>FloraModule
  or
      :- flImport {hilog|firstorder} Pred/Arity as Pred1(_,_,...)
                                from FloraModule

  Also (to load into the default module)
      :- flLoad file.
  or
      :- flLoad file>>module.

  To compile (without loading):
      :- flCompile file.
  or
      :- flCompile file>>module.
************************************************************************/

:- op(1150,fx,(firstorder)).
%%:- op(1150,fx,(hilog)).  %% this is already defined in XSB

:- op(500,yfx,(as)).
:- op(1170,fx,(flImport)).

:- op(1050,fx,(flLoad)).	% loads file into module: flLoad(File>>Module)
      % compiles file for loading into module: flCompile(File>>Module)
:- op(1050,fx,(flCompile)).
%% The other operators, '>>' and 'from', are already defined in XSB

flImport(hilog(from(as(What,AsWhat),FileMod))) :- !,
	(atom(FileMod) 
	-> flImportHiLog(What,AsWhat,_,FileMod)
	; FileMod = File>>Module 
	-> flImportHiLog(What,AsWhat,File,Module)
	).

flImport(firstorder(from(as(What,AsWhat), '>>'(File,Module)))) :- !,
	(atom(FileMod)
	-> flImportFloraPred(What,AsWhat,_,FileMod)
	; FileMod = File>>Module 
	-> flImportFloraPred(What,AsWhat,File,Module)
	).
flImport(X) :- abort(['Invalid flImport syntax: ', X]).

flLoad(File>>Module) :- flora_load_module_internal(File,Module).
flLoad(Module) :- flora_load_module_internal(Module).

flCompile(File>>Module) :- flora_compile_internal(File,Module).
flCompile(Module) :- flora_compile_internal(Module).

%% tells if ModuleName is loaded
flModule(ModuleName) :- 
	flora_wssymbol(flThisModule,ModuleName,MagicName),
	current_predicate(MagicName/1).
