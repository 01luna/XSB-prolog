/*** lib/trailer:   appended automatically by the FLIP compiler  ************/

%:- auto_table.
%:- table_all.  
%:- ti_all.

%%% BEGIN closure rules

% closure rules for X::Y
sub_(X,X).
sub_(X,Y) :-
	sub_(X,Z), 
	sub_(Z,Y),
	(X\=Z -> true
	;Z\=Y
	),
	(X=Y
	-> write('***Warning: cyclic subclass hierarchy: '),
	   write(X),write('::'),write(Z),write('::'),write(Y),nl
	;  true
	).

% closure rules for X:C
isa_(O,C) :-
	sub_(C1,C), % sub *before* isa: speedup almost 20x for London prog.!
	isa_(O,C1),
	C1 \== C.   % avoid double derivations!
		    % speed-up almost 2x for London prog.!
		    % x17 for fahrplan!




% monotone inheritance
% here for fixed arity 1:
%
% O[M@(X)->R]:-CL[M@(X)*->R],O:CL.
% 
% fd_(_O,@(_M,_X),_R) :-
%	ifd_(_CL,@(_M,_X),_R),isa_(_O,_CL).

% here with meta-variable for all arities
fd_(O,M_and_Args,R) :-
	ifd_(Class,M_and_Args,R),isa_(O,Class).

mvd_(O,M_and_Args,R) :-
	imvd_(Class,M_and_Args,R),isa_(O,Class).


ifd_(_,_,_) :- fail.
imvd_(_,_,_) :- fail.

%%% END closure rules

ic_ :-
	fd_(O,M,X),fd_(O,M,Y), X @< Y,
	nl,
	write('***Warning: inconsistency: '),
	write(O),write('['),write(M),write('->'), write((X,Y)),write(']'),nl
 ;
	true.

ic_all_ :-	
	setof((X,Y), 
	(fd_(O,M,X),fd_(O,M,Y), X @< Y),
	 EQs),
	nl,
	write('***Warning: inconsistency: '),
	write(O),write('['),write(M),write('->'), write(EQs),write(']'),nl,
	fail
 ;
	true.


consistent_ :- not ic_.

	
%:-	cputime(T0),
%	ic_,
%	cputime(T1),
%	T is T1-T0,
%	nl,write('cpu-time for IC-check: '),write(T),write(' seconds]'),nl.
	
/****************************  End of Trailer  *****************************/
