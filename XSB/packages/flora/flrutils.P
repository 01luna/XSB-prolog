/* File:      flrutils.P
**
** Author(s): Guizhen Yang       (Flora)
**    	      Bertram Ludaescher (Flip, the Flora precursor)
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) Bertram Ludaescher, 1998
** Copyright (C) The Research Foundation of SUNY, 1999
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: flrutils.P,v 1.35 2000-04-11 00:00:58 kifer Exp $
**
*/

:- compiler_options([xpp_on]).
#include "flag_defs_xsb.h"
#include "standard.h"
#include "char_defs.h"

#include "flora_prefix.h"


/********************************************************************/

flora_word(S,A) :- str_cat(STD_FPREFIX, S, A1), A1=A.



:- op(1050,xfy, STD_FPREFIX(then)).
:- op(1100,xfy, STD_FPREFIX(else)).
(C STD_FPREFIX(then)  T STD_FPREFIX(else) _S) :- call(C), call(T).
(C STD_FPREFIX(then) _T STD_FPREFIX(else)  S) :- sk_not(C), call(S).

STD_FPREFIX(tnot_all)(Test) :- sk_not(Test).


/********************************************************************/
terminate_list([]) :- !.
terminate_list([_|T]) :- terminate_list(T).


/********************************************************************/
flora_member(NV,NVs) :-
	var(NVs),
	!,
	NVs=[NV|_].

flora_member(var(N,V),[var(N,V)|_]) :-
	N \= '_',
	N \= '@_',
	!.

flora_member(NV,[_|NVs]) :-
	flora_member(NV,NVs).


/********************************************************************/
%% Here M is a plain text message
flora_error_nl(M) :-
	fmt_write(STDERR, "\n++FLORA Error: %S\n", M).
%% Here Fmt is format and Args should have the form args(A1,A2,...)
flora_error_nl(Fmt, Args) :-
	fmt_write(STDERR, "\n++FLORA Error: ", _),
	fmt_write(STDERR, Fmt, Args),
	file_nl(STDERR).

STD_FPREFIX(warning_nl)(M) :-
	fmt_write(STDWARN, "++FLORA Warning: %S\n", M).
STD_FPREFIX(warning_nl)(Fmt, Args) :-
	fmt_write(STDWARN, '++FLORA Warning: ', _),
	fmt_write(STDWARN, Fmt, Args),
	file_nl(STDWARN).
%% This is not exported, so we don''t wrap it
flora_warning(M) :-
	fmt_write(STDWARN, '++FLORA Warning: %S', M).


%% Here M is a plain text message
flora_message_nl(M) :-
	fmt_write(STDMSG, "\n[FLORA: %S\n", M).
%% Here Fmt is format and Args should have the form args(A1,A2,...)
flora_message_nl(Fmt, Args) :-
	fmt_write(STDMSG, "\n[FLORA: ", _),
	fmt_write(STDMSG, Fmt, Args),
	file_nl(STDMSG).
%% Like flora_message_nl/1, but doesn''t put \n in front of the message
flora_message_nl1(M) :-
	fmt_write(STDMSG, "[FLORA: %S\n", M).
%% Like flora_message_nl/2, but doesn''t put \n in front of the message
flora_message_nl1(Fmt, Args) :-
	fmt_write(STDMSG, '[FLORA: ', _),
	fmt_write(STDMSG, Fmt, Args),
	file_nl(STDMSG).
%% Like flora_message_nl/1, but no \n at the end
flora_message(M) :-
	fmt_write(STDMSG, "\n[FLORA: %S", M).
%% Like flora_message_nl/2, but no \n at the end
flora_message(Fmt, Args) :-
	fmt_write(STDMSG, "\n[FLORA: ", _),
	fmt_write(STDMSG, Fmt, Args).

%% Just puts out message with newline. Can be a list or an atom.
%% Don''t put \n in front
flora_display_msg(M) :-
	fmt_write(STDMSG, M, _),
	file_nl(STDMSG).
flora_display_msg(Fmt, Args) :-
	fmt_write(STDMSG, Fmt, Args),
	file_nl(STDMSG).


/*********************************************************************/
flcompile(InFile,Dtvs) :-
	flora_compile_internal(InFile, Dtvs, static_mode).

dyncompile(InFile,Dtvs) :-
	flora_compile_internal(InFile, Dtvs, dynamic_mode).

flcompile(InFile) :-
	flora_default_directives(Dtvs),
	flcompile(InFile,Dtvs).

dyncompile(InFile) :-
	flora_default_directives(Dtvs),
	dyncompile(InFile,Dtvs).

flora_compile_internal(InFile, Dtvs, Mode) :-
	flora_flcompile(Mode,Dtvs,InFile,force,Module),
	%% No \n in front
	flora_message_nl1('calling XSB compiler]'),
	compile(Module,[optimize,spec_repr]).

/*********************************************************************/
flconsult(File, Dtvs) :-
	flora_consult_internal(File, Dtvs, static_mode).

dynconsult(File, Dtvs) :- 
	flora_consult_internal(File, Dtvs, dynamic_mode).

flconsult(File) :- 
	flora_default_directives(Dtvs),
	flconsult(File,Dtvs).

dynconsult(File) :- 
	flora_default_directives(Dtvs),
	dynconsult(File,Dtvs).

flora_consult_internal(File, Dtvs, Mode) :-
	flora_flcompile(Mode,Dtvs,File,noforce,Module),
	(   Mode = static_mode 
	->  ModeMsg = 'consulting'
	;   ModeMsg = 'dynamically loading'
	),
	flora_message_nl('%s %S]', args(ModeMsg,Module)),
	(   Mode = static_mode
	->  consult(Module,[optimize,spec_repr])
	;   load_dyn(Module)
	).


/*********************************************************************/
STD_FPREFIX(loadlist)([X]) :- flload(X).

STD_FPREFIX(loadlist)([X1,X2|Xs]) :-
	flload(X1),
	STD_FPREFIX(loadlist)([X2|Xs]).


/*********************************************************************/
STD_FPREFIX(dynloadlist)([X]) :- dynload(X).

STD_FPREFIX(dynloadlist)([X1,X2|Xs]) :-
	dynload(X1),
	STD_FPREFIX(dynloadlist)([X2|Xs]).


/*********************************************************************/
flload(File) :-
	flora_check_filename(File),
	parse_filename(File,D,B,E),
	(   E = 'flr'
	->  flconsult(File)
	;   (E = 'P'; E = 'O')
	->  flora_locate_file(File,TFile),
	    (	file_exists(TFile)
	    ->	flora_message_nl('consulting %S]', arg(TFile)),
		consult(File)
	    ;	flora_error_nl('%s does NOT exist!', arg(File)),
		fail
	    )

	;   E \= ''
	->  flora_error_nl('file extension must be flr, P or O!'),
	    fail
	;   fmt_write_string(FlrName,'%s%s.flr',f(D,B)),
	    flora_locate_file(FlrName,FlrFile),
	    (	file_exists(FlrFile)
	    ->	flconsult(FlrFile)
	    ;	fmt_write_string(PName,'%s%s.P',f(D,B)),
	        flora_locate_file(PName,PFile),
		(   file_exists(PFile)
		->  flora_message_nl('consulting %S]', arg(PFile)),
		    consult(PFile,[optimize,spec_repr])
		;   fmt_write_string(OName,'%s%s.O',f(D,B)),
	            flora_locate_file(OName,OFile),
		    (	file_exists(OFile) 
		    ->	flora_message_nl('consulting %S]', arg(OFile)),
			consult(OFile,[optimize,spec_repr])
		    ;	flora_error_nl('file %s not found', arg(File)),
			fail
		    )
		)
	    )
	).


/*********************************************************************/
dynload(File) :-
	flora_check_filename(File),
	parse_filename(File,D,B,E),
	(   E = 'flr'
	->  dynconsult(File)
	;   E = 'P'
	->  flora_locate_file(File,TFile),
	    (	file_exists(TFile)
	    ->	flora_message_nl("dynamically loading %s]\n", arg(TFile)),
		load_dyn(File)
	    ;	flora_error_nl('file %s not found', arg(File)),
		fail
	    )
	;   E \= ''
	->  flora_error_nl('file extension must be flr or P'),
	    fail
	;   fmt_write_string(FlrName,'%s%s.flr',f(D,B)),
	    flora_locate_file(FlrName,FlrFile),
	    (	file_exists(FlrFile)
	    ->	dynconsult(FlrFile)
	    ;	fmt_write_string(PName,'%s%s.P',f(D,B)),
	        flora_locate_file(PName,PFile),
		(   file_exists(PFile)
		->  flora_message_nl('dynamically loading %s]', arg(PFile)),
		    load_dyn(PFile)
		;   flora_error_nl('file %s not found', arg(File)),	
		    fail
		)
	    )
	).


/**********************************************************************
  flora_flcompile(+LoadMode,+Directives,+InFile,+Force,-OutFile)
  InFile must have '.flr' as extension or no extension (in this case,
  '.flr' is appended).
**********************************************************************/
flora_flcompile(LoadMode,Directives,InFile,Force,OutFile) :-
	flora_maxerr(MaxErr),
	flora_check_directives(Directives,Dtvs),
	flora_check_filename(InFile),
	parse_filename(InFile,_,_,E),
	(   E = 'flr'
	->  FullFileName=InFile
	;   fmt_write_string(FullFileName,'%s.flr',f(InFile))
	),
	flora_locate_file(FullFileName,FlrFile),
	( not file_exists(FlrFile)
	->  flora_error_nl('file %s not found', arg(FlrFile)),
	    fail
	;   parse_filename(FlrFile,D,B,_),
	    ( LoadMode == static_mode
	    ->	fmt_write_string(PFile,'%s%s.P',f(D,B))
	    ;	fmt_write_string(PFile,'%s%s_dyn.P',f(D,B))
	    ),
	    ( Force = force
	    ->	generate_code(LoadMode,Dtvs,FlrFile,PFile,MaxErr,Status)
	    ;	( LoadMode == static_mode 
		->  fmt_write_string(OFile,'%s%s.O',f(D,B))
		;   OFile=PFile
		),
		(   ( file_older_than(OFile,FlrFile)
		    ; file_older_than(PFile,FlrFile))
		->  generate_code(LoadMode,Dtvs,FlrFile,PFile,MaxErr,Status)
		;   Status=noneed
		)
	    ),
	    (	Status = failure 
	    ->	fail
	    ;	Status = noneed
	    ->	OutFile=OFile
	    ;	OutFile=PFile
	    )
	),
	!.


/********************************************************************/
write_tokens(S,Ts) :-
	telling(F),
	tell(S),
	write_tokens(Ts),
	tell(F).

%% Like write_tokens/2, but uses I/O port instead of a stream
write_tokens_message(IOport,Ts) :-
	current_output_port(OldOutput),
	stat_set_flag(CURRENT_OUTPUT, IOport),
	write_tokens(Ts),
	stat_set_flag(CURRENT_OUTPUT, OldOutput).

	


write_tokens([]).

write_tokens([X|Xs]) :-
	write_tokens(X),
	write_tokens(Xs).

write_tokens(atom(white_space)) :- !, write(' ').
write_tokens(atom(rule_delimeter)) :- !, write('.').

write_tokens(atom(A)) :-
	!,
	atom_codes(A,[_|L]),
	atom_codes(B,L),
	write(B).

write_tokens(identifier(X)) :- !, write(X).
write_tokens(num(N)) :- !, write(N).
write_tokens(var(V)) :- !, write(V).
write_tokens(string_atom(X)) :- !, write_canonical(X).

write_tokens(string_list(X)) :-
	!,
	write(X).


/********************************************************************/
write_rules([]).

write_rules([null|Rs]) :- !, write_rules(Rs).

write_rules([R|Rs]) :-
	write_rules(R),
	nl,
	write_rules(Rs).

write_rules(fact(H)) :-
	!,
	write_canonical(H),
	writeln('.').

write_rules(rule(H,Gs)) :-
	!,
	write_canonical(H),
	writeln(' :- '),
	write_body(Gs).

write_rules(query(Body,NVs)) :-
	!,
	write('?- '),
	A = STD_FPREFIX(print_all),
	write_canonical(A),
	write('('),
	write_canonical(Body),
	write(','),
	write_canonical(NVs),
	writeln(').'),
	nl,
	T = STD_FPREFIX(tag),
	write_canonical(T), writeln('(query).').

write_rules(unbound_warning(F,L)) :-
	!,
	write('%%% '),
	issue_unsafe_var_warning(F,L).

write_rules(import_directive(PAs,M)) :-
	!,
	writeln(':- import'),
	write_PAs(PAs),
	nl, write('   from '), write_canonical(M), writeln('.').

write_rules(export_directive(PAs)) :-
	!,
	writeln(':- export'),
	write_PAs(PAs),
	writeln('.').

write_rules(table_directive(auto_table)) :-
	!,
	writeln(':- auto_table.').

write_rules(table_directive(PAs)) :-
	!,
	writeln(':- table'),
	write_PAs(PAs),
	writeln('.').


/********************************************************************/
write_body([X]) :-
	!,
	tab(8),
	write_canonical(X),
	writeln('.').

write_body([X1,X2|Xs]) :-
	!,
	tab(8),
	write_canonical(X1),
	writeln(','),
	write_body([X2|Xs]).

/********************************************************************/
write_PAs([pa(P,A)]) :-
	!,
	tab(8),
	write_canonical(P),
	write('/'),
	write(A).

write_PAs([pa(P,A)|PAs]) :-
	tab(8),
	write_canonical(P),
	write('/'),
	write(A),
	writeln(','),
	write_PAs(PAs).


/********************************************************************/
issue_unsafe_var_warning(_Form,L) :-
	flora_warning('unsafe variable(s) '),
	write_list(STDWARN, L),
	file_write(STDWARN, ' in a fact/rule head.'),
	file_nl(STDWARN).


/********************************************************************/
write_list([]).
write_list([X]) :-
	!,
	write(X).
write_list([X1,X2|Xs]) :-
	!,
	write(X1),
	write(', '),
	write_list([X2|Xs]).

%% Like write_list/1 but writes to I/O port
write_list(IOport,L) :-
	current_output_port(OldOut),
	stat_set_flag(CURRENT_OUTPUT, IOport),
	write_list(L),
	stat_set_flag(CURRENT_OUTPUT,OldOut).


/********************************************************************/
generate_code(LoadMode,Directives,FlrFile,PFile,MaxErr,Status) :-
	(LoadMode == static_mode -> A = static ; A = (dynamic)),
	flora_message('compiling %s for %s loading with options: ',
		      arg(FlrFile,A)),
	write_list(STDMSG, Directives),
	fmt_write(STDMSG, "]\n", _),
	cputime(T0),
	seeing(PreInFile),
	telling(PreOutFile),
	tell(PFile),
	(   LoadMode == static_mode 
	->  copy_flrfile(closure,'flrheader.P',S1)
	;   copy_flrfile(closure,'flrheader_dyn.P',S1)
	),
	(   S1 = failure
	->  Status=failure
	;   see(FlrFile),
	    set_load_mode(LoadMode),
	    compile_flrfile(MaxErr,0,S2,[],Options),
	    seen,
	    (	S2 = failure
	    ->	Status=failure
	    ;	directives_options(LoadMode,Directives,Options,Status)
	    )
	),
	told,
	see(PreInFile),
	tell(PreOutFile),
	cputime(T1),
	(   Status = failure
	->  true
	;   T is T1-T0,
	    %% No \n in front
	    flora_message_nl1('Done! CPU time used: %S seconds]', arg(T))
	).


/********************************************************************/
directives_options(LoadMode,Directives,Options,Status) :-
	( member(flraggregate,Options)
	->  ( LoadMode == static_mode
	    ->	FlrAgg='flraggregate.P'
	    ;	FlrAgg='flraggregate_dyn.P'
	    ),
	    copy_flrfile(syslib,FlrAgg,S1)
	;   S1=success
	),
	(   member(flrassert,Options)
	->  ( LoadMode == static_mode
	    ->	FlrAss='flrassert.P'
	    ;	FlrAss='flrassert_dyn.P'
	    ),
	    copy_flrfile(syslib,FlrAss,S2)
	;   S2=success
	),
	(member(eqlevel(N1),Directives) -> true ; N1=0),
	(member(skolem,Options) -> N2=1 ; N2=0),
	(   N2 == 1, N1 == 0
	->  STD_FPREFIX(warning_nl)('skolemization in rule head performed')
	;   true
	),
	external_options(Options,TempOpts),
	flora_check_directives(TempOpts,Opts),
	( member(eqlevel(N3),Opts) 
	->  ( N3 > N1
	    ->	ActionMsg = ' (overriding)]'
	    ;	N1 > N3
	    ->	ActionMsg = ' (overridden)]'
	    ;	ActionMsg = ']'
	    ),
	    flora_message_nl('compiler option eqlevel(%d) found in src file%s',
			     args(N3, ActionMsg))
	;   N3=0
	),
	(N1 < N2 -> N4=N2 ; N4=N1),
	(N3 < N4 -> Level=N4 ; Level=N3),
	(   LoadMode == static_mode
	->  fmt_write_string(Trailer,'flrtrailer%d.P',f(Level))
	;   fmt_write_string(Trailer,'flrtrailer%d_dyn.P',f(Level))
	),
	copy_flrfile(closure,Trailer,S3),
	(   S1=success, S2=success, S3=success
	->  Status=success
	;   Status=failure
	).


/********************************************************************/
external_options([],[]).

external_options([X|Ints],Exts) :-
	internal_option(X),
	!,
	external_options(Ints,Exts). 

external_options([X|Ints],[X|Exts]) :- external_options(Ints,Exts). 

internal_option(flraggregate) :- !.
internal_option(flrassert)    :- !.
internal_option(skolem)       :- !.


/********************************************************************/
copy_flrfile(Dir,File,Status) :-
	bootstrap_flora,
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(FullName,'%s%s%s%s%s',f(FloraDir,S,Dir,S,File)),
	(   flora_file_exists(FullName)
	->  flora_output_file(FullName),
	    Status=success
	;   Status=failure
	).


/********************************************************************/
flora_file_exists(File) :-
	(   file_exists(File)
	->  true
	;   flora_error_nl('file %s not found', arg(File)),
	    fail
	).


/********************************************************************/
:- import print_file_contents/1 from file_io.
flora_output_file(File) :-
	seeing(In),
	print_file_contents(File),
	see(In).


/********************************************************************/
compile_flrfile(MaxErr,ErrorCount,Status,OldOpts,NewOpts) :-
	read_parse_compile([],Tokens,FlattenedRules,S1,Opts),
	(   member(error(_),S1)
	->  NewCount is ErrorCount+1,
	    (MaxErr=all -> M is NewCount+1 ; M=MaxErr),
	    (	M =< NewCount
	    ->	Status=failure,
		fmt_write(STDERR, "\n++Aborted after %d error(s)\n\n",
			  arg(NewCount))
	    ;	member(not_eof,S1),
		member(atom(rule_delimeter),Tokens)
	    ->	compile_flrfile(MaxErr,NewCount,Status,_,_)
	    ;	member(not_eof,S1), flora_discard_tokens(S2),
		member(not_eof,S2)
	    ->	compile_flrfile(MaxErr,NewCount,Status,_,_)
	    ;	Status=failure,
		fmt_write(STDERR,
			  "\n++ %d error(s) found\n++compilation aborted\n\n",
			  arg(NewCount))
	    )
	;   ( member(unbound_warning(Form,L),FlattenedRules)
	    ->	issue_unsafe_var_warning(Form,L)
	    ;	true
	    ),
	    write('%%% '),
	    telling(File), write_tokens(File,Tokens), nl,
	    write_rules(FlattenedRules), nl,
	    (	ErrorCount > 0
	    ->	true
	    ;	append(OldOpts,Opts,Temp1),
		sort(Temp1,Temp2)
	    ),
	    (	member(eof,S1)
	    ->	( ErrorCount = 0
		->  Status=success,
		    NewOpts=Temp2
		;   Status=failure,
		    fmt_write(STDERR,
			      "\n++%d error(s) found\n++compilation aborted\n",
			      arg(ErrorCount))
		)
	    ;	compile_flrfile(MaxErr,ErrorCount,Status,Temp2,NewOpts)
	    )
	),
	!.


/********************************************************************/
flora_read_parse_compile(LoadMode,L,Tokens, FlattenedRules,Status,Opts) :-
	set_load_mode(LoadMode),
	read_parse_compile(L,Tokens,FlattenedRules,Status,Opts).


/********************************************************************/
read_parse_compile(L,Tokens,FlattenedRules,Status,Opts) :-
	read_tokens(Tokens,ReadStatus),
	(   member(error(Msg),ReadStatus)
	->  Status=ReadStatus,
	    FlattenedRules=[null],
	    fmt_write(STDERR, "\n>>>   ",_),
	    write_tokens_message(STDERR,Tokens),
	    file_write(STDERR, ' <--- here?'),
	    flora_error_nl(Msg)
	;   L = [atom('$?'),atom('$-')], rule(null,Tokens,[]) 
	->  Status=[noop|ReadStatus]
	;   append(L,Tokens,Ts),
	    (	rule(FlogicRule,Ts,[])
	    ->	( compile_flogic(FlogicRule,FlattenedRules,Opts)
		-> Status=ReadStatus
		;   FlattenedRules=[null],
		    fmt_write(STDERR, "\n>>>   ",_),
		    write_tokens_message(STDERR,Tokens),
		    flora_error_nl('compiling error'),
		    Status=[error('compiling error')|ReadStatus]
		)
	    ;	fmt_write(STDERR, "\n>>>   ",_),
		write_tokens_message(STDERR,Tokens),
		flora_error_nl('parsing error'),
		FlogicRule=[null],
		Status=[error('parsing error')|ReadStatus]
	    )
	).


/********************************************************************/
flora_discard_tokens(Status) :-
	repeat,
	STD_FPREFIX(warning_nl)('discarding tokens]'),
	read_tokens(Tokens,Status),
	(   member(atom(rule_delimeter),Tokens), !
	;   member(eof,Status), !
	).


/*********************************************************************/
flora_check_directives(Original,Final) :-
	flora_directives(Original,L1),
	findall(X1,(member(X1,L1),X1\=eqlevel(_)),L2),
	findall(eqlevel(X2),member(eqlevel(X2),L1),L3),
	(   L3 = []
	->  L4=[]
	;   member(eqlevel(N1),L3),
	    not (member(eqlevel(N2),L3),N2>N1),
	    L4=[eqlevel(N1)]
	),
	!,
	append(L4,L2,Final).

flora_directives([],[]) :- !.

flora_directives([H|T],Opts) :-
	(   flora_directive(H)
	->  Opts=[H|R],
	    flora_directives(T,R)
	;   STD_FPREFIX(warning_nl)("unknown compiler option `%S' (discarded)\n",
			     arg(H)),
	    flora_directives(T,Opts)
	),
	!.

%% Error, if incorrect directives format
flora_directives(_,_) :-
	flora_error_nl('compiler directive must be a LIST of options!'),
	fail.

flora_directive(eqlevel(N)) :- 0 =< N, N =< 1, !.

flora_default_directives([eqlevel(0)]).


/*********************************************************************/
flora_check_filename(Name) :-
	(   not atom(Name)
	->  flora_error_nl('invalid file name'),
	    fail
	;   true
	).


/*********************************************************************/
flora_locate_file(In,In) :-
	is_absolute_filename(In),
	!.

flora_locate_file(In,In) :-
	parse_filename(In,_,F,E),
	slash(S),
	(   E \= ''
	->  fmt_write_string(Str,'.%s%s.%s',f(S,F,E))
	;   fmt_write_string(Str,'.%s%s',f(S,F))
	),
	In=Str,
	file_exists(In),
	!.

flora_locate_file(In,Out) :-
	flora_library_directory(LibDir),
	slash(S),
	fmt_write_string(Out,'%s%s%s',f(LibDir,S,In)),
	file_exists(Out),
	!.

flora_locate_file(In,Out) :-
	xsb_configuration(libdir, LibDir),
	slash(S),
	fmt_write_string(Out,'%s%s%s',f(LibDir,S,In)),
	file_exists(Out),
	!.

flora_locate_file(In,Out) :-
	xsb_configuration(syslibdir, LibDir),
	slash(S),
	fmt_write_string(Out,'%s%s%s',f(LibDir,S,In)),
	file_exists(Out),
	!.

flora_locate_file(In,Out) :-
	xsb_configuration(cmplibdir, LibDir),
	slash(S),
	fmt_write_string(Out,'%s%s%s',f(LibDir,S,In)),
	file_exists(Out),
	!.

flora_locate_file(In,In).


/*********************************************************************/
file_older_than(F1,F2) :-
	(   file_exists(F1)
	->  file_time(F1,time(F1Time1,F1Time2)),
	    file_time(F2,time(F2Time1,F2Time2)),
	    time(F1Time1,F1Time2) @< time(F2Time1,F2Time2)
	;   true
	).


/*********************************************************************/
flora_library_directory('.').
flora_library_directory(X) :- library_directory(X).


/*********************************************************************/
:- maxerr(5).

maxerr(X) :-
	(   var(X)
	->  flora_maxerr(X)
	;   X \== all,
	    (	not integer(X) ; X < 1)
	->  flora_error_nl('invalid argument to maxerr'),
	    fail
	;   trie_retract_all(flora_maxerr(_)),
	    trie_assert(flora_maxerr(X))
	).


/*********************************************************************/
