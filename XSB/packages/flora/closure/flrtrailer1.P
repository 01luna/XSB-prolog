/*** closure/flrtrailer1.P: appended automatically by the FLORA compiler
     to STATIC code when equality maintenance is ENABLED 
 ***/


/*****************************************************************************
  closure rules for X::Y
*****************************************************************************/
:- table '_$_$_flora_subclass'/2.
:- table '_$_$_flora_strict_subclass'/2.

'_$_$_flora_subclass'(X,X) :- '_$_$_flora_exists'(X).
'_$_$_flora_subclass'(X,Y) :- '_$_$_flora_strict_subclass'(X,Y).

%% Using flora_subclass can be a major source of inefficiency
%% In most cases, you want to use '_$_$_flora_strict_subclass'
'_$_$_flora_strict_subclass'(X,Y) :- '_$_$_flora_sub'(X,Y),  X \= Y.

'_$_$_flora_strict_subclass'(X,Y) :-
	'_$_$_flora_strict_subclass'(X,Z), 
	'_$_$_flora_strict_subclass'(Z,Y),
	%%(X \= Z -> true ; Z\=Y),
	( X = Y ->
	    write('++FLORA Warning: cyclic subclass hierarchy, '),
	    write(X), write('::'), write(Z), write('::'), write(Y), nl
	  ;
	    true
	).


/*****************************************************************************
  closure rules for X:Y, X::Z implies X:Z
*****************************************************************************/
:- table '_$_$_flora_isa'/2.

'_$_$_flora_isa'(O,C) :-
	'_$_$_flora_strict_subclass'(C1,C),
	'_$_$_flora_isa'(O,C1).


/*****************************************************************************
  rules for monotonic inheritance of signatures
*****************************************************************************/
:- table '_$_$_flora_fs'/3.
:- table '_$_$_flora_mvs'/3.
:- table '_$_$_flora_ifs'/3.
:- table '_$_$_flora_imvs'/3.

%% Instance
'_$_$_flora_fs'(O,MethodArgs,R) :-
	'_$_$_flora_fs'(Class,MethodArgs,R),
	( '_$_$_flora_isa'(O,Class)
	  ;
	  '_$_$_flora_eql'(Class,C), '_$_$_flora_isa'(O,C)
	).
'_$_$_flora_ifs'(O,MethodArgs,R) :-
	'_$_$_flora_ifs'(Class,MethodArgs,R),
	( '_$_$_flora_isa'(O,Class)
	  ;
	  '_$_$_flora_eql'(Class,C), '_$_$_flora_isa'(O,C)
	).

'_$_$_flora_mvs'(O,MethodArgs,R) :-
	'_$_$_flora_mvs'(Class,MethodArgs,R),
	( '_$_$_flora_isa'(O,Class)
	  ;
	  '_$_$_flora_eql'(Class,C), '_$_$_flora_isa'(O,C)
	).
'_$_$_flora_imvs'(O,MethodArgs,R) :-
	'_$_$_flora_imvs'(Class,MethodArgs,R),
	( '_$_$_flora_isa'(O,Class)
	  ;
	  '_$_$_flora_eql'(Class,C), '_$_$_flora_isa'(O,C)
	).

%% Subclass
'_$_$_flora_fs'(Sub,MethodArgs,R) :-
	'_$_$_flora_fs'(Class,MethodArgs,R),
	( '_$_$_flora_strict_subclass'(Sub,Class)
	  ;
	  '_$_$_flora_eql'(Class,S), '_$_$_flora_strict_subclass'(Sub,S)
	).
'_$_$_flora_ifs'(Sub,MethodArgs,R) :-
	'_$_$_flora_ifs'(Class,MethodArgs,R),
	( '_$_$_flora_strict_subclass'(Sub,Class)
	  ;
	  '_$_$_flora_eql'(Class,S), '_$_$_flora_strict_subclass'(Sub,S)
	).

'_$_$_flora_mvs'(Sub,MethodArgs,R) :-
	'_$_$_flora_mvs'(Class,MethodArgs,R),
	( '_$_$_flora_strict_subclass'(Sub,Class)
	  ;
	  '_$_$_flora_eql'(Class,S), '_$_$_flora_strict_subclass'(Sub,S)
	).
'_$_$_flora_imvs'(Sub,MethodArgs,R) :-
	'_$_$_flora_imvs'(Class,MethodArgs,R),
	( '_$_$_flora_strict_subclass'(Sub,Class)
	  ;
	  '_$_$_flora_eql'(Class,S), '_$_$_flora_strict_subclass'(Sub,S)
	).


/*****************************************************************************
  rules for nonmonotonic inheritance of behavior
*****************************************************************************/

:- table '_$_$_flora_fd'/3.
:- table '_$_$_flora_mvd'/3.
:- table '_$_$_flora_ifd'/3.
:- table '_$_$_flora_imvd'/3.
:- table '_$_$_flora_defined_fd'/2.
:- table '_$_$_flora_defined_mvd'/2.
:- table '_$_$_flora_defined_ifd'/2.
:- table '_$_$_flora_defined_imvd'/2.
:- table '_$_$_flora_overwritten_fd'/3.
:- table '_$_$_flora_overwritten_mvd'/3.
:- table '_$_$_flora_overwritten_ifd'/3.
:- table '_$_$_flora_overwritten_imvd'/3.
:- table '_$_$_flora_conflict_fd'/3.
:- table '_$_$_flora_conflict_ifd'/3.
:- table '_$_$_flora_conflict_mvd'/3.
:- table '_$_$_flora_conflict_imvd'/3.

'_$_$_flora_fd'(Object,Method,Value) :-
	%% If Object,Method are ground, check if Object[Method->...]
	%% is defined right away --an optimization
	(ground(Object), ground(Method) ->
	    tnot('_$_$_flora_defined_fd'(Object,Method)),
	    '_$_$_flora_isa'(Object,Class),
	    '_$_$_flora_ifd'(Class,Method,Value)
	  ;
	    '_$_$_flora_isa'(Object,Class),
	    '_$_$_flora_ifd'(Class,Method,Value),
	    tnot('_$_$_flora_defined_fd'(Object,Method))
	),
	tnot('_$_$_flora_overwritten_fd'(Object,Class,Method)),
	tnot('_$_$_flora_conflict_fd'(Object,Class,Method)).

/* Should we add '_$_$_flora_eql' everywhere? Why not make '_$_$_flora_isa',
    '_$_$_flora_strict_subclass', '_$_$_flora_ifd', etc. friendly to eql, 
   so that we won't need to check for equality everywhere?
   We need to take care of equality in these rules below.
*/
'_$_$_flora_defined_fd'(Object,Method) :- '_$_$_flora_fd'(Object,Method,_).

'_$_$_flora_overwritten_fd'(Object,Class,Method) :-
	'_$_$_flora_isa'(Object,SubClass),
	'_$_$_flora_strict_subclass'(SubClass,Class),
	'_$_$_flora_ifd'(SubClass,Method,_).

%% When this is called, Object always belongs to Class
'_$_$_flora_conflict_fd'(Object,Class,Method) :-
	'_$_$_flora_defined_ifd'(Class1,Method),
	Class \= Class1,
	'_$_$_flora_isa'(Object,Class1),
	tnot('_$_$_flora_strict_subclass'(Class1,Class)),
	tnot('_$_$_flora_strict_subclass'(Class,Class1)).


'_$_$_flora_mvd'(Object,Method,Value) :-
	(ground(Object), ground(Method) ->
	    tnot('_$_$_flora_defined_mvd'(Object,Method)),
	    '_$_$_flora_isa'(Object,Class),
	    '_$_$_flora_imvd'(Class,Method,Value)
	  ;
	    '_$_$_flora_isa'(Object,Class),
	    '_$_$_flora_imvd'(Class,Method,Value),
	    tnot('_$_$_flora_defined_mvd'(Object,Method))
	),
	tnot('_$_$_flora_overwritten_mvd'(Object,Class,Method)),
	tnot('_$_$_flora_conflict_mvd'(Object,Class,Method)).

'_$_$_flora_defined_mvd'(Object,Method) :- '_$_$_flora_mvd'(Object,Method,_).

'_$_$_flora_overwritten_mvd'(Object,Class,Method) :-
	'_$_$_flora_isa'(Object,SubClass),
	'_$_$_flora_strict_subclass'(SubClass,Class),
	'_$_$_flora_imvd'(SubClass,Method,_).

'_$_$_flora_conflict_mvd'(Object,Class,Method) :-
	'_$_$_flora_defined_imvd'(Class1,Method),
	Class \= Class1,
	'_$_$_flora_isa'(Object,Class1),
	tnot('_$_$_flora_strict_subclass'(Class1,Class)),
	tnot('_$_$_flora_strict_subclass'(Class,Class1)).


'_$_$_flora_ifd'(Class,Method,Value) :-
	(ground(Class), ground(Method) ->
	    tnot('_$_$_flora_defined_ifd'(Class,Method)),
	    '_$_$_flora_strict_subclass'(Class,Super),
	    '_$_$_flora_ifd'(Super,Method,Value)
	  ;
	    '_$_$_flora_strict_subclass'(Class,Super),
	    '_$_$_flora_ifd'(Super,Method,Value),
	    tnot('_$_$_flora_defined_ifd'(Class,Method))
	),
	tnot('_$_$_flora_overwritten_ifd'(Class,Super,Method)),
	tnot('_$_$_flora_conflict_ifd'(Class,Super,Method)).

'_$_$_flora_defined_ifd'(Class,Method) :- '_$_$_flora_ifd'(Class,Method,_).

'_$_$_flora_overwritten_ifd'(Class,Super,Method) :-
	'_$_$_flora_strict_subclass'(Class,S),
	'_$_$_flora_strict_subclass'(S,Super),
	'_$_$_flora_ifd'(S,Method,_).

%% Note: when this is called, Class is always a subclass of Super
'_$_$_flora_conflict_ifd'(Class,Super,Method) :-
	'_$_$_flora_defined_ifd'(Super1,Method),
	Super1 \= Super,
	'_$_$_flora_strict_subclass'(Class,Super1),
	tnot('_$_$_flora_strict_subclass'(Super1,Super)),
	tnot('_$_$_flora_strict_subclass'(Super,Super1)).


'_$_$_flora_imvd'(Class,Method,Value) :-
	(ground(Class), ground(Method) ->
	    tnot('_$_$_flora_defined_imvd'(Class,Method)),
	    '_$_$_flora_strict_subclass'(Class,Super),
	    '_$_$_flora_imvd'(Super,Method,Value)
	  ;
	    '_$_$_flora_strict_subclass'(Class,Super),
	    '_$_$_flora_imvd'(Super,Method,Value),
	    tnot('_$_$_flora_defined_imvd'(Class,Method))
	),
	tnot('_$_$_flora_overwritten_imvd'(Class,Super,Method)),
	tnot('_$_$_flora_conflict_imvd'(Class,Super,Method)).

'_$_$_flora_defined_imvd'(Class,Method) :- '_$_$_flora_imvd'(Class,Method,_).

'_$_$_flora_overwritten_imvd'(Class,Super,Method) :-
	'_$_$_flora_strict_subclass'(Class,S),
	'_$_$_flora_strict_subclass'(S,Super),
	'_$_$_flora_imvd'(S,Method,_).

%% Note: when this is called, Class is always a subclass of Super
'_$_$_flora_conflict_imvd'(Class,Super,Method) :-
	'_$_$_flora_defined_imvd'(Super1,Method),
	Super1 \= Super,
	'_$_$_flora_strict_subclass'(Class,Super1),
	tnot('_$_$_flora_strict_subclass'(Super1,Super)),
	tnot('_$_$_flora_strict_subclass'(Super,Super1)).



/*****************************************************************************
  rules for congruence due to single-valued methods
*****************************************************************************/
:- table '_$_$_flora_eql'/2.
:- table '_$_$_flora_metheql'/2.

'_$_$_flora_eql'(X,Y) :-
	'_$_$_flora_fd'(O,M1,X),
	(M1=M2 ; '_$_$_flora_metheql'(M1,M2)),
	'_$_$_flora_fd'(O,M2,Y),
	not X=Y.

'_$_$_flora_eql'(X,Y) :-
	'_$_$_flora_eql'(O1,O2),
	'_$_$_flora_fd'(O1,M1,X),
	(M1=M2 ; '_$_$_flora_metheql'(M1,M2)),
	'_$_$_flora_fd'(O2,M2,Y),
	not X=Y.

'_$_$_flora_eql'(X,Y) :-
	'_$_$_flora_eql'(X,Z),
	'_$_$_flora_eql'(Z,Y),
	not X=Y.


'_$_$_flora_metheql'(X,Y) :-
	( nonvar(X) ->
	    functor(X,'_$_$_flora_@',N), N >= 1,
	    functor(Y,'_$_$_flora_@',N)

	  ; nonvar(Y) ->
	    functor(Y,'_$_$_flora_@',N), N >= 1,
	    functor(X,'_$_$_flora_@',N)
	),
	'_$_$_flora_argeql'(X,Y,N),
	not X=Y.


'_$_$_flora_argeql'(_,_,0).

'_$_$_flora_argeql'(X,Y,N) :-
	N >= 1,
	arg(N,X,Xn),
	arg(N,Y,Yn),
	(Xn=Yn ; '_$_$_flora_eql'(Xn,Yn)),
	M is N-1,
	'_$_$_flora_argeql'(X,Y,M).


/*****************************************************************************
  rules for object existence and empty result sets
*****************************************************************************/
:- table '_$_$_flora_exists'/1.
:- table '_$_$_flora_mvd'/2.
:- table '_$_$_flora_imvd'/2.

'_$_$_flora_exists'(X) :- '_$_$_flora_fd'(X,_,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_fd'(_,_,X).
'_$_$_flora_exists'(X) :- '_$_$_flora_mvd'(X,_,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_mvd'(_,_,X).
'_$_$_flora_exists'(X) :- '_$_$_flora_ifd'(X,_,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_ifd'(_,_,X).
'_$_$_flora_exists'(X) :- '_$_$_flora_imvd'(X,_,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_imvd'(_,_,X).
'_$_$_flora_exists'(X) :- '_$_$_flora_isa'(X,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_isa'(_,X).
'_$_$_flora_exists'(X) :- '_$_$_flora_sub'(X,_).
'_$_$_flora_exists'(X) :- '_$_$_flora_sub'(_,X).

'_$_$_flora_exists'(X) :-
	'_$_$_flora_fd'(_,M,_),
	M =.. [_|L],
	member(X,L).

'_$_$_flora_exists'(X) :-
	'_$_$_flora_mvd'(_,M,_),
	M =.. [_|L],
	member(X,L).

'_$_$_flora_exists'(X) :-
	'_$_$_flora_ifd'(_,M,_),
	M =.. [_|L],
	member(X,L).

'_$_$_flora_exists'(X) :-
	'_$_$_flora_imvd'(_,M,_),
	M =.. [_|L],
	member(X,L).


'_$_$_flora_mvd'(O,M) :- '_$_$_flora_mvd'(O,M,_).

'_$_$_flora_imvd'(O,M) :- '_$_$_flora_imvd'(O,M,_).


/*****************************************************************************
  rules for flattened path expressions on RHS
*****************************************************************************/
:- table '_$_$_flora_fd_rhs'/3.
:- table '_$_$_flora_mvd_rhs'/3.
:- table '_$_$_flora_ifd_rhs'/3.
:- table '_$_$_flora_imvd_rhs'/3.
:- table '_$_$_flora_mvd_rhs'/2.
:- table '_$_$_flora_imvd_rhs'/2.
:- table '_$_$_flora_isa_rhs'/2.
:- table '_$_$_flora_sub_rhs'/2.
:- table '_$_$_flora_fs_rhs'/3.
:- table '_$_$_flora_mvs_rhs'/3.


/****************************************************************************/
'_$_$_flora_fd_rhs'(Object,Method,Result) :-
	'_$_$_flora_fd'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_fd'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_fd'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_fd'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_mvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_mvd'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_mvd'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_mvd'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_mvd'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_ifd_rhs'(Object,Method,Result) :-
	'_$_$_flora_ifd'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_ifd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_ifd'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_ifd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_ifd'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_ifd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_ifd'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_imvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_imvd'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_imvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_imvd'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_imvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_imvd'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_imvd_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_imvd'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_mvd_rhs'(Object,Method) :-
	'_$_$_flora_mvd'(Object,M),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvd_rhs'(Object,Method) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_mvd'(O,M),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_imvd_rhs'(Object,Method) :-
	'_$_$_flora_imvd'(Object,M),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_imvd_rhs'(Object,Method) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_imvd'(O,M),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_isa_rhs'(Object1,Object2) :-
	'_$_$_flora_isa'(Object1,Object2).

'_$_$_flora_isa_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object1,O1),
	'_$_$_flora_isa'(O1,Object2).

'_$_$_flora_isa_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object2,O2),
	'_$_$_flora_isa'(Object1,O2).

'_$_$_flora_isa_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object1,O1),
	'_$_$_flora_eql'(Object2,O2),
	'_$_$_flora_isa'(O1,O2).

/****************************************************************************/
'_$_$_flora_sub_rhs'(Object1,Object2) :-
	'_$_$_flora_subclass'(Object1,Object2).

'_$_$_flora_sub_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object1,O1),
	'_$_$_flora_subclass'(O1,Object2).

'_$_$_flora_sub_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object2,O2),
	'_$_$_flora_subclass'(Object1,O2).

'_$_$_flora_sub_rhs'(Object1,Object2) :-
	'_$_$_flora_eql'(Object1,O1),
	'_$_$_flora_eql'(Object2,O2),
	'_$_$_flora_subclass'(O1,O2).

/****************************************************************************/
'_$_$_flora_fs_rhs'(Object,Method,Result) :-
	'_$_$_flora_fs'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_fs'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_fs'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_fs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_fs'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/****************************************************************************/
'_$_$_flora_mvs_rhs'(Object,Method,Result) :-
	'_$_$_flora_mvs'(Object,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_mvs'(O,M,Result),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_mvs'(Object,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

'_$_$_flora_mvs_rhs'(Object,Method,Result) :-
	'_$_$_flora_eql'(Result,R),
	'_$_$_flora_eql'(Object,O),
	'_$_$_flora_mvs'(O,M,R),
	(M=Method ; '_$_$_flora_metheql'(M,Method)).

/*****************************************************************************
  complementary rules to protect against "undefined" error reported by XSB 
*****************************************************************************/
'_$_$_flora_fd'(_,_,_)   :- fail.
'_$_$_flora_mvd'(_,_,_)  :- fail.
'_$_$_flora_ifd'(_,_,_)  :- fail.
'_$_$_flora_imvd'(_,_,_) :- fail.
'_$_$_flora_fs'(_,_,_)   :- fail.
'_$_$_flora_mvs'(_,_,_)  :- fail.
'_$_$_flora_sub'(_,_)    :- fail.
'_$_$_flora_isa'(_,_)    :- fail.


/****************************  End of Trailer  ******************************/

