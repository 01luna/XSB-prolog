/* File:      flrshell.P
**
** Author(s): Michael Kifer (V 1.0, 12/04/1998)
**
**            Guizhen Yang  (V 2.0, 04/12/1999)
**            Guizhen Yang  (V 2.5, 05/06/1999)
**
** Contact:   xsb-contact@cs.sunysb.edu
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
*/


/**********************************************************************
  04/1999, modified by Guizhen Yang (guizyang@CS.SunySB.EDU)
**********************************************************************/


:- import
	write/1, writeln/1, repeat/0, atom_chars/2, abort/0,
	cputime/1, push_abort_cutpoint/0, pop_abort_cutpoint/0,
	file_exists/1
   from standard.

:- import member/2 from basics.

:- import trie_assert/1, trie_retract_all/1 from tables.

:- import slash/1 from machine.

:- import fmt_write_string/3 from file_io.

:- import current_predicate/1 from curr_sym.

:- import consult/2, compile/1, compile/2 from consult.

:- import
	bootstrap_package/2, package_configuration/2, unload_package/1
   from packaging.

:- import
	'_$_$_flora_read_parse_compile'/6,
	'_$_$_flora_flcompile'/5,
	'_$_$_flora_loadlist'/1,
	'_$_$_flora_dynloadlist'/1,
	'_$_$_flora_check_filename'/1,
	flcompile/1, flcompile/2, maxerr/1, flconsult/1, flconsult/2,
	load/1, dynload/1, dyncompile/1, dyncompile/2, dynconsult/1,
	dynconsult/2
   from flrutils.

:- dynamic '_$_$_flora_switch'/1.

/*********************************************************************/
flora_shell :-
	( package_configuration(dir(flora),FloraDir) ->
	    true

	  ;
	    bootstrap_package(flora,flora),
	    package_configuration(dir(flora),FloraDir)
	),
	'_$_$_flora_welcome_msg',
	all,
	slash(S),
	fmt_write_string(Lib,'%s%slib%sflrdisplay',f(FloraDir,S,S)),
	[tables, Lib, flrutils],
	push_abort_cutpoint,
	'_$_$_flora_shell_loop'.


/*********************************************************************/
'_$_$_flora_welcome_msg' :-
	nl,
	write('FLORA Version '),
	package_configuration(version(flora),V),
	write(V), writeln(' loaded.'), nl,
	writeln('help. displays help message'),
	write('rundemo(''demoName''). runs demos in '),
	slash(S),
	package_configuration(dir(flora),FloraDir),
	fmt_write_string(DemoDir,'%s%sdemos',f(FloraDir,S)),
	writeln(DemoDir), nl,
	!.


/*********************************************************************/
'_$_$_flora_shell_loop' :-
	repeat,
	pop_abort_cutpoint,
	push_abort_cutpoint,
	seen,
	see(userin),
	told,
	tell(userout),
	nl, write('FLORA> ?- '),
	'_$_$_flora_read_parse_compile'(static_mode,
					[atom('$?'),atom('$-')],
					_,
					Rules,
					Status,
					Opts),
	( member(error(noop),Status) ->
	    nl

	  ; member(error(_),Status) ->
	    true

	  ;
	    (Opts=[] -> true; '_$_$_flora_check_library'(Opts)),
	    Rules=[query(Gs,NVs)],
	    '_$_$_flora_print_answers'(Gs,NVs)
	),
	(member(eof,Status) -> end ; fail).


/*********************************************************************/
'_$_$_flora_check_library'(Opts) :-
	package_configuration(dir(flora),FloraDir),
	slash(S),
	( member(flrassert,Opts) ->
	    ( current_predicate('_$_$_flora_assert'/1) ->
		true
	      ;
	        fmt_write_string(Assert,'%s%slib%sflrassert.P',f(FloraDir,S,S)),
	        consult(Assert)
	    )
	  ;
	    true
	),
	( member(flraggregate,Opts) ->
	    ( current_predicate('_$_$_flora_min'/3) ->
		true
	      ;
	        fmt_write_string(Aggr,'%s%slib%sflraggregate.P',f(FloraDir,S,S)),
	        consult(Aggr)
	    )
	  ;
	    true
	),
	( member(skolem,Opts) ->
	    nl,
	    writeln('*** Warning: skolemization may require equality checking.')
	  ;
	    true
	).


/*********************************************************************/
'_$_$_flora_print_answers'(Gs,NVs) :-
	( '_$_$_flora_switch'(all) ->
	    '_$_$_flora_print_all'(Gs,NVs)
	  ;
	    '_$_$_flora_print_one'(Gs,NVs)
	).


/*********************************************************************/
help :-
	nl,
	writeln('FLORA commands:'), nl,
	writeln('  help                     : show this info'),
	writeln('  compile(''FILE'')          : compile FILE.P; create FILE.O'),
	writeln('  flcompile(''FILE'')        : compile FILE.flr; create FILE.P and FILE.O'),
	writeln('  flcompile(''FILE'',[...])  : flcompile(''FILE'') with options [...]'),
	writeln('  flconsult(''FILE'')        : compile FILE.flr; consult FILE.P'),
	writeln('  flconsult(''FILE'',[...])  : flconsult(''FILE'') with options [...]'),
	writeln('  load(''FILE[.EXT]'')       : consult FILE.flr, FILE.P or FILE.O'),
	writeln('  [''FILE[.EXT]'',...]       : consult a list of .flr, .P, or .O files'),
	writeln('  dyncompile(''FILE'')       : compile FILE.flr to dynamic code'),
	writeln('  dyncompile(''FILE'',[...]) : dyncompile(''FILE'') with options [...]'),
	writeln('  dynconsult(''FILE'')       : dyncompile FILE.flr; dynamically load FILE.P'),
	writeln('  dynconsult(''FILE'',[...]) : dynconsult(''FILE'') with options [...]'),
	writeln('  dynload(''FILE[.EXT]'')    : dynamically load FILE.flr or FILE.P'),
	writeln('  {''FILE[.EXT]'',...}       : dynload a list of .flr or .P files'),
	writeln('  rundemo(''FILE'')          : flconsult a demo from FLORA demos directory'),
	writeln('  rundemo(''FILE'',[...])    : rundemo(''FILE'') with options [...]'),
	writeln('  all                      : show all solutions (default)'),
	writeln('  one                      : show solutions one by one'),
	writeln('  maxerr(all/N)            : set/show the max number of errors FLORA reports'),
	writeln('  end                      : say CIAO to FLORA'),
	writeln('  halt                     : quit FLORA and XSB').


/*********************************************************************/
rundemo(X,Dtvs) :-
	'_$_$_flora_check_filename'(X),
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(Demo,'%s%sdemos%s%s',f(FloraDir,S,S,X)),
	flconsult(Demo,Dtvs).

rundemo(X) :-
	'_$_$_flora_check_filename'(X),
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(Demo,'%s%sdemos%s%s',f(FloraDir,S,S,X)),
	flconsult(Demo).


/*********************************************************************/
all :-
	( '_$_$_flora_switch'(all) ->
	    true
	  ;
	    trie_assert('_$_$_flora_switch'(all))
	).


/*********************************************************************/
one :-
	trie_retract_all('_$_$_flora_switch'(all)).


/*********************************************************************/
end :-
	unload_package(flora),
	nl, writeln('CIAO !'), nl,
	pop_abort_cutpoint,
	abort.


/*********************************************************************/
flcompile_all_demos  :-
	package_configuration(dir(flora),FloraDir),
	slash(S),
	fmt_write_string(F1,'%s%sdemos%sdefault',f(FloraDir,S,S)),
	fmt_write_string(F2,'%s%sdemos%sfamily_obj',f(FloraDir,S,S)),
	fmt_write_string(F3,'%s%sdemos%sfamily_rel',f(FloraDir,S,S)),
	fmt_write_string(F4,'%s%sdemos%sflogic_basics',f(FloraDir,S,S)),
	fmt_write_string(F5,'%s%sdemos%srel_ops',f(FloraDir,S,S)),
	'_$_$_flora_flcompile'(static_mode,[],F1,noforce,_),
	'_$_$_flora_flcompile'(static_mode,[],F2,noforce,_),
	'_$_$_flora_flcompile'(static_mode,[],F3,noforce,_),
	'_$_$_flora_flcompile'(static_mode,[],F4,noforce,_),
	'_$_$_flora_flcompile'(static_mode,[],F5,noforce,_).


/********************************************************************/
:- table '_$_$_flora_fd_dyn'/3.
:- table '_$_$_flora_mvd_dyn'/3.
:- table '_$_$_flora_ifd_dyn'/3.
:- table '_$_$_flora_imvd_dyn'/3.
:- table '_$_$_flora_isa_dyn'/2.
:- table '_$_$_flora_sub_dyn'/2.
:- table '_$_$_flora_fs_dyn'/3.
:- table '_$_$_flora_mvs_dyn'/3.
:- table '_$_$_flora_mvd_dyn'/2.
:- table '_$_$_flora_imvd_dyn'/2.
:- table '_$_$_flora_exists_dyn'/1.
:- table '_$_$_flora_fd_rhs_dyn'/3.
:- table '_$_$_flora_mvd_rhs_dyn'/3.
:- table '_$_$_flora_ifd_rhs_dyn'/3.
:- table '_$_$_flora_imvd_rhs_dyn'/3.
:- table '_$_$_flora_isa_rhs_dyn'/2.
:- table '_$_$_flora_sub_rhs_dyn'/2.
:- table '_$_$_flora_fs_rhs_dyn'/3.
:- table '_$_$_flora_mvs_rhs_dyn'/3.
:- table '_$_$_flora_mvd_rhs_dyn'/2.
:- table '_$_$_flora_imvd_rhs_dyn'/2.


:- dynamic '_$_$_flora_fd_dyn'/3.
:- dynamic '_$_$_flora_mvd_dyn'/3.
:- dynamic '_$_$_flora_ifd_dyn'/3.
:- dynamic '_$_$_flora_imvd_dyn'/3.
:- dynamic '_$_$_flora_isa_dyn'/2.
:- dynamic '_$_$_flora_sub_dyn'/2.
:- dynamic '_$_$_flora_fs_dyn'/3.
:- dynamic '_$_$_flora_mvs_dyn'/3.
:- dynamic '_$_$_flora_mvd_dyn'/2.
:- dynamic '_$_$_flora_imvd_dyn'/2.
:- dynamic '_$_$_flora_exists_dyn'/1.
:- dynamic '_$_$_flora_fd_rhs_dyn'/3.
:- dynamic '_$_$_flora_mvd_rhs_dyn'/3.
:- dynamic '_$_$_flora_ifd_rhs_dyn'/3.
:- dynamic '_$_$_flora_imvd_rhs_dyn'/3.
:- dynamic '_$_$_flora_isa_rhs_dyn'/2.
:- dynamic '_$_$_flora_sub_rhs_dyn'/2.
:- dynamic '_$_$_flora_fs_rhs_dyn'/3.
:- dynamic '_$_$_flora_mvs_rhs_dyn'/3.
:- dynamic '_$_$_flora_mvd_rhs_dyn'/2.
:- dynamic '_$_$_flora_imvd_rhs_dyn'/2.


'_$_$_flora_fd'(O,M,R)       :- '_$_$_flora_fd_dyn'(O,M,R).
'_$_$_flora_mvd'(O,M,R)      :- '_$_$_flora_mvd_dyn'(O,M,R).
'_$_$_flora_ifd'(O,M,R)      :- '_$_$_flora_ifd_dyn'(O,M,R).
'_$_$_flora_imvd'(O,M,R)     :- '_$_$_flora_imvd_dyn'(O,M,R).
'_$_$_flora_isa'(O1,O2)      :- '_$_$_flora_isa_dyn'(O1,O2).
'_$_$_flora_sub'(O1,O2)      :- '_$_$_flora_sub_dyn'(O1,O2).
'_$_$_flora_fs'(O,M,R)       :- '_$_$_flora_fs_dyn'(O,M,R).
'_$_$_flora_mvs'(O,M,R)      :- '_$_$_flora_mvs_dyn'(O,M,R).
'_$_$_flora_mvd'(O1,O2)      :- '_$_$_flora_mvd_dyn'(O1,O2).
'_$_$_flora_imvd'(O1,O2)     :- '_$_$_flora_imvd_dyn'(O1,O2).
'_$_$_flora_exists'(O)       :- '_$_$_flora_exists_dyn'(O).
'_$_$_flora_fd_rhs'(O,M,R)   :- '_$_$_flora_fd_rhs_dyn'(O,M,R).
'_$_$_flora_mvd_rhs'(O,M,R)  :- '_$_$_flora_mvd_rhs_dyn'(O,M,R).
'_$_$_flora_ifd_rhs'(O,M,R)  :- '_$_$_flora_ifd_rhs_dyn'(O,M,R).
'_$_$_flora_imvd_rhs'(O,M,R) :- '_$_$_flora_imvd_rhs_dyn'(O,M,R).
'_$_$_flora_isa_rhs'(O1,O2)  :- '_$_$_flora_isa_rhs_dyn'(O1,O2).
'_$_$_flora_sub_rhs'(O1,O2)  :- '_$_$_flora_sub_rhs_dyn'(O1,O2).
'_$_$_flora_fs_rhs'(O,M,R)   :- '_$_$_flora_fs_rhs_dyn'(O,M,R).
'_$_$_flora_mvs_rhs'(O,M,R)  :- '_$_$_flora_mvs_rhs_dyn'(O,M,R).
'_$_$_flora_mvd_rhs'(O1,O2)  :- '_$_$_flora_mvd_rhs_dyn'(O1,O2).
'_$_$_flora_imvd_rhs'(O1,O2) :- '_$_$_flora_imvd_rhs_dyn'(O1,O2).


/********************************************************************/
