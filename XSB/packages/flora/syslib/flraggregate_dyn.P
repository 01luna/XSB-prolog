/* File:        flraggregate_dyn.P: 
**     	        trailer appended automatically by the FLORA compiler
**
** Author(s): Guizhen Yang 
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flraggregate_dyn.P,v 1.5 1999-09-06 17:32:41 kifer Exp $
** 
*/

:- compiler_options([xpp_on]).
/*  This one is for CPP
    #define STD_FPREFIX(X)    'dyn_$_$_flora_' ## X
*/
#define STD_FPREFIX(X)    'dyn_$_$_flora_''X'


:- import
	var/1, functor/3, arg/3, telling/1, tell/1, nl/0, writeln/1, number/1
   from standard.

:- import member/2, length/2 from basics.

:- import findall/3, sort/2 from setof.

:- import STD_FPREFIX(warning_nl)/1 from flrutils.


/****************************************************************************
  rules for aggregates
****************************************************************************/
STD_FPREFIX(min)(G,Matches,Min) :-
	( G = nogrp ->
	    Matches=[H|T],
	    STD_FPREFIX(minaux1)(T,H,Min)

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp, member(flora_rslt(_,Grp), Matches), L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    DL=[H|T],
	    STD_FPREFIX(minaux1)(T,H,Min)

	  ;
	    Matches=[flora_rslt(D,_)|T],
	    STD_FPREFIX(minaux2)(T,D,Min)
	).

STD_FPREFIX(minaux1)([],X,X).
STD_FPREFIX(minaux1)([H|T],X,N) :-
	(H @< X
	->  STD_FPREFIX(minaux1)(T,H,N)
	;   STD_FPREFIX(minaux1)(T,X,N)
	).

STD_FPREFIX(minaux2)([],X,X).
STD_FPREFIX(minaux2)([flora_rslt(D,_)|T],X,N) :-
	(D @< X
	->  STD_FPREFIX(minaux2)(T,D,N)
	;   STD_FPREFIX(minaux2)(T,X,N)
	).


/****************************************************************************/
STD_FPREFIX(max)(G,Matches,Max) :-
	( G = nogrp ->
	    Matches=[H|T],
	    STD_FPREFIX(maxaux1)(T,H,Max)

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    DL=[H|T],
	    STD_FPREFIX(maxaux1)(T,H,Max)

	  ;
	    Matches=[flora_rslt(D,_)|T],
	    STD_FPREFIX(maxaux2)(T,D,Max)
	).

STD_FPREFIX(maxaux1)([],X,X).
STD_FPREFIX(maxaux1)([H|T],X,N) :-
	(H @> X
	->  STD_FPREFIX(maxaux1)(T,H,N)
	;   STD_FPREFIX(maxaux1)(T,X,N)
	).

STD_FPREFIX(maxaux2)([],X,X).
STD_FPREFIX(maxaux2)([flora_rslt(D,_)|T],X,N) :-
	(D @> X
	->  STD_FPREFIX(maxaux2)(T,D,N)
	;   STD_FPREFIX(maxaux2)(T,X,N)
	).


/****************************************************************************/
STD_FPREFIX(sum)(G,Matches,Sum) :-
	( G = nogrp ->
	    STD_FPREFIX(sumaux1)(Matches,X,Sum,Warning)

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D, member(flora_rslt(D,G), Matches), DL),
	    STD_FPREFIX(sumaux1)(DL,X,Sum,Warning)

	  ;
	    STD_FPREFIX(sumaux2)(Matches,X,Sum,Warning), !
	),
	( var(Warning) ->
	    true
	  ;
	    STD_FPREFIX(warning_nl)('discarding non-numeric objects while computing sum')
	).

STD_FPREFIX(sumaux1)([],X,X,_) :-
	(var(X) -> fail ; true).

STD_FPREFIX(sumaux1)([H|T],X,N,Warning) :-
	( number(H) ->
	    (var(X) -> S=H ; S is X+H),
	    STD_FPREFIX(sumaux1)(T,S,N,Warning)

	  ;
	    Warning=warning,
	    STD_FPREFIX(sumaux1)(T,X,N,_)
	).

STD_FPREFIX(sumaux2)([],X,X,_) :-
	(var(X) -> fail ; true).

STD_FPREFIX(sumaux2)([flora_rslt(D,_)|T],X,N,Warning) :-
	( number(D) ->
	    (var(X) -> S=D ; S is X+D),
	    STD_FPREFIX(sumaux2)(T,S,N,Warning)

	  ;
	    Warning=warning,
	    STD_FPREFIX(sumaux2)(T,X,N,_)
	).


/****************************************************************************/
STD_FPREFIX(avg)(G,Matches,Avg) :-
	( G = nogrp ->
	    STD_FPREFIX(avgaux1)(Matches,X1,X2,Avg,Warning)

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    STD_FPREFIX(avgaux1)(DL,X1,X2,Avg,Warning)

	  ;
	    STD_FPREFIX(avgaux2)(L,X1,X2,Avg,Warning)
	),
	( var(Warning) ->
	    true
	  ;
	    STD_FPREFIX(warning_nl)('discarding non-numeric objects while computing average')
	).

STD_FPREFIX(avgaux1)([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

STD_FPREFIX(avgaux1)([H|T],X1,X2,Avg,Warning) :-
	( number(H) ->
	    (var(X1) -> S=H, N=1 ; S is X1+H, N is X2+1),
	    STD_FPREFIX(avgaux1)(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    STD_FPREFIX(avgaux1)(T,X1,X2,Avg,_)
	).

STD_FPREFIX(avgaux2)([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

STD_FPREFIX(avgaux2)([flora_rslt(D,_)|T],X1,X2,Avg,Warning) :-
	( number(D) ->
	    (var(X1) -> S=D, N=1 ; S is X1+D, N is X2+1),
	    STD_FPREFIX(avgaux2)(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    STD_FPREFIX(avgaux2)(T,X1,X2,Avg,_)
	).


/****************************************************************************/
STD_FPREFIX(count)(G,Matches,Count) :-
	( STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    length(DL,Count)

	  ;
	    length(Matches,Count)
	).


/****************************************************************************/
STD_FPREFIX(collectset)(G,Matches,Set) :-
	( G = nogrp ->
	    sort(Matches,Set)

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    sort(DL,Set)

	  ;
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    sort(DL,Set)
	).


/****************************************************************************/
STD_FPREFIX(collectbag)(G,Matches,Bag) :-
	( G = nogrp ->
	    Bag=Matches

	  ; STD_FPREFIX(var_exists)(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),Bag)

	  ;
	    findall(D,member(flora_rslt(D,G),Matches),Bag)
	).


/****************************************************************************/
STD_FPREFIX(var_exists)(X) :- var(X), !.

STD_FPREFIX(var_exists)(T) :-
	functor(T,_,N),
	STD_FPREFIX(var_exists)(T,N).

STD_FPREFIX(var_exists)(T,N) :-
	N>=1,
	arg(N,T,Arg),
	( STD_FPREFIX(var_exists)(Arg) ->
	    !
	  ;
	    M is N-1,
	    STD_FPREFIX(var_exists)(T,M)
	).


/*******************  End of flraggregate_dyn.P  ********************/

