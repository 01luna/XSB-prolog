/* File:        flraggregate_dyn.P: 
**     	        trailer appended automatically by the FLORA compiler
**
** Author(s): Guizhen Yang 
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flraggregate_dyn.P,v 1.3 1999-08-23 04:11:03 kifer Exp $
** 
*/


:- import
	var/1, functor/3, arg/3, telling/1, tell/1, nl/0, writeln/1, number/1
   from standard.

:- import member/2, length/2 from basics.

:- import findall/3, sort/2 from setof.

:- import flora_warning_nl/1 from flrutils.


/****************************************************************************
  rules for aggregates
****************************************************************************/
'_$_$_flora_min_dyn'(G,Matches,Min) :-
	( G = nogrp ->
	    Matches=[H|T],
	    '_$_$_flora_minaux1_dyn'(T,H,Min)

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    DL=[H|T],
	    '_$_$_flora_minaux1_dyn'(T,H,Min)

	  ;
	    Matches=['_$_$_flora_rslt'(D,_)|T],
	    '_$_$_flora_minaux2_dyn'(T,D,Min)
	).

'_$_$_flora_minaux1_dyn'([],X,X).
'_$_$_flora_minaux1_dyn'([H|T],X,N) :-
	(H @< X -> '_$_$_flora_minaux1_dyn'(T,H,N) ; '_$_$_flora_minaux1_dyn'(T,X,N)).

'_$_$_flora_minaux2_dyn'([],X,X).
'_$_$_flora_minaux2_dyn'(['_$_$_flora_rslt'(D,_)|T],X,N) :-
	(D @< X -> '_$_$_flora_minaux2_dyn'(T,D,N) ; '_$_$_flora_minaux2_dyn'(T,X,N)).


/****************************************************************************/
'_$_$_flora_max_dyn'(G,Matches,Max) :-
	( G = nogrp ->
	    Matches=[H|T],
	    '_$_$_flora_maxaux1_dyn'(T,H,Max)

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    DL=[H|T],
	    '_$_$_flora_maxaux1_dyn'(T,H,Max)

	  ;
	    Matches=['_$_$_flora_rslt'(D,_)|T],
	    '_$_$_flora_maxaux2_dyn'(T,D,Max)
	).

'_$_$_flora_maxaux1_dyn'([],X,X).
'_$_$_flora_maxaux1_dyn'([H|T],X,N) :-
	(H @> X -> '_$_$_flora_maxaux1_dyn'(T,H,N) ; '_$_$_flora_maxaux1_dyn'(T,X,N)).

'_$_$_flora_maxaux2_dyn'([],X,X).
'_$_$_flora_maxaux2_dyn'(['_$_$_flora_rslt'(D,_)|T],X,N) :-
	(D @> X -> '_$_$_flora_maxaux2_dyn'(T,D,N) ; '_$_$_flora_maxaux2_dyn'(T,X,N)).


/****************************************************************************/
'_$_$_flora_sum_dyn'(G,Matches,Sum) :-
	( G = nogrp ->
	    '_$_$_flora_sumaux1_dyn'(Matches,X,Sum,Warning)

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    '_$_$_flora_sumaux1_dyn'(DL,X,Sum,Warning)

	  ;
	    '_$_$_flora_sumaux2_dyn'(Matches,X,Sum,Warning), !
	),
	( var(Warning) ->
	    true
	  ;
	    flora_warning_nl('discarding non-numeric objects while computing sum')
	).

'_$_$_flora_sumaux1_dyn'([],X,X,_) :-
	(var(X) -> fail ; true).

'_$_$_flora_sumaux1_dyn'([H|T],X,N,Warning) :-
	( number(H) ->
	    (var(X) -> S=H ; S is X+H),
	    '_$_$_flora_sumaux1_dyn'(T,S,N,Warning)

	  ;
	    Warning=warning,
	    '_$_$_flora_sumaux1_dyn'(T,X,N,_)
	).

'_$_$_flora_sumaux2_dyn'([],X,X,_) :-
	(var(X) -> fail ; true).

'_$_$_flora_sumaux2_dyn'(['_$_$_flora_rslt'(D,_)|T],X,N,Warning) :-
	( number(D) ->
	    (var(X) -> S=D ; S is X+D),
	    '_$_$_flora_sumaux2_dyn'(T,S,N,Warning)

	  ;
	    Warning=warning,
	    '_$_$_flora_sumaux2_dyn'(T,X,N,_)
	).


/****************************************************************************/
'_$_$_flora_avg_dyn'(G,Matches,Avg) :-
	( G = nogrp ->
	    '_$_$_flora_avgaux1_dyn'(Matches,X1,X2,Avg,Warning)

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    '_$_$_flora_avgaux1_dyn'(DL,X1,X2,Avg,Warning)

	  ;
	    '_$_$_flora_avgaux2_dyn'(L,X1,X2,Avg,Warning)
	),
	( var(Warning) ->
	    true
	  ;
	    flora_warning_nl('discarding non-numeric objects while computing average')
	).

'_$_$_flora_avgaux1_dyn'([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

'_$_$_flora_avgaux1_dyn'([H|T],X1,X2,Avg,Warning) :-
	( number(H) ->
	    (var(X1) -> S=H, N=1 ; S is X1+H, N is X2+1),
	    '_$_$_flora_avgaux1_dyn'(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    '_$_$_flora_avgaux1_dyn'(T,X1,X2,Avg,_)
	).

'_$_$_flora_avgaux2_dyn'([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

'_$_$_flora_avgaux2_dyn'(['_$_$_flora_rslt'(D,_)|T],X1,X2,Avg,Warning) :-
	( number(D) ->
	    (var(X1) -> S=D, N=1 ; S is X1+D, N is X2+1),
	    '_$_$_flora_avgaux2_dyn'(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    '_$_$_flora_avgaux2_dyn'(T,X1,X2,Avg,_)
	).


/****************************************************************************/
'_$_$_flora_count_dyn'(G,Matches,Count) :-
	( '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    length(DL,Count)

	  ;
	    length(Matches,Count)
	).


/****************************************************************************/
'_$_$_flora_collectset_dyn'(G,Matches,Set) :-
	( G = nogrp ->
	    sort(Matches,Set)

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    sort(DL,Set)

	  ;
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),DL),
	    sort(DL,Set)
	).


/****************************************************************************/
'_$_$_flora_collectbag_dyn'(G,Matches,Bag) :-
	( G = nogrp ->
	    Bag=Matches

	  ; '_$_$_flora_var_exists_dyn'(G) ->
	    findall(Grp,member('_$_$_flora_rslt'(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),Bag)

	  ;
	    findall(D,member('_$_$_flora_rslt'(D,G),Matches),Bag)
	).


/****************************************************************************/
'_$_$_flora_var_exists_dyn'(X) :- var(X), !.

'_$_$_flora_var_exists_dyn'(T) :-
	functor(T,_,N),
	'_$_$_flora_var_exists_dyn'(T,N).

'_$_$_flora_var_exists_dyn'(T,N) :-
	N>=1,
	arg(N,T,Arg),
	( '_$_$_flora_var_exists_dyn'(Arg) ->
	    !
	  ;
	    M is N-1,
	    '_$_$_flora_var_exists_dyn'(T,M)
	).


/*******************  End of flraggregate_dyn.P  ********************/

