/* File:        flrdebugger.P  -- Flora debugger
**
** Author(s): Michael Kifer
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrdebugger.P,v 1.2 1999-07-04 06:17:33 kifer Exp $
** 
*/


:- import package_configuration/2 from packaging.
:- import trie_assert/1, trie_retract_all/1 from tables.
:- import fmt_write/2 from file_io.
:- import debug_display_call_hook/1,
	'_$_$_flora_debugger_data_loaded'/0, '_$_$_flora_switch'/1
	from usermod.

:- dynamic debug_display_call_hook(_).
:- dynamic '_$_$_flora_switch'/1, '_$_$_flora_debugger_data_loaded'/0.
:- dynamic '_$_$_flora_debug_context'/1.

%%:- export '_$_$_flora_trace'/0, '_$_$_flora_notrace'/0.

:- trie_assert(debug_display_call_hook(flora_write_debug_goal)).


flora_write_debug_goal('_$_$_flora_isa_rhs'(X,Y)) :-
	!, flora_print_isa(X,Y).
flora_write_debug_goal('_$_$_flora_sub_rhs'(X,Y)) :-
	!, flora_print_sub(X,Y).
flora_write_debug_goal('_$_$_flora_fd_rhs'(O, M, V)) :-
	!, flora_print_fd(O,M,V).
flora_write_debug_goal('_$_$_flora_mvd_rhs'(O, M, V)) :-
	!, flora_print_mvd(O,M,V).

flora_write_debug_goal('_$_$_flora_assert'(L)) :-
	!, flora_print_assert(L).
flora_write_debug_goal('_$_$_flora_retract'(L,Cond)) :-
	!, flora_print_retract(L,Cond).
flora_write_debug_goal('_$_$_flora_retractall'(L,Cond)) :-
	!, flora_print_retractall(L,Cond).
flora_write_debug_goal('_$_$_flora_erase'(L,Cond)) :-
	!, flora_print_erase(L,Cond).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Findall-related calls
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% collectset (currently, this also handles collectbag, because it is 
%% hard to distinguish the two without a lookahead).
/*
flora_write_debug_goal(findall('_$_$_flora_rslt'(CollectVar,Grp),Goal,_Result)) :-
	Grp =.. ['_$_$_flora_grp' | GrpVars],
	!, 
	write('Set = collectset{ '),
	write(CollectVar),
	write(' [ '),
	'_$_$_flora_write_vars'(GrpVars),
	write(' ]; '),
	flora_write_debug_goal(Goal),
	write(' }').
*/


%% flora_print_all
flora_write_debug_goal(findall(X,Gs,_Res)) :-
	is_list(X),
	X = [var(_,_)|_],
	!,
	write('Query: { '),
	'_$_$_flora_write_vars'(X),
	write(' | '),
	flora_write_debug_goal(Gs),
	write(' }').

%% ','(Goal1,Goal2, ...). This comes from flora_print_all
flora_write_debug_goal(Call) :- 
	compound(Call),
	Call =.. [',' , Call1 | Rest],
	'_$_$_flora_debug_get_context'(Rest,Context),
	!,
	flora_write_debug_goal(Call1, Context).


%% aggregates -- they come with context obtained from ','(Goal1,Goal2, ...)
flora_write_debug_goal(Call) :- 
	functor(Call, findall, 3),
	'_$_$_flora_debug_context'(Context),
	!,
	flora_write_debug_goal(Call, Context).


/*********************************************************************/
%% Catch-all cases

flora_write_debug_goal(Call) :- write(Call).

/*********************************************************************/
%% Context-sensitive flora_write_debug_goal's

flora_write_debug_goal(findall('_$_$_flora_rslt'(CollectVar,Grp),Goal,_Result),
		       Context) :-
	Grp =.. ['_$_$_flora_grp' | GrpVars],
	!, 
	(Context == collectset -> write('Set = collectset{ ') ;  true),
	(Context == collectbag -> write('Set = collectbag{ ') ;  true),
	(Context == min -> write('Res = min{ ') ;  true),
	(Context == max -> write('Res = max{ ') ;  true),
	(Context == avg -> write('Res = avg{ ') ;  true),
	(Context == sum -> write('Res = sum{ ') ;  true),
	write(CollectVar),
	write(' [ '),
	'_$_$_flora_write_vars'(GrpVars),
	write(' ]; '),
	flora_write_debug_goal(Goal),
	write(' }').
%% None of the above contexts
flora_write_debug_goal(Goal, none) :-
	!, flora_write_debug_goal(Goal).

'_$_$_flora_debug_get_context'([SecondaryGoals | _], Context) :-
    	SecondaryGoals =.. [',' , Goal2 | _Rest],
	nonvar(Goal2),
	Goal2 =.. [ContextPred | _Rest1],
	(ContextPred == '_$_$_flora_collectset' -> Context = collectset; true),
	(ContextPred == '_$_$_flora_collectbag' -> Context = collectbag; true),
	(ContextPred == '_$_$_flora_min' -> Context = min; true),
	(ContextPred == '_$_$_flora_max' -> Context = max; true),
	(ContextPred == '_$_$_flora_avg' -> Context = avg; true),
	(ContextPred == '_$_$_flora_sum' -> Context = sum; true),
	(var(ContextPred) -> Context = none; true),
	!,
	retractall('_$_$_flora_debug_context'(_)),
	assert('_$_$_flora_debug_context'(Context)).
	 

/*********************************************************************/

flora_print_isa(X,Y) :- 
	'_$_$_flora_debug_write_value'(X),
	write(' : '),
	'_$_$_flora_debug_write_value'(Y).
flora_print_sub(X,Y) :-
	'_$_$_flora_debug_write_value'(X),
	write(' :: '),
	'_$_$_flora_debug_write_value'(Y).

flora_print_fd(O,M,V) :-
	'_$_$_flora_debug_write_value'(O),
	write('['),
	'_$_$_flora_debug_write_method_invocation'(M),
	write(' -> '),
	'_$_$_flora_debug_write_value'(V),
	write(']').
flora_print_mvd(O,M,V) :-
	'_$_$_flora_debug_write_value'(O),
	write('['),
	'_$_$_flora_debug_write_method_invocation'(M),
	write(' ->> '),
	'_$_$_flora_debug_write_value'(V),
	write(']').

flora_print_assert(L) :- write('assert('), flora_print_assert1(L).
flora_print_assert1([]) :- !, write(')').
flora_print_assert1([A | R]) :-
	( A = '_$_$_flora_isa_dyn'(X,Y) ->
	    flora_print_isa(X,Y)
	; A = '_$_$_flora_sub_dyn'(X,Y) ->
	    flora_print_sub(X,Y)
	; A = '_$_$_flora_fd_dyn'(O,M,V) ->
	    flora_print_fd(O,M,V)
	; A = '_$_$_flora_mvd_dyn'(O,M,V) ->
	    flora_print_mvd(O,M,V)
	),
	(R = [] ; write(', ')),
	flora_print_assert1(R).

flora_print_retract(L,Cond) :- write('retract('), flora_print_retract1(L,Cond).
flora_print_retractall(L,C) :- write('retractall('), flora_print_retract1(L,C).
flora_print_erase(L,Cond) :- write('erase('), flora_print_retract1(L,Cond).

flora_print_retract1([],[]) :- !, write(')').
%% Need to do a better job printing L
flora_print_retract1([],Cond) :- !, fmt_write('| %S )', arg(Cond)).
flora_print_retract1([A | R],Cond) :-
	flora_print_retract_molecule(A),
	(R = [], !
	 ;   write(', ')
	),
	flora_print_retract1(R,Cond).

flora_print_retract_molecule('_$_$_flora_rtrct'(A)) :-
	( A = '_$_$_flora_isa_dyn'(X,Y) ->
	    flora_print_isa(X,Y)
	; A = '_$_$_flora_sub_dyn'(X,Y) ->
	    flora_print_sub(X,Y)
	; A = '_$_$_flora_fd_dyn'(O,M,V) ->
	    flora_print_fd(O,M,V)
	; A = '_$_$_flora_mvd_dyn'(O,M,V) ->
	    flora_print_mvd(O,M,V)
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

'_$_$_flora_debug_write_value'(Val) :-
	atom(Val),
	!,
	fmt_write('''%s''', arg(Val)).
'_$_$_flora_debug_write_value'(Val) :-
	is_charlist(Val),
	!,
	fmt_write('"%s"', arg(Val)).
'_$_$_flora_debug_write_value'(Val) :- var(Val), !, write(Val).
'_$_$_flora_debug_write_value'(var(_N,Var)) :- !, write(Var).
'_$_$_flora_debug_write_value'(Val) :- write(Val).

'_$_$_flora_debug_write_method_invocation'([]).
'_$_$_flora_debug_write_method_invocation'([Attr]) :-
    	!, '_$_$_flora_debug_write_value'(Attr).
'_$_$_flora_debug_write_method_invocation'([M, Arg |Args]) :-
    	!, '_$_$_flora_debug_write_value'(M),
	write('@('),
	'_$_$_flora_debug_write_value'(Arg),
	'_$_$_flora_write_vars'(Args),
	write(')').
'_$_$_flora_debug_write_method_invocation'(M) :-
    	compound(M),
	M =.. [_Junk | MethArgs],
	!,
	'_$_$_flora_debug_write_method_invocation'(MethArgs).


%% Extracts and writes variables from the list [var(name,internalVar), ...]
%% or from the list [internalVar, internalVar, ...]
'_$_$_flora_write_vars'([]) :- !.
'_$_$_flora_write_vars'([V|Rest]) :- 
	var(V), !, '_$_$_flora_write_vars1'(V,Rest).
'_$_$_flora_write_vars'([var(_N,V)|Rest]) :- 
    	!, '_$_$_flora_write_vars1'(V,Rest).

'_$_$_flora_write_vars1'(V,Rest) :-
	write(V),
	(Rest = [] -> true
	 ; write(','), '_$_$_flora_write_vars'(Rest)
	).


/*********************************************************************/

'_$_$_flora_trace' :-
	flora_read_debugger_data,
	trie_assert('_$_$_flora_switch'(trace)).
'_$_$_flora_notrace' :- trie_retract_all('_$_$_flora_switch'(trace)).

flora_read_debugger_data :- '_$_$_flora_debugger_data_loaded', !.
flora_read_debugger_data :- 
	package_configuration(dir(flora), FlrSysLib),
	fmt_write_string(DebugDataFile,
			 '%s/syslib/flrdebug_data.P', arg(FlrSysLib)),
	see(DebugDataFile),
	repeat,
	    read(T),
	    (T = end_of_file -> true
	    	    	     ;  assert(T), fail
	    ),
	seen.
