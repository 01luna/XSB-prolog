/* File:        flrassert_dyn.P
**    	        trailer appended automatically by the FLORA compiler
**
** Author(s): Guizhen Yang 
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrassert_dyn.P,v 1.3 1999-08-28 20:09:05 kifer Exp $
** 
*/

:- compiler_options([cpp_on]).
#define STD_FPREFIX(X)    'dyn_$_$_flora_' ## X
#define DYN_FPREFIX(X)    'dyn_$_$_flora_' ## X


:- import var/1, call/1 from standard.

:- import clause/2 from assert.

:- import trie_assert/1, trie_retract_nr/1 from tables.


/*****************************************************************************
  rules for assert/retract
*****************************************************************************/
STD_FPREFIX('assert'([])).

STD_FPREFIX('assert'([H|T])) :-
	trie_assert(H),
	STD_FPREFIX('assert'(T)).


/****************************************************************************/
STD_FPREFIX('retract'(Gs,Cs)) :-
	STD_FPREFIX('prove_goals'(Gs,Fs)),
	STD_FPREFIX('prove_conditions'(Cs)),
	STD_FPREFIX('check_facts'(Fs)),
	STD_FPREFIX('retract_facts'(Fs)).


STD_FPREFIX('prove_goals'([],[])).

STD_FPREFIX('prove_goals'([flora_rtrct(G)|Gs],[G|Fs])) :-
	!,
	call(G),
	STD_FPREFIX('prove_goals'(Gs,Fs)).

STD_FPREFIX('prove_goals'([G|Gs],Fs)) :-
	call(G),
	STD_FPREFIX('prove_goals'(Gs,Fs)).


STD_FPREFIX('prove_conditions'([])).

STD_FPREFIX('prove_conditions'([C|Cs])) :-
	call(C),
	!,
	STD_FPREFIX('prove_conditions'(Cs)).


STD_FPREFIX('check_facts'([])).

STD_FPREFIX('check_facts'([H|Fs])) :-
	clause(H,true),
	STD_FPREFIX('check_facts'(Fs)).


STD_FPREFIX('retract_facts'([])).

STD_FPREFIX('retract_facts'([H|Fs])) :-
	trie_retract_nr((H :- true)),
	STD_FPREFIX('retract_facts'(Fs)).


/****************************************************************************/
STD_FPREFIX('retractall'(Gs,Cs)) :-
	STD_FPREFIX('retract'(Gs,Cs)),
	fail.

STD_FPREFIX('retractall'(_,_)).


/****************************************************************************/
STD_FPREFIX('erase'(Gs,Cs)) :-
	STD_FPREFIX('prove_goals'(Gs,Fs)),
	STD_FPREFIX('prove_conditions'(Cs)),
	STD_FPREFIX('check_facts'(Fs)),
	STD_FPREFIX('erase_facts'(Fs)).


STD_FPREFIX('erase_facts'([])).

STD_FPREFIX('erase_facts'([H|Fs])) :-
	STD_FPREFIX('erase_one_fact'(H)),
	STD_FPREFIX('erase_facts'(Fs)).


STD_FPREFIX('erase_one_fact'(G)) :-
	trie_retract_nr(G),
	( G = STD_FPREFIX('exists'(O))     -> true
	  ; G = STD_FPREFIX('isa'(O,_))    -> true
	  ; G = STD_FPREFIX('fd'(_,_,O))   -> true
	  ; G = STD_FPREFIX('mvd'(_,_,O))  -> true
	  ; G = STD_FPREFIX('ifd'(_,_,O))  -> true
	  ; G = STD_FPREFIX('imvd'(_,_,O)) -> true
	  ; G = STD_FPREFIX('fs'(_,_,O))   -> true
	  ; G = STD_FPREFIX('mvs'(_,_,O))  -> true
	  ; NextAction=no
	),
	( NextAction==no ->
	    true

	  ; var(O) ->
	    true
	  ;
	    STD_FPREFIX('erase_object'(O))
	).


STD_FPREFIX('erase_object'(O)) :-
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('exists'(O)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('isa'(O,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('sub'(O,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('fd'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('mvd'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('mvd'(O,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('ifd'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('imvd'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('imvd'(O,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('fs'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('mvs'(O,_,_)))],[])),
	STD_FPREFIX('eraseall'([flora_rtrct(DYN_FPREFIX('mvs'(O,_)))],[])).


/****************************************************************************/
STD_FPREFIX('eraseall'(Gs,Cs)) :-
	STD_FPREFIX('erase'(Gs,Cs)),
	fail.

STD_FPREFIX('eraseall'(_,_)).


/***********************  End of flrassert_syn.P  *******************/

