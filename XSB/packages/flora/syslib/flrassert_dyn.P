/* File:        flrassert_dyn.P
**    	        trailer appended automatically by the FLORA compiler
**
** Author(s): Guizhen Yang 
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrassert_dyn.P,v 1.2 1999-06-16 01:29:59 kifer Exp $
** 
*/


:- import var/1, call/1 from standard.

:- import clause/2 from assert.

:- import trie_assert/1, trie_retract_nr/1 from tables.


/*****************************************************************************
  rules for assert/retract
*****************************************************************************/
'_$_$_flora_assert_dyn'([]).

'_$_$_flora_assert_dyn'([H|T]) :-
	trie_assert(H),
	'_$_$_flora_assert_dyn'(T).


/****************************************************************************/
'_$_$_flora_retract_dyn'(Gs,Cs) :-
	'_$_$_flora_prove_goals_dyn'(Gs,Fs),
	'_$_$_flora_prove_conditions_dyn'(Cs),
	'_$_$_flora_check_facts_dyn'(Fs),
	'_$_$_flora_retract_facts_dyn'(Fs).


'_$_$_flora_prove_goals_dyn'([],[]).

'_$_$_flora_prove_goals_dyn'(['_$_$_flora_rtrct'(G)|Gs],[G|Fs]) :-
	!,
	call(G),
	'_$_$_flora_prove_goals_dyn'(Gs,Fs).

'_$_$_flora_prove_goals_dyn'([G|Gs],Fs) :-
	call(G),
	'_$_$_flora_prove_goals_dyn'(Gs,Fs).


'_$_$_flora_prove_conditions_dyn'([]).

'_$_$_flora_prove_conditions_dyn'([C|Cs]) :-
	call(C),
	!,
	'_$_$_flora_prove_conditions_dyn'(Cs).


'_$_$_flora_check_facts_dyn'([]).

'_$_$_flora_check_facts_dyn'([H|Fs]) :-
	clause(H,true),
	'_$_$_flora_check_facts_dyn'(Fs).


'_$_$_flora_retract_facts_dyn'([]).

'_$_$_flora_retract_facts_dyn'([H|Fs]) :-
	trie_retract_nr((H :- true)),
	'_$_$_flora_retract_facts_dyn'(Fs).


/****************************************************************************/
'_$_$_flora_retractall_dyn'(Gs,Cs) :-
	'_$_$_flora_retract_dyn'(Gs,Cs),
	fail.

'_$_$_flora_retractall_dyn'(_,_).


/****************************************************************************/
'_$_$_flora_erase_dyn'(Gs,Cs) :-
	'_$_$_flora_prove_goals_dyn'(Gs,Fs),
	'_$_$_flora_prove_conditions_dyn'(Cs),
	'_$_$_flora_check_facts_dyn'(Fs),
	'_$_$_flora_erase_facts_dyn'(Fs).


'_$_$_flora_erase_facts_dyn'([]).

'_$_$_flora_erase_facts_dyn'([H|Fs]) :-
	'_$_$_flora_erase_one_fact_dyn'(H),
	'_$_$_flora_erase_facts_dyn'(Fs).


'_$_$_flora_erase_one_fact_dyn'(G) :-
	trie_retract_nr(G),
	( G = '_$_$_flora_exists_dyn'(O)     -> true
	  ; G = '_$_$_flora_isa_dyn'(O,_)    -> true
	  ; G = '_$_$_flora_fd_dyn'(_,_,O)   -> true
	  ; G = '_$_$_flora_mvd_dyn'(_,_,O)  -> true
	  ; G = '_$_$_flora_ifd_dyn'(_,_,O)  -> true
	  ; G = '_$_$_flora_imvd_dyn'(_,_,O) -> true
	  ; G = '_$_$_flora_fs_dyn'(_,_,O)   -> true
	  ; G = '_$_$_flora_mvs_dyn'(_,_,O)  -> true
	  ; NextAction=no
	),
	( NextAction==no ->
	    true

	  ; var(O) ->
	    true
	  ;
	    '_$_$_flora_erase_object_dyn'(O)
	).


'_$_$_flora_erase_object_dyn'(O) :-
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_exists_dyn'(O))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_isa_dyn'(O,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_sub_dyn'(O,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_fd_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_mvd_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_mvd_dyn'(O,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_ifd_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_imvd_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_imvd_dyn'(O,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_fs_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_mvs_dyn'(O,_,_))],[]),
	'_$_$_flora_eraseall_dyn'(['_$_$_flora_rtrct'('_$_$_flora_mvs_dyn'(O,_))],[]).


/****************************************************************************/
'_$_$_flora_eraseall_dyn'(Gs,Cs) :-
	'_$_$_flora_erase_dyn'(Gs,Cs),
	fail.

'_$_$_flora_eraseall_dyn'(_,_).


/***********************  End of flrassert_syn.P  *******************/

