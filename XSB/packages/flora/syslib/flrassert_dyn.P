/* File:        flrassert_dyn.P
**    	        trailer appended automatically by the FLORA compiler
**
** Author(s): Guizhen Yang 
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
**
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
** 
** $Id: flrassert_dyn.P,v 1.6 1999-11-21 05:52:39 kifer Exp $
** 
*/

:- compiler_options([xpp_on]).

#define  VAR_FPREFIX_BASE  dyn_$_$_flora_
#include "flora_prefix.h"



:- import var/1, call/1 from standard.

:- import clause/2 from assert.

:- import trie_assert/1, trie_retract_nr/1 from tables.


/*****************************************************************************
  rules for assert/retract
*****************************************************************************/
VAR_FPREFIX(assert)([]).

VAR_FPREFIX(assert)([H|T]) :-
	trie_assert(H),
	VAR_FPREFIX(assert)(T).


/****************************************************************************/
VAR_FPREFIX(retract)(Gs,Cs) :-
	VAR_FPREFIX(prove_goals)(Gs,Fs),
	VAR_FPREFIX(prove_conditions)(Cs),
	VAR_FPREFIX(check_facts)(Fs),
	VAR_FPREFIX(retract_facts)(Fs).


VAR_FPREFIX(prove_goals)([],[]).

VAR_FPREFIX(prove_goals)([flora_rtrct(G)|Gs],[G|Fs]) :-
	!,
	call(G),
	VAR_FPREFIX(prove_goals)(Gs,Fs).

VAR_FPREFIX(prove_goals)([G|Gs],Fs) :-
	call(G),
	VAR_FPREFIX(prove_goals)(Gs,Fs).


VAR_FPREFIX(prove_conditions)([]).

VAR_FPREFIX(prove_conditions)([C|Cs]) :-
	call(C),
	!,
	VAR_FPREFIX(prove_conditions)(Cs).


VAR_FPREFIX(check_facts)([]).

VAR_FPREFIX(check_facts)([H|Fs]) :-
	clause(H,true),
	VAR_FPREFIX(check_facts)(Fs).


VAR_FPREFIX(retract_facts)([]).

VAR_FPREFIX(retract_facts)([H|Fs]) :-
	trie_retract_nr((H :- true)),
	VAR_FPREFIX(retract_facts)(Fs).


/****************************************************************************/
VAR_FPREFIX(retractall)(Gs,Cs) :-
	VAR_FPREFIX(retract)(Gs,Cs),
	fail.

VAR_FPREFIX(retractall)(_,_).


/****************************************************************************/
VAR_FPREFIX(erase)(Gs,Cs) :-
	VAR_FPREFIX(prove_goals)(Gs,Fs),
	VAR_FPREFIX(prove_conditions)(Cs),
	VAR_FPREFIX(check_facts)(Fs),
	VAR_FPREFIX(erase_facts)(Fs).


VAR_FPREFIX(erase_facts)([]).

VAR_FPREFIX(erase_facts)([H|Fs]) :-
	VAR_FPREFIX(erase_one_fact)(H),
	VAR_FPREFIX(erase_facts)(Fs).


VAR_FPREFIX(erase_one_fact)(G) :-
	trie_retract_nr(G),
	( G = VAR_FPREFIX(exists)(O)     -> true
	  ; G = VAR_FPREFIX(isa)(O,_)    -> true
	  ; G = VAR_FPREFIX(fd)(_,_,O)   -> true
	  ; G = VAR_FPREFIX(mvd)(_,_,O)  -> true
	  ; G = VAR_FPREFIX(ifd)(_,_,O)  -> true
	  ; G = VAR_FPREFIX(imvd)(_,_,O) -> true
	  ; G = VAR_FPREFIX(fs)(_,_,O)   -> true
	  ; G = VAR_FPREFIX(mvs)(_,_,O)  -> true
	  ; NextAction=no
	),
	( NextAction==no ->
	    true

	  ; var(O) ->
	    true
	  ;
	    VAR_FPREFIX(erase_object)(O)
	).


VAR_FPREFIX(erase_object)(O) :-
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(exists)(O))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(isa)(O,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(sub)(O,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(fd)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(mvd)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(mvd)(O,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(ifd)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(imvd)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(imvd)(O,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(fs)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(mvs)(O,_,_))],[]),
	VAR_FPREFIX(eraseall)([flora_rtrct(VAR_FPREFIX(mvs)(O,_))],[]).


/****************************************************************************/
VAR_FPREFIX(eraseall)(Gs,Cs) :-
	VAR_FPREFIX(erase)(Gs,Cs),
	fail.

VAR_FPREFIX(eraseall)(_,_).


#undef VAR_FPREFIX_BASE

/***********************  End of flrassert_syn.P  *******************/

