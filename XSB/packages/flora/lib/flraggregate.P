/*** lib/flraggregate.P: appended automatically by the FLORA compiler  *****/


:- import
	var/1, functor/3, arg/3, telling/1, tell/1, nl/0, writeln/1, number/1
   from standard.

:- import member/2, length/2 from basics.

:- import findall/3, sort/2 from setof.


/*****************************************************************************
  rules for aggregates
*****************************************************************************/
flora_min(G,Matches,Min) :-
	( G = nogrp ->
	    Matches=[H|T],
	    flora_minaux1(T,H,Min)

	  ; flora_var_exists(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    DL=[H|T],
	    flora_minaux1(T,H,Min)

	  ;
	    Matches=[flora_rslt(D,_)|T],
	    flora_minaux2(T,D,Min)
	).

flora_minaux1([],X,X).
flora_minaux1([H|T],X,N) :-
	(H @< X -> flora_minaux1(T,H,N) ; flora_minaux1(T,X,N)).

flora_minaux2([],X,X).
flora_minaux2([flora_rslt(D,_)|T],X,N) :-
	(D @< X -> flora_minaux2(T,D,N) ; flora_minaux2(T,X,N)).


/****************************************************************************/
flora_max(G,Matches,Max) :-
	( G = nogrp ->
	    Matches=[H|T],
	    flora_maxaux1(T,H,Max)

	  ; flora_var_exists(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    DL=[H|T],
	    flora_maxaux1(T,H,Max)

	  ;
	    Matches=[flora_rslt(D,_)|T],
	    flora_maxaux2(T,D,Max)
	).

flora_maxaux1([],X,X).
flora_maxaux1([H|T],X,N) :-
	(H @> X -> flora_maxaux1(T,H,N) ; flora_maxaux1(T,X,N)).

flora_maxaux2([],X,X).
flora_maxaux2([flora_rslt(D,_)|T],X,N) :-
	(D @> X -> flora_maxaux2(T,D,N) ; flora_maxaux2(T,X,N)).


/****************************************************************************/
flora_sum(G,Matches,Sum) :-
	( G = nogrp ->
	    flora_sumaux1(Matches,X,Sum,Warning)

	  ; flora_var_exists(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    flora_sumaux1(DL,X,Sum,Warning)

	  ;
	    flora_sumaux2(Matches,X,Sum,Warning), !
	),
	( var(Warning) ->
	    true
	  ;
	    telling(F),
	    tell(userout),
	    nl,
	    writeln('*** Warning: discarding non-numbers while computing sum'),
	    tell(F)
	).

flora_sumaux1([],X,X,_) :-
	(var(X) -> fail ; true).

flora_sumaux1([H|T],X,N,Warning) :-
	( number(H) ->
	    (var(X) -> S=H ; S is X+H),
	    flora_sumaux1(T,S,N,Warning)

	  ;
	    Warning=warning,
	    flora_sumaux1(T,X,N,_)
	).

flora_sumaux2([],X,X,_) :-
	(var(X) -> fail ; true).

flora_sumaux2([flora_rslt(D,_)|T],X,N,Warning) :-
	( number(D) ->
	    (var(X) -> S=D ; S is X+D),
	    flora_sumaux2(T,S,N,Warning)

	  ;
	    Warning=warning,
	    flora_sumaux2(T,X,N,_)
	).


/****************************************************************************/
flora_avg(G,Matches,Avg) :-
	( G = nogrp ->
	    flora_avgaux1(Matches,X1,X2,Avg,Warning)

	  ; flora_var_exists(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    flora_avgaux1(DL,X1,X2,Avg,Warning)

	  ;
	    flora_avgaux2(L,X1,X2,Avg,Warning)
	),
	( var(Warning) ->
	    true
	  ;
	    telling(F),
	    tell(userout),
	    nl,
	    writeln('*** Warning: discarding non-numbers while computing average'),
	    tell(F)
	).

flora_avgaux1([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

flora_avgaux1([H|T],X1,X2,Avg,Warning) :-
	( number(H) ->
	    (var(X1) -> S=H, N=1 ; S is X1+H, N is X2+1),
	    flora_avgaux1(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    flora_avgaux1(T,X1,X2,Avg,_)
	).

flora_avgaux2([],S,N,Avg,_) :-
	(var(S) -> fail ; Avg is S/N).

flora_avgaux2([flora_rslt(D,_)|T],X1,X2,Avg,Warning) :-
	( number(D) ->
	    (var(X1) -> S=D, N=1 ; S is X1+D, N is X2+1),
	    flora_avgaux2(T,S,N,Avg,Warning)

	  ;
	    Warning=warning,
	    flora_avgaux2(T,X1,X2,Avg,_)
	).


/****************************************************************************/
flora_count(G,Matches,Count) :-
	( flora_var_exists(G) ->
	    findall(Grp,member(flora_rslt(_,Grp),Matches),L),
	    sort(L,Groups),
	    member(G,Groups),
	    findall(D,member(flora_rslt(D,G),Matches),DL),
	    length(DL,Count)

	  ;
	    length(Matches,Count)
	).


/****************************************************************************/
flora_var_exists(X) :- var(X), !.

flora_var_exists(T) :-
	functor(T,_,N),
	flora_var_exists(T,N).

flora_var_exists(T,N) :-
	N>=1,
	arg(N,T,Arg),
	( flora_var_exists(Arg) ->
	    !
	  ;
	    M is N-1,
	    flora_var_exists(T,M)
	).


/***********************  End of lib/flraggregate.P  ************************/

