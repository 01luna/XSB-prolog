/*** lib/flrtrailer1.P: appended automatically by the FLORA compiler  *******/


/*****************************************************************************
  closure rules for X::Y
*****************************************************************************/
:- table flora_subclass/2.

flora_subclass(X,X) :- flora_sub(X,_).
flora_subclass(X,X) :- flora_sub(_,X).
flora_subclass(X,Y) :- flora_sub(X,Y).

flora_subclass(X,Y) :-
	flora_subclass(X,Z), 
	flora_subclass(Z,Y),
	(X \= Z -> true ; Z\=Y),
	( X = Y ->
	    write('*** Warning: cyclic subclass hierarchy: '),
	    write(X), write('::'), write(Z), write('::'), write(Y), nl
	  ;
	    true
	).


/*****************************************************************************
  closure rules for X:Y
*****************************************************************************/
:- table flora_isa/2.

flora_isa(O,C) :-
	flora_subclass(C1,C),
	flora_isa(O,C1).


/*****************************************************************************
  rules for behavior inheritance
*****************************************************************************/
:- table flora_fd/3.
:- table flora_mvd/3.

flora_fd(O,MethodArgs,R) :-
	flora_ifd(Class,MethodArgs,R),
	flora_isa(O,Class).

flora_mvd(O,MethodArgs,R) :-
	flora_imvd(Class,MethodArgs,R),
	flora_isa(O,Class).


/*****************************************************************************
  rules for congruence due to single-valued methods
*****************************************************************************/
:- table flora_eql/2.
:- table flora_metheql/2.

flora_eql(X,Y) :-
	flora_fd(O,M1,X),
	(M1=M2 ; flora_metheql(M1,M2)),
	flora_fd(O,M2,Y),
	not X=Y.

flora_eql(X,Y) :-
	flora_eql(O1,O2),
	flora_fd(O1,M1,X),
	(M1=M2 ; flora_metheql(M1,M2)),
	flora_fd(O2,M2,Y),
	not X=Y.

flora_eql(X,Y) :-
	flora_eql(X,Z),
	flora_eql(Z,Y),
	not X=Y.


flora_metheql(X,Y) :-
	( nonvar(X) ->
	    functor(X,'flora_@',N), N >= 1,
	    functor(Y,'flora_@',N)

	  ; nonvar(Y) ->
	    functor(Y,'flora_@',N), N >= 1,
	    functor(X,'flora_@',N)
	),
	flora_argeql(X,Y,N),
	not X=Y.


flora_argeql(_,_,0).

flora_argeql(X,Y,N) :-
	N >= 1,
	arg(N,X,Xn),
	arg(N,Y,Yn),
	(Xn=Yn ; flora_eql(Xn,Yn)),
	M is N-1,
	flora_argeql(X,Y,M).


/*****************************************************************************
  rules for object existence and empty result sets
*****************************************************************************/
:- table flora_exists/1.
:- table flora_mvd/2.
:- table flora_imvd/2.

flora_exists(X) :- flora_fd(X,_,_).
flora_exists(X) :- flora_fd(_,_,X).
flora_exists(X) :- flora_mvd(X,_,_).
flora_exists(X) :- flora_mvd(_,_,X).
flora_exists(X) :- flora_ifd(X,_,_).
flora_exists(X) :- flora_ifd(_,_,X).
flora_exists(X) :- flora_imvd(X,_,_).
flora_exists(X) :- flora_imvd(_,_,X).
flora_exists(X) :- flora_isa(X,_).
flora_exists(X) :- flora_isa(_,X).
flora_exists(X) :- flora_sub(X,_).
flora_exists(X) :- flora_sub(_,X).

flora_exists(X) :-
	flora_fd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_mvd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_ifd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_imvd(_,M,_),
	M =.. [_|L],
	member(X,L).


flora_mvd(O,M) :- flora_mvd(O,M,_).

flora_imvd(O,M) :- flora_imvd(O,M,_).


/*****************************************************************************
  rules for flattened path expressions on RHS
*****************************************************************************/
:- table flora_fd_rhs/3.
:- table flora_mvd_rhs/3.
:- table flora_ifd_rhs/3.
:- table flora_imvd_rhs/3.
:- table flora_mvd_rhs/2.
:- table flora_imvd_rhs/2.
:- table flora_isa_rhs/2.
:- table flora_sub_rhs/2.


/****************************************************************************/
flora_fd_rhs(Object,Method,Result) :-
	flora_fd(Object,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_fd_rhs(Object,Method,Result) :-
	flora_eql(Object,O),
	flora_fd(O,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_fd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_fd(Object,M,R),
	(M=Method ; flora_metheql(M,Method)).

flora_fd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_eql(Object,O),
	flora_fd(O,M,R),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_mvd_rhs(Object,Method,Result) :-
	flora_mvd(Object,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_mvd_rhs(Object,Method,Result) :-
	flora_eql(Object,O),
	flora_mvd(O,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_mvd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_mvd(Object,M,R),
	(M=Method ; flora_metheql(M,Method)).

flora_mvd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_eql(Object,O),
	flora_mvd(O,M,R),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_ifd_rhs(Object,Method,Result) :-
	flora_ifd(Object,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_ifd_rhs(Object,Method,Result) :-
	flora_eql(Object,O),
	flora_ifd(O,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_ifd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_ifd(Object,M,R),
	(M=Method ; flora_metheql(M,Method)).

flora_ifd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_eql(Object,O),
	flora_ifd(O,M,R),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_imvd_rhs(Object,Method,Result) :-
	flora_imvd(Object,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_imvd_rhs(Object,Method,Result) :-
	flora_eql(Object,O),
	flora_imvd(O,M,Result),
	(M=Method ; flora_metheql(M,Method)).

flora_imvd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_imvd(Object,M,R),
	(M=Method ; flora_metheql(M,Method)).

flora_imvd_rhs(Object,Method,Result) :-
	flora_eql(Result,R),
	flora_eql(Object,O),
	flora_imvd(O,M,R),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_mvd_rhs(Object,Method) :-
	flora_mvd(Object,M),
	(M=Method ; flora_metheql(M,Method)).

flora_mvd_rhs(Object,Method) :-
	flora_eql(Object,O),
	flora_mvd(O,M),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_imvd_rhs(Object,Method) :-
	flora_imvd(Object,M),
	(M=Method ; flora_metheql(M,Method)).

flora_imvd_rhs(Object,Method) :-
	flora_eql(Object,O),
	flora_imvd(O,M),
	(M=Method ; flora_metheql(M,Method)).

/****************************************************************************/
flora_isa_rhs(Object1,Object2) :-
	flora_isa(Object1,Object2).

flora_isa_rhs(Object1,Object2) :-
	flora_eql(Object1,O1),
	flora_isa(O1,Object2).

flora_isa_rhs(Object1,Object2) :-
	flora_eql(Object2,O2),
	flora_isa(Object1,O2).

flora_isa_rhs(Object1,Object2) :-
	flora_eql(Object1,O1),
	flora_eql(Object2,O2),
	flora_isa(O1,O2).

/****************************************************************************/
flora_sub_rhs(Object1,Object2) :-
	flora_subclass(Object1,Object2).

flora_sub_rhs(Object1,Object2) :-
	flora_eql(Object1,O1),
	flora_subclass(O1,Object2).

flora_sub_rhs(Object1,Object2) :-
	flora_eql(Object2,O2),
	flora_subclass(Object1,O2).

flora_sub_rhs(Object1,Object2) :-
	flora_eql(Object1,O1),
	flora_eql(Object2,O2),
	flora_subclass(O1,O2).

/*****************************************************************************
  complementary rules to protect against "undefined" error reported by XSB 
*****************************************************************************/
flora_fd(_,_,_)   :- fail.
flora_mvd(_,_,_)  :- fail.
flora_ifd(_,_,_)  :- fail.
flora_imvd(_,_,_) :- fail.
flora_fs(_,_,_)   :- fail.
flora_mvs(_,_,_)  :- fail.
flora_sub(_,_)    :- fail.
flora_isa(_,_)    :- fail.


/****************************  End of Trailer  ******************************/

