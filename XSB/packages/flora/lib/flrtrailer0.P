/*** lib/flrtrailer0.P: appended automatically by the FLORA compiler  *******/


/*****************************************************************************
  closure rules for X::Y
*****************************************************************************/
:- table flora_subclass/2.

flora_subclass(X,X) :- flora_sub(X,_).
flora_subclass(X,X) :- flora_sub(_,X).
flora_subclass(X,Y) :- flora_sub(X,Y).

flora_subclass(X,Y) :-
	flora_subclass(X,Z), 
	flora_subclass(Z,Y),
	(X \= Z -> true ; Z\=Y),
	( X = Y ->
	    write('*** Warning: cyclic subclass hierarchy: '),
	    write(X), write('::'), write(Z), write('::'), write(Y), nl
	  ;
	    true
	).


/*****************************************************************************
  closure rules for X:Y
*****************************************************************************/
:- table flora_isa/2.

flora_isa(O,C) :-
	flora_subclass(C1,C),
	flora_isa(O,C1).


/*****************************************************************************
  rules for behavior inheritance
*****************************************************************************/
:- table flora_fd/3.
:- table flora_mvd/3.

flora_fd(O,MethodArgs,R) :-
	flora_ifd(Class,MethodArgs,R),
	flora_isa(O,Class).

flora_mvd(O,MethodArgs,R) :-
	flora_imvd(Class,MethodArgs,R),
	flora_isa(O,Class).


/*****************************************************************************
  rules for object existence and empty result sets
*****************************************************************************/
:- table flora_exists/1.
:- table flora_mvd/2.
:- table flora_imvd/2.

flora_exists(X) :- flora_fd(X,_,_).
flora_exists(X) :- flora_fd(_,_,X).
flora_exists(X) :- flora_mvd(X,_,_).
flora_exists(X) :- flora_mvd(_,_,X).
flora_exists(X) :- flora_ifd(X,_,_).
flora_exists(X) :- flora_ifd(_,_,X).
flora_exists(X) :- flora_imvd(X,_,_).
flora_exists(X) :- flora_imvd(_,_,X).
flora_exists(X) :- flora_isa(X,_).
flora_exists(X) :- flora_isa(_,X).
flora_exists(X) :- flora_sub(X,_).
flora_exists(X) :- flora_sub(_,X).

flora_exists(X) :-
	flora_fd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_mvd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_ifd(_,M,_),
	M =.. [_|L],
	member(X,L).

flora_exists(X) :-
	flora_imvd(_,M,_),
	M =.. [_|L],
	member(X,L).


flora_mvd(O,M) :- flora_mvd(O,M,_).

flora_imvd(O,M) :- flora_imvd(O,M,_).


/*****************************************************************************
  rules for flattened path expressions on RHS
*****************************************************************************/
flora_fd_rhs(O,M,R)   :- flora_fd(O,M,R).
flora_mvd_rhs(O,M,R)  :- flora_mvd(O,M,R).
flora_ifd_rhs(O,M,R)  :- flora_ifd(O,M,R).
flora_imvd_rhs(O,M,R) :- flora_imvd(O,M,R).
flora_mvd_rhs(O,M)    :- flora_mvd(O,M).
flora_imvd_rhs(O,M)   :- flora_imvd(O,M).
flora_isa_rhs(O1,O2)  :- flora_isa(O1,O2).
flora_sub_rhs(O1,O2)  :- flora_subclass(O1,O2).


/*****************************************************************************
  complementary rules to protect against "undefined" error reported by XSB 
*****************************************************************************/
flora_fd(_,_,_)   :- fail.
flora_mvd(_,_,_)  :- fail.
flora_ifd(_,_,_)  :- fail.
flora_imvd(_,_,_) :- fail.
flora_fs(_,_,_)   :- fail.
flora_mvs(_,_,_)  :- fail.
flora_sub(_,_)    :- fail.
flora_isa(_,_)    :- fail.


/****************************  End of Trailer  ******************************/

