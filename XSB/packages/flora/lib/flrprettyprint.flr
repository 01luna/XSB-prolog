/* File:      flrprettyprint.flr
**
** Author(s): Michael Kifer
** Contact:   xsb-contact@cs.sunysb.edu
**
** Copyright (C) The Research Foundation of SUNY, 1999
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: flrprettyprint.flr,v 1.10 1999-07-02 08:09:47 kifer Exp $
**
*/

/*   To pretty print an object:
**	?- flora_prettyprint(obj).
**   To pretty print a class:
**        ?- flora_prettyprint_class(class).
**   To save result of a pretty-printed class in a file:
**        ?- flora_prettyprint_class(class,outfile).
**   To print class membership:
**        ?- flora_prettyprint_isa(class).
**   To save it in a file:
**        ?- flora_prettyprint_isa(class,outfile).
*/


%%:- export flora_prettyprint/1.


%% Methods to ignore during pretty printing
flora_print_ignore(print(pretty)).
flora_print_ignore(ignore(pretty)).

%% flora_prettyprint_class(+Class,+File)
flora_prettyprint_class(Class, OutFile) :-
	tell(OutFile),
    	flora_prettyprint_class(Class),
	told.

flora_prettyprint_class(Class) :-
	flora_pp_immediate_superclasses(Class),
    	flora_prettyprint(Class),
	X : Class,
	ground(X),  %% to ground X, if non-ground
	flora_prettyprint(X),
	fail.

flora_prettyprint(X) :-
	flora_pp_immediate_classes(X),
	flora_pp_write_header(X),
	flora_pp_write_body_scalar(X),
	flora_pp_write_body_set(X),
	writeln('].'), nl.

flora_pp_write_header(X) :-
    	atom(X),
	!,
    	fmt_write('''%s''[', f(X)),
    	nl.
flora_pp_write_header(X) :-
    	is_charlist(X),
	!,
    	fmt_write('"%s"[',arg(X)),
    	nl.
flora_pp_write_header(X) :- write(X), writeln('[').

%% Print out scalar methods
flora_pp_write_body_scalar(Obj) :-
    	MethLst1 = collectset{ML ; Obj[@M -> _], @M =.. ML},
	sort(MethLst1, MethLst2),
	flora_pp_write_body_scalar1(Obj, MethLst2).

%% Test if method is to be ignored and either skip it or print it.
flora_pp_write_body_scalar1(_, []).
flora_pp_write_body_scalar1(Obj, [MethInv|MethInvs]) :-
        MethInv = [M|Args],
	%%printable_object[ignore(pretty) ->> {M}],
	flora_print_ignore(M),
	!,
	%% skip this method
	flora_pp_write_body_scalar1(Obj, MethInvs).
flora_pp_write_body_scalar1(Obj, [MethInv|MethInvs]) :-
        MethInv = [M|Args],
	@M =.. MethInv,
	Obj[@M -> Val],
	write('    '), flora_pp_write_method_invocation(MethInv),
	write(' -> '), flora_pp_write_value(Val),
	flora_pp_write_semicolon_maybe(MethInvs),
	flora_pp_write_body_scalar1(Obj, MethInvs).

flora_pp_write_body_set(Obj) :-
    	MethLst1 = collectset{ML ; Obj[@M ->> _], @M =.. ML},
	sort(MethLst1, MethLst2),
	flora_pp_write_body_set1(Obj, MethLst2).

flora_pp_write_body_set1(_Obj, []).
flora_pp_write_body_set1(Obj, [MethInv|MethInvs]) :-
        MethInv = [M|Args],
	%%printable_object[ignore(pretty) ->> {M}],
	flora_print_ignore(M),
	!,
	%% skip this method
	flora_pp_write_body_set1(Obj, MethInvs).
flora_pp_write_body_set1(Obj, [MethInv|MethInvs]) :-
        MethInv = [M|Args],
	@M =.. MethInv,
	Vals = collectset{V; Obj[@M ->> V]},
	write('    '), flora_pp_write_method_invocation(MethInv),
	write(' ->> '), flora_pp_write_set(Vals),
	flora_pp_write_semicolon_maybe(MethInvs),
	flora_pp_write_body_set1(Obj, MethInvs).

%% Write semicolon, if List is not an empty list
flora_pp_write_semicolon_maybe([]) :- nl.
flora_pp_write_semicolon_maybe([_First| _Rest]) :- writeln(';').


flora_pp_write_method_invocation([]).
flora_pp_write_method_invocation([Attr]) :- 
    	flora_pp_write_value(Attr).
flora_pp_write_method_invocation([M, Arg |Args]) :-
    	flora_pp_write_value(M), write('@('), flora_pp_write_value(Arg),
	flora_pp_write_arglist(Args),
	write(')').

flora_pp_write_arglist([]).
flora_pp_write_arglist([Arg|Rest]) :-
    	write(','), flora_pp_write_value(Arg),
	flora_pp_write_arglist(Rest).

flora_pp_write_set(L) :-
    	write('{'),
	flora_pp_write_set1(L),
	write('}').

flora_pp_write_set1([]).
flora_pp_write_set1([Elt]) :- write(Elt).
flora_pp_write_set1([Elt, Elt2 | Rest]) :-
    	flora_pp_write_value(Elt), write(','),
	flora_pp_write_set1([Elt2|Rest]).
        
flora_pp_write_value(Val) :-
	atom(Val),
	!,
	fmt_write('''%s''', arg(Val)).
flora_pp_write_value(Val) :-
	is_charlist(Val),
	!,
	fmt_write('"%s"', arg(Val)).
flora_pp_write_value(Val) :- write(Val).

%% Print all the isa info in one shot.
flora_prettyprint_isa(Class) :-
	flora_pp_immediate_isa(Class),
	flora_pp_subclasses_isa(Class).
%% Same, but save in a file
flora_prettyprint_isa(Class, File) :-
	tell(File),
	flora_prettyprint_isa(Class),
	told.

flora_pp_immediate_isa(Class) :-
	X : Class, ground(X), ground(Class),
	%% no intermediate class
	tnot(flora_in_between_isa(X,Class)),
	flora_pp_write_value(X), write('		:  '),
	flora_pp_write_value(Class), nl,
	fail.
flora_pp_immediate_isa(_).

%% There is an intermediate class between X and Class
:- table flora_in_between_isa/2.
flora_in_between_isa(X,Class) :- X: C1, C1 \= Class, C1::Class.


flora_pp_subclasses_isa(Class) :-
	Sub :: Class,
	Sub \= Class,
	tnot(flora_in_between_sub(Sub,Class)),
	flora_pp_isa(Sub),
	fail.
flora_pp_subclasses_isa(_).

:- table flora_in_between_sub/2.
flora_in_between_sub(Sub,Class) :-
	Sub :: Sub1,
	Sub \= Sub1, Sub1 \= Class,
	Sub1 :: Class.
	
%% immediate classes of Obj
flora_pp_immediate_classes(Obj) :-
	Obj : Class, ground(Obj), ground(Class),
	tnot(flora_in_between_isa(Obj,Class)),
	flora_pp_write_value(Obj), write('	:  '),
	flora_pp_write_value(Class),
	write('.'), nl,
	fail.
flora_pp_immediate_classes(_Obj).

flora_pp_immediate_superclasses(Class) :-
	Class :: Super, ground(Super),
	Class \= Super,
	tnot(flora_in_between_sub(Class,Super)),
	flora_pp_write_value(Class),
	write('	:: '),
	flora_pp_write_value(Super),
	write('.'), nl,
	fail.
flora_pp_immediate_superclasses(_).
