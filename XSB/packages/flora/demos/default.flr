/* File:      default.flp
** Author(s): Bertram Ludaescher
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) Bertram Ludaescher, 1998
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: default.flr,v 1.5 1999-08-04 16:25:41 kifer Exp $
** 
*/


%%% ===========================================================================
%%% SOME SIMPLE EXAMPLES SHOWING SEVERAL F-LOGIC FEATURES 
%%% ===========================================================================

// new
:- table tc/2.


times_flies_like_an_arrow.		% a 0-ary PREDICATE (proposition)
fruit_flies_like_an_apple[].		% an OBJECT with empty specification []

e(a,b). e(b,a). e(b,c).			% a binary PREDICATE (graph)

tc(X,Y) :- e(X,Y).			% a RULE and ...
tc(X,Y) :- tc(X,Z), tc(Z,Y).		% ... a (doubly) RECURSIVE RULE

john:employee.				% INSTANCE : CLASS 
employee::person.			% SUBCLASS :: SUPERCLASS

person[age=>integer; kids=>>person].    % some (optional) SIGNATURE information

mary:employee[				% a more complex MOLECULE involving
	age->29;			% ... a SINGLE-VALUED (svd) method
	kids ->> {tim,leo};		% ... a MULTI-VALUED (mvd) method
	salary@(1998) -> a_lot		% ... a PARAMETERIZED (and svd) method
].

tim[hobbies ->> {stamps, snowboard}].	% somebodies hobbies

snowboard:dangerous_hobby.		% isn't it??

X[self->X].				% defines self


person[believes_in *->>			% INHERITABLE mvd method
       {something, something_else}].	% of CLASS person

person[instances ->> {X}] :- X:person.  % NON-INHERITABLE mvd method of person


%%% ===========================================================================
%%% now ask some QUERIES here (or INTERACTIVELY from the FLORA SHELL)
%%% ===========================================================================

?- times_flies_like_an_arrow.	% ==> `yes'

?- fruit_flies_like_an_apple[].	% ==> `yes'

?- tc(X,Y).			% computes the transitive closure of e(_,_)

?- X:person.			% What persons are there? (mary, john)
?- person[instances ->> {X}].	% ... same Q, but asked differently (see above)

?- X[believes_in ->> {Y}].	% Who believes in what?

?- X..kids[			% Whose kids
           self -> K;		% ... (and name the kid!)
	   hobbies ->>		% ... has hobbies
            {H:dangerous_hobby}	% ... which are dangerous?
]. 

// new
?- nl, write('mary[] ??'), mary[].

// new
?- nl, write('mary..kids[] ??'), mary..kids[].

// new
?- nl, write('On '), unix(date), 
       writeln('FLORA thanks you for giving it a chance!').
