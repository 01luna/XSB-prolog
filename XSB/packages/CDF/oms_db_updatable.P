:- compiler_options([ciao_directives]).

:- import member/2, length/2, append/3 from basics.
:- import odbc_sql/4 from odbc_call.

:- comment(module,
"
@section(Updatable External Object Data Sources)

OMS object data (objects and their attributes) can be stored and
retrieved from external tables within a relations database, accessible
through the ODBC interface.  Objects can be created and deleted and
their attributes can be added, deleted and updated.  The table(s) in
the external relational database are updated to reflect such changes.

An Updatable External Object Data Source is stored as a ""component"",
which is identified by a particular, unique, Source.

The external database table(s) of an Updatable External Object Data
Source must be of specific form(s), and represent objects and their
attributes in particular ways.  However, the ways supported are
general enough to allow reasonably natural external data
representations.

The main table in an Updatable External OMS Object Data Source is
called the Object Table.  An object table is a database table whose
rows represent objects to be seen within an OMS.  Such a set of
objects will share the same ""source"" in the OMS, indicating their
""component"".  

An Object Table contains a column which is the OMS object Native ID,
and that column must be a key for the object table.  The table may
have other columns that can be reflected as OMS attributes for the
objects.  Each such attribute must (clearly) be functional.  There may
also be other tables, called attribute tables, which have a foreign
key to the object table, and a column that can be reflected as an OMS
attribute for the object.  These attributes need not be functional.

An object table must be declared with the following fact.

ext_object_table(Source,TableName,NOidAttr,NameAttr,
		 con,MemberofNCid,MemberofSou).

where:

@begin{itemize}
@item
Source is the component identifier for this object table.
@item
TableName is the name of the object table in the database.
@item
NOidAttr is the column name of the key column of the object table.
@item
NameAttr is the column name of field that contains the name field
  for the object.  (If there is no special one, it should be the same
  as NOidAttr.)
@item
con is the constant 'con' (for now), meaning that the class containing
  all the objects in the object table is a single fixed class.
@item
MemberofNCid is the Native ID of the class of which all these objects
  are members.
@item
MemberofSou is the Source of this memberof class.
@end{itemize}

The caller must have previously opened an ODBC connection, named
Source, by using odbc_open/4, before these routines will work.

For each functional attribute represented in an object_table, there
must be a fact of the following form:

ext_functional_attribute_table(Source,RelationNatCid,RelationSou,TarAttr,Trans).

where:

@begin{itemize}
@item
Source is the component identifier for this object table.
@item
RelationsNatCid is the Native ID of the OMS relationship for this
  attribute.
@item
RelationSou is the Source of the OMS relationship for this attribute.
@item
TarAttr is the name of the column(s) in the table containing the value
of this attribute.  If the internal target type is a product type,
then this is a list of the column names of the columns that contain
the product values.  The predicate coerce_db_type/2 converts from
internal Native Ids to (and from) (lists of) data field values.
@item
Trans is an atom that indicates the type of translation from internal to
external format.  Normally it is 'std'.
@end{itemize}

There must be a schrel in the OMS for each of these OMS relationships
indicating the type of the attribute value, which must be one of
atom(_) or integer(_).  (This will be expanded...)

For each attribute table, there must be a fact of the following form:

ext_attribute_table(Source,TableName,NOidAttr,
		    RelationNatCid,RelationSou,TarAttr,Trans)

where:
@begin{itemize}
@item
Source is the component identifier for this object table.
@item
TableName is the name of the attribute table in the database.
@item
NOidAttr is the column name of the column of the attribute table which
  is a foreign key to the object table.
@item
RelationsNatCid is the Native ID of the OMS relationship for this
  attribute.
@item
RelationSou is the Source of the OMS relationship for this attribute.
@item
TarAttr is the name of the column in the table containing the value of
  this attribute.
@item
Trans is an atom that indicates the type of translation from internal to
external format.  Normally it is 'std'.
@end{itemize}

For each functional attribute_object, there must be a fact of the
following form:

ext_functional_attribute_object_table(Source,RelationNatCid,RelationSou,
				      TarAttr,TarSource)

where

@begin{itemize}
@item
Source is the component identifier for this object table.
@item
RelationsNatCid is the Native ID of the OMS relationship for this
  attribute.
@item
RelationSou is the Source of the OMS relationship for this attribute.
@item
TarAttr is the name of the column in the table containing the value of
  a native object ID.
@item
TarSource is the Source of the native Oids in the TarAttr field.
@end{itemize}

For each attribute_object table, there must be a fact of the following form:

ext_attribute_object_table(Source,TableName,NOidAttr,
			   RelationNatCid,RelationSou,TarAttr,TarSource)

where:
@begin{itemize}
@item
Source is the component identifier for this object table.
@item
TableName is the name of the attribute table in the database.
@item
NOidAttr is the column name of the column of the attribute table which
  is a foreign key to the object table.
@item
RelationsNatCid is the Native ID of the OMS relationship for this
  attribute.
@item
RelationSou is the Source of the OMS relationship for this attribute.
@item
TarAttr is the name of the column in the table containing the value of
  a native object ID.
@item
TarSource is the Source of the native Oids in the TarAttr field.
@end{itemize}

").

:- dynamic ext_object_table/7.
:- dynamic ext_functional_attribute_table/5.
:- dynamic ext_attribute_table/7.
:- dynamic ext_functional_attribute_object_table/5.
:- dynamic ext_attribute_object_table/7.

/****************************************************************/
/*								*/
/* Objects from an Updatable External Object Data Source 	*/
/*								*/
/****************************************************************/
object_int_udb(Name,NatId,Source) :-
	ext_object_table(Source,TableName,NOidAttr,NameAttr,_CP,_MC,_MS),
	%%writeln(ob_int(Name,NatId,Source)),
	(nonvar(NatId)
	 ->	(ob_id_map(_Oid,Name,NatId,Source)
		 ->	true
		 ;	odbc_sql_local(Source,
				       [NatId],
				       ['select ',NameAttr,
					' from ',TableName,
					' where ',NOidAttr,' = ?'],
				       [Name])
		)
	 ;	odbc_sql_local(Source,
			       [],
			       ['select ',NOidAttr,',',NameAttr,
				' from ',TableName],
			       [NatId,Name])
	).

retractall_oms_int_udb(oms_obj(Oid,Name,NatId,Source)) :- 
	ob_id_map(Oid,Name,NatId,Source),
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,_CP,_MC,_MS),
	%%writeln(ret_ob_int(Oid,Name,NatId,Source)),
	retractall(ob_id_map(Oid,Name,NatId,Source)),
	odbc_sql_local(Source,
		       [NatId],
		       ['delete from ',TableName,
			' where ',NOidAttr,' = ?'
			],[]).

assert_oms_int_udb(oms_obj(Oid,Name,NatId,Source)) :-
	ext_object_table(Source,TableName,NOidAttr,NameAttr,_CP,_MC,_MS),
	%%writeln(new_ob_int(Name,Cid,NatId,Source)),
	(NOidAttr == NameAttr
	 ->	odbc_sql_local(Source,
			       [NatId],
			       ['insert into ',TableName,
				' (',NOidAttr,')',
				' values (?)'
				],
			       [])
	 ;	odbc_sql_local(Source,
			       [NatId,Name],
			       ['insert into ',TableName,
				'(',NOidAttr,',',NameAttr,')',
				' values (?,?)'
				],
			       [])
	),
	writeln(added_new_obj(Oid,Name,NatId,Source)),
	asserta(ob_id_map(Oid,Name,NatId,Source)).

assert_oms_int_udb(oms_mo(Oid,Cid)) :-
	nonvar(Oid),
	ob_id_map(Oid,_Name,NatId,Source),
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,CP,MC,MS),
	class(Cid,_,MCid,MS),
	(CP == con
	 ->	MCid == MC
	 ;	odbc_sql_local(Source,
			       [NatId,MCid],
			       ['insert into ',TableName,
				' (',NOidAttr,',',MC,')',
				' values (?,?)'
				],
			       [])
	).


/****************************************************************/
/*								*/
/* Memberof from an Updatable External Object Data Source 	*/
/*								*/
/****************************************************************/
immediate_memberof_int_udb(NatOID,Source,NatCid,CSou) :-
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,CP,MC,CSou),
	%%writeln(db_im_mo(NatOID,Source,NatCid,CSou)),
	(nonvar(NatOID)
	 ->	(CP == con
		 ->	NatCid=MC
		 ;	odbc_sql_local(Source,
				       [NatOID],
				       ['select ',MC,
					' from ',TableName,
					' where ',NOidAttr,' = ?'],
				       [NatCid])
		)
	 ;	(CP == con
		 ->	NatCid=MC,
			object(_,_,NatOID,Source)
		 ;	odbc_sql_local(Source,
				       [],
				       ['select ',NOidAttr,', ',MC,
					' from ',TableName],
				       [NatOID,NatCid])
		)
	).

retractall_oms_int_udb(oms_mo(Oid,Cid)) :-
	nonvar(Oid),
	object(Oid,_,NatOid,Source),
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,CP,MC,CSou),
	class(Cid,_,MCid,CSou),
	(CP == con
	 ->	MCid == MC		% noop, since not there anyway
	 ;	odbc_sql_local(Source,
			       [NatOid],
			       ['update ',TableName,
				' set ',MC, ' = NULL',
				' where ',NOidAttr, ' = ?'
				],
			       []
			      )
	).

/****************************************************************/
/*								*/
/* Attributes from an Updatable External Object Data Source 	*/
/*								*/
/****************************************************************/
immediate_attribute_int_udb(SNOid,Source,RNCid,RSou,TNCid,TSou) :-
	ext_object_table(Source,OTableName,ONOidAttr,_NameAttr,_CP,_MC,_CSou),
	(ext_functional_attribute_table(Source,RNCid,RSou,TarAttr,Tran),
	 TableName = OTableName,
	 NOidAttr = ONOidAttr
	 ;
	 ext_attribute_table(Source,TableName,NOidAttr,RNCid,RSou,TarAttr,Tran)
	),
	class(RCid,_,RNCid,RSou),
	%%writeln(im_at_int(SNOid,RNCid,TNCid)),
	(nonvar(SNOid)
	 ->	(atom(TarAttr)
		 ->	odbc_sql_local(Source,
				       [SNOid],
				       ['select ',TarAttr,
					' from ',TableName,
					' where ',NOidAttr,' = ?'],
				       Results)
		 ;	db_build_commasep(TarAttr,Query,
					  [' from ',TableName,' where ',NOidAttr,' = ?']),
			odbc_sql_local(Source,
				       [SNOid],
				       ['select '|Query],
				       Results)
		),
		object(SOid,_,SNOid,Source),
		schrel(SCid,RCid,Type),
		memberof(SOid,SCid),
		class(Type,_,NType,TSou),
		coerce_db_type(NType,Tran,TNCid,Results,[])
	 ;	writeln('ERROR: Attribute_int must have NatOId bound'),
		fail
	)
	%%,writeln(im_attr(SNOid,RNCid,TNCid))
	.

retractall_oms_int_udb(oms_at(Oid,RCid,TCid)) :-
	nonvar(RCid),
	ob_id_map(Oid,_Name,NatId,Source), % object must exist
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,_CP,_MC,_MS),
	class(RCid,_,RNCid,RSou),
	%%writeln(ret_at_int(NatId,RNCid,TCid)),
	(ext_functional_attribute_table(Source,RNCid,RSou,TarAttr,_Tran),
	 (atom(TarAttr)
	  ->	 odbc_sql_local(Source,
				[NatId],
				['update ',TableName,
				 ' set ',TarAttr,' = NULL',
				 ' where ',NOidAttr,' = ?'],
				[])
	  ;	 db_build_nulls(TarAttr,EqNull,[' where ',NOidAttr,' = ?']),
		 odbc_sql_local(Source,
				[NatId],
				['update ',TableName,
				 ' set '|EqNull],
				[])
	 )
	 ;
	 ext_attribute_table(Source,ATableName,ANOidAttr,RNCid,RSou,TarAttr,Tran),
	 (nonvar(TCid)
	  ->	 class(TCid,_,TNCid,_),
		 coerce_db_type(TNCid,Tran,TNCid,DBVal,[]),
		 (atom(TarAttr)
		  ->	 odbc_sql_local(Source,
					[NatId|DBVal],
					['delete from ',ATableName,
					 ' where ',ANOidAttr,' = ?',
					 ' and ',TarAttr,' = ?'],[])
		  ;	 db_build_condition(TarAttr,Cond,[]),
			 odbc_sql_local(Source,
					[NatId|DBVal],
					['delete from ',ATableName,
					 ' where ',ANOidAttr,' = ?',
					 ' and '|Cond],[])
		 )
	  ;	 odbc_sql_local(Source,
				[NatId],
				['delete from ',ATableName,
				 ' where ',ANOidAttr,' = ?'],[])
	 )
	).

assert_oms_int_udb(oms_at(Oid,RCid,TCid)) :-
	ob_id_map(Oid,_Name,NatId,Source), % object must exist
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,_CP,_MC,_MS),
	class(RCid,_,RNCid,RSou),
	(ext_functional_attribute_table(Source,RNCid,RSou,TarAttr,Tran),
	 class(TCid,_,TNCid,_),
	 coerce_db_type(TNCid,Tran,TNCid,TVal,[]),
	 append(TVal,[NatId],InpPars),
	 (atom(TarAttr)
	  ->	 odbc_sql_local(Source,
				InpPars,
				['update ',TableName,
				 ' set ',TarAttr,' = ?',
				 ' where ',NOidAttr,' = ?'],
				[])
	  ;	 db_build_sets(TarAttr,Sets,[' where ',NOidAttr,' = ?']),
		 odbc_sql_local(Source,
				InpPars,
				['update ',TableName,
				 ' set '|Sets],
				[])
	 )
	 ;
	 ext_attribute_table(Source,ATableName,ANOidAttr,RNCid,RSou,TarAttr,Tran),
	 class(TCid,_,TNCid,_),
	 coerce_db_type(TNCid,Tran,TNCid,TVal,[]),
	 (atom(TarAttr)
	  ->	 odbc_sql_local(Source,
				[NatId|TVal],
				['insert into ',ATableName,
				 '(',ANOidAttr,',',TarAttr,')',
				 ' values (?,?)'
				 ],
				[])
	  ;	 db_build_questions(TarAttr,Ques,[')']),
		 db_build_commasep(TarAttr,Tail,[') values (?,'|Ques]),
		 odbc_sql_local(Source,
				[NatId|TVal],
				['insert into ',ATableName,
				 '(',ANOidAttr,','|Tail
				 ],
				[])
	 )
	).


/************************************************************************/
/*									*/
/* Attribute_objects from an Updatable External Object Data Source 	*/
/*									*/
/************************************************************************/
attribute_object_int_udb(SNOid,Source,RNCid,RSou,TNCid,TSou) :-
	ext_object_table(Source,OTableName,ONOidAttr,_NameAttr,_CP,_MC,_CSou),
	(ext_functional_attribute_object_table(Source,RNCid,RSou,TarAttr,TSou),
	 TableName = OTableName,
	 NOidAttr = ONOidAttr
	 ;
	 ext_attribute_object_table(Source,TableName,NOidAttr,RNCid,RSou,TarAttr,TSou)
	),
	class(RCid,_,RNCid,RSou),
	%%writeln(im_at_int(SNOid,RNCid,TNCid)),
	(nonvar(SNOid)
	 ->	object(SOid,_,SNOid,Source),
		schrel(SCid,RCid,object(_)),
		memberof(SOid,SCid), \+ SCid = object(_),
		odbc_sql_local(Source,
			       [SNOid],
			       ['select ',TarAttr,
				' from ',TableName,
				' where ',NOidAttr,' = ?'],
			       [TNCid])
	 ;	writeln('ERROR: Attribute_object_int must have NatId bound'),
		fail
	)
	%%,writeln(im_attr(SNOid,RNCid,TNCid))
	.

retractall_oms_int_udb(oms_ao(Oid,RCid,TOid)) :-
	nonvar(RCid),
	ob_id_map(Oid,_Name,NatId,Source), % object must exist
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,_CP,_MC,_MS),
	class(RCid,_,RNCid,RSou),
	%%writeln(ret_ao_int(NatId,RNCid,TOid)),
	(ext_functional_attribute_object_table(Source,RNCid,RSou,TarAttr,TSou),
	 odbc_sql_local(Source,
			[NatId],
			['update ',TableName,
			 ' set ',TarAttr,' = NULL',
			 ' where ',NOidAttr,' = ?'],
			[])
	 ;
	 ext_attribute_object_table(Source,ATableName,ANOidAttr,RNCid,RSou,TarAttr,TSou),
	 (nonvar(TOid)
	  ->	 object(TOid,_,DBVal,TSou),
		 odbc_sql_local(Source,
				[NatId,DBVal],
				['delete from ',ATableName,
				 ' where ',ANOidAttr,' = ?',
				 ' and ',TarAttr,' = ?'],[])
	  ;	 odbc_sql_local(Source,
				[NatId],
				['delete from ',ATableName,
				 ' where ',ANOidAttr,' = ?'],[])
	 )
	),
	oms_update_list([ext_update(oms_ao(Oid,RCid,TOid))]).

assert_oms_int_udb(oms_ao(Oid,RCid,TOid)) :-
	ob_id_map(Oid,_Name,NatId,Source), % object must exist
	ext_object_table(Source,TableName,NOidAttr,_NameAttr,_CP,_MC,_MS),
	class(RCid,_,RNCid,RSou),
	%%writeln(new_ao_int(NatId,RNCid,TOid)),
	object(TOid,_,TVal,TSou),
	(ext_functional_attribute_object_table(Source,RNCid,RSou,TarAttr,TSou),
	 odbc_sql_local(Source,
			[TVal,NatId],
			['update ',TableName,
			 ' set ',TarAttr,' = ?',
			 ' where ',NOidAttr,' = ?'],
			[])
	 ;
	 ext_attribute_object_table(Source,ATableName,ANOidAttr,RNCid,RSou,TarAttr,TSou),
	 odbc_sql_local(Source,
			[NatId,TVal],
			['insert into ',ATableName,
			 '(',ANOidAttr,',',TarAttr,')',
			 ' values (?,?)'
			 ],
			[])
	),
	oms_update_list([ext_update(oms_ao(Oid,RCid,TOid))]).

/****************************************************************/
/*								*/
/* Helper predicates for Updatable External Object Data Source 	*/
/*								*/
/****************************************************************/

%%% coerce_db_type(Type,Tran,NativeId,ExtVals0,ExtVals)
coerce_db_type(atom(_),std,atom('NULL'),['NULL'|X],X) :- !, fail.
coerce_db_type(atom(_),std,atom(Atom),[Atom|X],X) :- atom(Atom), !.
coerce_db_type(integer(_),std,integer(Int),[Int|X],X) :- integer(Int), !.
coerce_db_type(float(_),std,float(Flt),[Flt|X],X) :- float(Flt), !.
coerce_db_type(Type,Tran,NativeValue,ExtVals0,ExtVals) :-
	structure(Type),
	!,
	Type =.. [Ty|TypeArgs],
	(var(NativeValue)
	 ->	coerce_db_type_flatten(TypeArgs,Tran,NativeArgs,ExtVals0,ExtVals),
		NativeValue =.. [Ty|NativeArgs]
	 ;	NativeValue =.. [Ty|NativeArgs],
		coerce_db_type_flatten(TypeArgs,Tran,NativeArgs,ExtVals0,ExtVals)
	).
coerce_db_type(Type,std,NatId,[NatId|X],X) :-
	subclass(NatId,Type).

coerce_db_type_flatten([],_,[],ExtVals,ExtVals).
coerce_db_type_flatten([Type,Sou|TypeArgs],Tran,[Value,Sou|NativeArgs],ExtVals0,ExtVals) :-
	coerce_db_type(Type,Tran,Value,ExtVals0,ExtVals1),
	coerce_db_type_flatten(TypeArgs,Tran,NativeArgs,ExtVals1,ExtVals).

db_build_condition([Attr],[Attr,' = ?'|C],C) :- !.
db_build_condition([Attr|Attrs],[Attr,' = ? and '|C0],C) :-
	db_build_condition(Attrs,C0,C).

db_build_nulls([Attr],[Attr,' = NULL'|X],X) :- !.
db_build_nulls([Attr|Attrs],[Attr,' = NULL, '|X0],X) :-
	db_build_nulls(Attrs,X0,X).

db_build_sets([Attr],[Attr,' = ?'|X],X) :- !.
db_build_sets([Attr|Attrs],[Attr,' = ?, '|X0],X) :-
	db_build_sets(Attrs,X0,X).

db_build_commasep([Attr],[Attr|A],A) :- !.
db_build_commasep([Attr|Attrs],[Attr,', '|A0],A) :-
	db_build_commasep(Attrs,A0,A).

db_build_questions([_],['?'|Q],Q) :- !.
db_build_questions([_|As],['?,'|Q0],Q) :-
	db_build_questions(As,Q0,Q).

odbc_sql_local(Connection,Input,Statement,Output):- 
	writeln('SQL_CALL'(Statement,Input)),
	findall(O,odbc_sql(Connection,Input,Statement,O),Outputs1),
	sort(Outputs1,Outputs),
	member(Output,Outputs).

assert_ifnew(Head,Body) :-
	(clause(Head,Body)
	 ->	true
	 ;	assert((Head:-Body))
	).

:- assert_ifnew(object_int(Name,NatID,Source),
		 object_int_udb(Name,NatID,Source)).

:- assert_ifnew(immediate_memberof_int(NOid,Source,NCid,CSource),
		immediate_memberof_int_udb(NOid,Source,NCid,CSource)).

:- assert_ifnew(immediate_attribute_int(SNOid,Source,RNCid,RSou,TNCid,TSou),
		 immediate_attribute_int_udb(SNOid,Source,RNCid,RSou,TNCid,TSou)).

:- assert_ifnew(attribute_object_int(SNOid,Source,RNCid,RSou,TNOid,TSou),
		 attribute_object_int_udb(SNOid,Source,RNCid,RSou,TNOid,TSou)).

:- assert_ifnew(assert_oms_int(Term),assert_oms_int_udb(Term)).

:- assert_ifnew(retractall_oms_int(Term),retractall_oms_int_udb(Term)).

