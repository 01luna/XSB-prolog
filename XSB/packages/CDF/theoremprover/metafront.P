/*
:- export metafront/2.
*/

:- import tp_gensym/2,reset_gennum/0, tp_gennum/1 from tp_utils.

/*
   without atleast(N,R,C) and atmost(N,R,C) this is the logic ALCN
   with them, it is ALCQ.
   Adding relational intersection gives ALCQR
   Adding inverse roles gives ALCQI
*/

/* Used to enable generation of rel hierarchy rules through at_most
   (which does not create new variable */
:- dynamic am_visited_rel/2.
:- dynamic am_visited_invrel/2.

/* Ground existential closure in arg 3 of visited_rel.  Used to gen
   negative calls.  */
:- dynamic negated_rel/2.
/* Ground existential closure in arg 1 of visited_rel.  Used to gen
   negative calls.  */
:- dynamic negated_invrel/2.

:- dynamic visited_rel/3.
:- dynamic visited_invrel/3.

:- dynamic visited_sc/2.

/* Translates DL form to a type of query form, 
   and marks all relations and scs visited.  */

metafront(Expr,Expr1):- 
	reset_gennum,
	Var = x,
	setup_globals(Var),
	metafront_1(Expr,Var,Expr1).

setup_globals(Var):-
	abolish_all_tables,
	retractall(am_visited_rel(_,_)),
	retractall(am_visited_invrel(_,_)),
	retractall(visited_rel(_,_,_)),
	retractall(visited_invrel(_,_,_)),
	retractall(visited_sc(_,_)),
	retractall(negated_rel(_,_)),
	retractall(negated_invrel(_,_)),
	assert(visited_rel(null,null,Var)).

metafront_1(','(Term,R),Var,','(T1,R1)):- !,
	metafront_1(Term,Var,T1),
	metafront_1(R,Var,R1).
metafront_1(';'(D1,D2),Var,';'(D1out,D2out)):- !,
	metafront_1(D1,Var,D1out),
	metafront_1(D2,Var,D2out).
metafront_1(not(C),V,Output):- !,
	metafront_1_not(C,V,Output).
metafront_1(exists(inv(Rel),C),V,exists(inv(Rel),V,Onew,Oset)):- !,
	get_new_invrel_vars(V,Rel,Vset,Vnew),
	instantiate_invrels(Vset,V,Rel,C,Vnew,Oset,Onew).
metafront_1(exists(Rel,C),V,exists(Rel,V,Onew,Oset)):- !,
	get_new_rel_vars(V,Rel,Vset,Vnew),
	instantiate_rels(Vset,V,Rel,C,Vnew,Oset,Onew).

metafront_1(all(inv(Rel),C),V,Output):- !,
	(C = omsroot -> 
             Output = true
	   ;   
	     Output = allinvrel(V,Rel,C),
	     assert_if_not(negated_invrel(V,Rel)) ).
metafront_1(all(Rel,C),V,Output):- !,
	(C = omsroot -> 
             Output = true
	   ;   
	     Output = allrel(V,Rel,C),
	     assert_if_not(negated_rel(V,Rel)) ).

metafront_1(at_least(N,Rel),V,Out):- !,
	metafront_1(at_least(N,Rel,omsroot),V,Out).
metafront_1(at_most(N,Rel),V,Out):- !,
	metafront_1(at_most(N,Rel,omsroot),V,Out).

metafront_1(at_least(0,_Rel,_),_V,true):- !.
metafront_1(at_least(N,inv(Rel),C),V,
                           at_least(N,invrel(V,Rel,_),Cold,Cnew)):- !,
	assert_q_invrel_domain(N,V,Rel,C,Cold,Cnew).
metafront_1(at_least(N,Rel,C),V,at_least(N,rel(V,Rel,_),Cold,Cnew)):- !,
	assert_q_rel_domain(N,V,Rel,C,Cold,Cnew).
metafront_1(at_most(0,Rel,C),V,Out):- !,
	metafront_1_not(exists(Rel,C),V,Out).
metafront_1(at_most(N,inv(Rel),C),V,at_most(N,invrel(V,Rel,_),C)):- !,
	assert_if_not(am_visited_invrel(V,Rel)).
metafront_1(at_most(N,Rel,C),V,at_most(N,rel(V,Rel,_),C)):- !,
	assert_if_not(am_visited_rel(V,Rel)).
metafront_1(Term,V,mo(V,Term)):- 
	assert_if_not(visited_sc(V,Term)).

metafront_1_not(','(Term,R),Var,';'(T1,R1)):- !,
	metafront_1_not(Term,Var,T1),
	metafront_1_not(R,Var,R1).
metafront_1_not(';'(D1,D2),Var,','(D1out,D2out)):- !,
	metafront_1_not(D1,Var,D1out),
	metafront_1_not(D2,Var,D2out).
metafront_1_not(not(C),V,Output):- !,
	metafront_1(C,V,Output).
metafront_1_not(exists(inv(Rel),C),V,Output):- !,
	(C = top -> 
             Output = not(invrel(V,Rel))
	   ;   
             Output = notallinvrel(V,Rel,C)),
	assert_if_not(negated_invrel(V,Rel)).
metafront_1_not(exists(Rel,C),V,Output):- !,
	(C = top -> 
             Output = not(rel(V,Rel))
	   ;   
             Output = notallrel(V,Rel,C)),
	assert_if_not(negated_rel(V,Rel)).
metafront_1_not(all(inv(Rel),C),V,Output):- !,
	get_new_invrel_vars(V,Rel,Vset,Vnew),
	instantiate_neg_invrels(Vset,V,Rel,C,Vnew,Output).
metafront_1_not(all(Rel,C),V,Output):- !,
	get_new_rel_vars(V,Rel,Vset,Vnew),
	instantiate_neg_rels(Vset,V,Rel,C,Vnew,Output).
metafront_1_not(at_least(N,Rel),V,Out):- !,
	metafront_1_not(at_least(N,Rel,omsroot),V,Out).
metafront_1_not(at_least(0,_Rel,_),_V,_Out):- !,
	abort('not(at_least(0,Rel)) encountered').
metafront_1_not(at_least(1,Rel,C),V,Out):- !,
	metafront_1_not(exists(Rel,C),V,Out).
metafront_1_not(at_least(N,inv(Rel),C),V,at_most(N1,invrel(V,Rel,_),C)):- !,
	N1 is N - 1,
	assert_if_not(am_visited_invrel(V,Rel)).
metafront_1_not(at_least(N,Rel,C),V,at_most(N1,rel(V,Rel,_),C)):- !,
	N1 is N - 1,
	assert_if_not(am_visited_rel(V,Rel)).

metafront_1_not(at_most(N,Rel),V,Out):- !,
	metafront_1_not(at_most(N,Rel,omsroot),V,Out).
metafront_1_not(at_most(N,inv(Rel),C),V,
                                at_least(N1,invrel(V,Rel,_),Cold,Cnew)):- !,
	N1 is N + 1,
	assert_q_invrel_domain(N1,V,Rel,C,Cold,Cnew).
metafront_1_not(at_most(N,Rel,C),V,at_least(N1,rel(V,Rel,_),Cold,Cnew)):- !,
	N1 is N + 1,
	assert_q_rel_domain(N1,V,Rel,C,Cold,Cnew).
metafront_1_not(Term,V,not(mo(V,Term))):-
	assert_if_not(visited_sc(V,Term)).

%-------------------------
get_new_rel_vars(V,Rel,Yset,Ynew):-
	(findall(Y,visited_rel(V,Rel,Y),Yset),
             get_newvar(y,Ynew),
	     assert(visited_rel(V,Rel,Ynew)) ).

get_newvar(y,Ynew):- 
	    tp_gensym(y,Ynew).

instantiate_rels([],V,Rel,C,Vnew,true,Onew):- !,
	instantiate_rel(V,Rel,C,Vnew,Onew).
instantiate_rels([LastNew],V,Rel,C,Vnew,Output,NewOutput):- !,
	instantiate_rel(V,Rel,C,LastNew,Output),
	instantiate_rel(V,Rel,C,Vnew,NewOutput).
instantiate_rels([Vold|Vset],V,Rel,C,Vnew,';'(O1,O2),New):- 
	instantiate_rel(V,Rel,C,Vold,O1),
	instantiate_rels(Vset,V,Rel,C,Vnew,O2,New).

instantiate_rel(V,Rel,C,Vnew,O1):- 
	(C == omsroot -> 
	     O1 = rel(V,Rel,Vnew)
	   ; 
	     metafront_1(C,Vnew,Cnew),
	     O1 = ','(rel(V,Rel,Vnew),Cnew) ).

%----------------------
get_new_invrel_vars(V,Rel,Yset,Ynew):-
	(findall(Y,visited_invrel(V,Rel,Y),Yset),
             tp_gensym(y,Ynew),
	     assert(visited_invrel(V,Rel,Ynew)) ).

instantiate_invrels([],V,Rel,C,Vnew,true,Onew):- !,
	instantiate_invrel(V,Rel,C,Vnew,Onew).
instantiate_invrels([LastNew],V,Rel,C,Vnew,Output,NewOutput):- !,
	instantiate_invrel(V,Rel,C,LastNew,Output),
	instantiate_invrel(V,Rel,C,Vnew,NewOutput).
instantiate_invrels([Vold|Vset],V,Rel,C,Vnew,';'(O1,O2),New):- 
	instantiate_invrel(V,Rel,C,Vold,O1),
	instantiate_invrels(Vset,V,Rel,C,Vnew,O2,New).

instantiate_invrel(V,Rel,C,Vnew,O1):- 
	(C == omsroot -> 
	     O1 = invrel(V,Rel,Vnew)
	   ; 
	     metafront_1(C,Vnew,Cnew),
	     O1 = ','(invrel(V,Rel,Vnew),Cnew) ).

%----------------------

instantiate_neg_invrels([],V,Rel,C,Vnew,Output):- !,
	instantiate_neg_invrel(V,Rel,C,Vnew,Output).
instantiate_neg_invrels(Vset,V,Rel,C,Vnew,';'(O1,O2)):- 
	instantiate_neg_invrel(V,Rel,C,Vnew,O1),
	instantiate_neg_invrel_list(Vset,V,Rel,C,O2).

instantiate_neg_invrel_list([Vold],V,Rel,C,O1):- !,
	instantiate_neg_invrel(V,Rel,C,Vold,O1).
instantiate_neg_invrel_list([Vold|Rest],V,Rel,C,';'(O1,O2)):- !,
	instantiate_neg_invrel(V,Rel,C,Vold,O1),
	instantiate_neg_invrel_list(Rest,V,Rel,C,O2).
	
instantiate_neg_invrel(V,Rel,C,Vnew,O1):- 
	(C == omsroot -> 
	     O1 = invrel(V,Rel,Vnew)
	   ; 
	     metafront_1_not(C,Vnew,Cnew),
	     O1 = ','(invrel(V,Rel,Vnew),Cnew) ).

%----------------------

instantiate_neg_rels([],V,Rel,C,Vnew,Output):- !,
	instantiate_neg_rel(V,Rel,C,Vnew,Output).
instantiate_neg_rels(Vset,V,Rel,C,Vnew,';'(O1,O2)):- 
	instantiate_neg_rel(V,Rel,C,Vnew,O1),
	instantiate_neg_rel_list(Vset,V,Rel,C,O2).

instantiate_neg_rel_list([Vold],V,Rel,C,O1):- !,
	instantiate_neg_rel(V,Rel,C,Vold,O1).
instantiate_neg_rel_list([Vold|Rest],V,Rel,C,';'(O1,O2)):- !,
	instantiate_neg_rel(V,Rel,C,Vold,O1),
	instantiate_neg_rel_list(Rest,V,Rel,C,O2).
	
instantiate_neg_rel(V,Rel,C,Vnew,O1):- 
	(C == omsroot -> 
	     O1 = rel(V,Rel,Vnew)
	   ; 
	     metafront_1_not(C,Vnew,Cnew),
	     O1 = ','(rel(V,Rel,Vnew),Cnew) ).

%----------------------

assert_q_rel_domain(N,V,Rel,C,OldOut,NewOut):-
	findall(Var,visited_rel(V,Rel,Var),OldVars),
	assert_q_rel_domain_1(N,V,Rel,NewVars),
	assert_q_rel_domain_2(OldVars,C,OldOut),
	assert_q_rel_domain_2(NewVars,C,NewOut).

assert_q_rel_domain_1(0,_,_,[]):- !.
assert_q_rel_domain_1(N,V,Rel,[Y|Rest]):- 
	N1 is N - 1,
	tp_gensym(y,Y),
	assert(visited_rel(V,Rel,Y)),
	assert_q_rel_domain_1(N1,V,Rel,Rest).

assert_q_rel_domain_2([],_,[]).
assert_q_rel_domain_2([Var|R],C,[lambda(Var,Cnew)|R1]):- 
	metafront_1(C,Var,Cnew),
	assert_q_rel_domain_2(R,C,R1).

%----------------------

assert_q_invrel_domain(N,V,Rel,C,OldOut,NewOut):-
	findall(Var,visited_invrel(V,Rel,Var),OldVars),
	assert_q_invrel_domain_1(N,V,Rel,NewVars),
	assert_q_invrel_domain_2(OldVars,C,OldOut),
	assert_q_invrel_domain_2(NewVars,C,NewOut).

assert_q_invrel_domain_1(0,_,_,[]):- !.
assert_q_invrel_domain_1(N,V,Rel,[Y|Rest]):- 
	N1 is N - 1,
	tp_gensym(y,Y),
	assert(visited_invrel(V,Rel,Y)),
	assert_q_invrel_domain_1(N1,V,Rel,Rest).

assert_q_invrel_domain_2([],_,[]).
assert_q_invrel_domain_2([Var|R],C,[lambda(Var,Cnew)|R1]):- 
	metafront_1(C,Var,Cnew),
	assert_q_invrel_domain_2(R,C,R1).

%----------------------

assert_if_not(Term):- 
	(call(Term) -> true ; assert(Term)).

end_of_file.

/*
q_metafront(0,_,_,_,[]):- !.
q_metafront(N,V,Rel,C,[lambda(Y,Cnew)|T]):- 
	N1 is N - 1,
	metafront_1(C,Y,Cnew),
	q_metafront(N1,V,Rel,C,T).
*/

get_new_c_rule(Head):- 
	tp_gensym(c,Head).

emit_list(','(H,T)):- !,
	emit_list(H),
	emit_list(T).
emit_list(T):- emit(T).

?-  retractall(user_replacement_hook(_,_,_,_),
    assert((user_replacement_hook(rel(L,U,R,C)):- 
	    write(L),write(' { '),
	    write(R),write(' , '),write(C),
	    write(' } '),write(U))).[

/*
metafront_1(exists(inv(Rel),C),V,Output):- !,
	get_new_invrel_var(V,Rel,Vnew),
	(C = omsroot -> 
             Output = invrel(V,Rel,Vnew)
	   ;   
	     metafront_1(C,Vnew,Cnew),
	     Output = ','(invrel(V,Rel,Vnew),Cnew)).
metafront_1(exists(Rel,C),V,Output):- !,
	get_new_rel_var(V,Rel,Vnew),
	(C = omsroot -> 
             Output = rel(V,Rel,Vnew)
	   ;   
	     metafront_1(C,Vnew,Cnew),
	     Output = ','(rel(V,Rel,Vnew),Cnew)).
*/

assert_rel_domain(N,rel(V,Rel,_Var)):- 
	findall(Old,visited_rel(V,Rel,Old),Oldl),
	length(Oldl,Oldlen),
	N1 is N - Oldlen,
	(N1 =< 0 -> 
	    true 
	  ;
	    get_n_new_vars(N1,Varlist),
	    vrel_assert(Varlist,V,Rel) ).

assert_invrel_domain(N,invrel(V,Rel,_Var)):- 
	findall(Old,visited_invrel(V,Rel,Old),Oldl),
	length(Oldl,Oldlen),
	N1 is N - Oldlen,
	(N1 =< 0 -> 
	    true 
	  ;
	    get_n_new_vars(N1,Varlist),
	    invrel_assert(Varlist,V,Rel) ).

/*
metafront_1_not(all(inv(Rel),C),V,Output):- !,
	get_new_invrel_var(V,Rel,Vnew),
        metafront_1_not(C,Vnew,Cnew),
	Output = ','(invrel(V,Rel,Vnew),Cnew).
metafront_1_not(all(Rel,C),V,Output):- !,
	get_new_invrel_vars(V,Rel,Vset,Vnew),
	get_new_rel_var(V,Rel,Vnew),
        metafront_1_not(C,Vnew,Cnew),
	Output = ','(rel(V,Rel,Vnew),Cnew).
*/

/* assert only if *no* rels visited */
get_new_rel_var(V,Rel,Y):-
	(visited_rel(V,Rel,Y) -> 
	     true
	   ; 
             tp_gensym(y,Y),
	     assert(visited_rel(V,Rel,Y)) ).

/* assert only if *no* invrels visited */
get_new_invrel_var(V,Rel,Y):-
	(visited_invrel(V,Rel,Y) -> 
	     true
	   ; 
             tp_gensym(y,Y),
	     assert(visited_invrel(V,Rel,Y)) ).

get_new_invrel_var(V,Rel,Y):-
	(visited_invrel(V,Rel,Y) -> 
	     true
	   ; 
             tp_gensym(y,Y),
	     assert(visited_invrel(V,Rel,Y)) ).

vrel_assert([],_,_).
vrel_assert([H|T],V,Rel):- 
	assert(visited_rel(V,Rel,H)),
	vrel_assert(T,V,Rel).

invrel_assert([],_,_).
invrel_assert([H|T],V,Rel):- 
	assert(visited_invrel(V,Rel,H)),
	invrel_assert(T,V,Rel).

get_n_new_vars(0,[]):-!.
get_n_new_vars(N,[H|T]):-
	tp_gensym(y,H),
	N1 is N - 1,
	get_n_new_vars(N1,T).

