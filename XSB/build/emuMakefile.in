##############################################################################
#									     #
# This is a Makefile for making the XSB emu directory.			     #
# It has two main entries: xsb and xsbora. The latter for generating         #
# executables with oracle support.					     #
# The EXECUTABLE variable is set by the top make file, build/Makefile        #
#									     #
##############################################################################

## File:      emuMakefile.in
## Author(s): kifer (adapted from the original XSB makefile)
## Copyright (C) The Research Foundation of SUNY, 1998
## 
## XSB is free software; you can redistribute it and/or modify it under the
## terms of the GNU Library General Public License as published by the Free
## Software Foundation; either version 2 of the License, or (at your option)
## any later version.
## 
## XSB is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
## more details.
## 
## You should have received a copy of the GNU Library General Public License
## along with XSB; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## $Id: emuMakefile.in,v 1.20 1999-10-12 18:53:07 ejohnson Exp $
## 


CC=@CC@
CPP=@CPP@
CFLAGS=@CFLAGS@
# Flags for files requiring lower optimization level (emuloop.c)
emuloopCFLAGS=@emuloopCFLAGS@
trutilsCFLAGS=@trutilsCFLAGS@
CPPFLAGS=@CPPFLAGS@
LDFLAGS=@LDFLAGS@

# This one is used for SGI only
LINKFLAGS=@LINKFLAGS@

# Substitute an assignment for the MAKE variable, because
# BSD doesn't have it as a default.
@SET_MAKE@


# just to be sure the sh is used 
SHELL=/bin/sh


# The default location for installation. 
prefix=@prefix@
# where sources are
srcdir=@topdir@
VPATH=@topdir@
# Like `prefix', but used for architecture-specific files.
arch_config_prefix=@arch_config_prefix@

# Where to install XSB binaries
bindir=$(arch_config_prefix)/bin
# where XSB emu directory lives
emudir=$(srcdir)/emu
# where the object code goes
arch_config_objlibdir=$(arch_config_prefix)/saved.o

emumake_goal=@emumake_goal@

# Passed in from the top Makefile
EXECUTABLE=xsb

#=======================================================================
# Stuff to automatically make the dependencies.
#=======================================================================
#
DEPEND = makedepend
#DEPENDFLAGS = -m
#


SRCS =	auxlry.c biassert.c builtin.c \
	chat.c cinterf.c debug.c dis.c dynload.c \
	emuloop.c findall.c function.c \
	hash.c heap.c init.c inst.c io_builtins.c \
	loader.c psc.c residual.c \
	scc.c self_orientation.c slgdelay.c \
	struct_manager.c sub_insert.c subp.c system.c \
	table_stats.c tables.c token.c tr_utils.c \
	trace.c tries.c tst_insert.c tst_retrv.c\
	tst_unify.c tst_utils.c \
	xmain.c xpathname.c xsb_memory.c \
	xsb_string.c xsberror.c xsbsocket.c

ORASRCS = $(SRCS) orastuff.c


OBJS =	auxlry.o biassert.o builtin.o \
	chat.o cinterf.o debug.o dis.o dynload.o \
	emuloop.o findall.o function.o \
	hash.o heap.o init.o inst.o io_builtins.o \
	loader.o private_builtin.o psc.o \
	residual.o scc.o self_orientation.o slgdelay.o \
	struct_manager.o sub_insert.o subp.o system.o \
	table_stats.o tables.o token.o tr_utils.o \
	trace.o tries.o tst_insert.o tst_retrv.o\
	tst_unify.o tst_utils.o \
	xpathname.o xsb_memory.o \
	xsb_string.o xsberror.o xsbsocket.o

allOBJS = xmain.o ${OBJS}

ORAOBJS = $(OBJS) orastuff.o

allORAOBJS = $(allOBJS) orastuff.o

xsb:: $(allOBJS)
	@echo ""; echo "Making XSB executable $(EXECUTABLE) "; echo ""
	cd $(emudir); \
	$(CC) -o $(EXECUTABLE) $(LINKFLAGS) $(allOBJS) $(LDFLAGS)

xsbora:: $(allORAOBJS)
	@echo ""; \
	  echo "Making XSB executable $(EXECUTABLE) with support for Oracle"; \
	  echo ""
	cd $(emudir); \
	$(CC) -o $(EXECUTABLE) $(LINKFLAGS) $(allORAOBJS) $(LDFLAGS)

# Goal for making an XSB load module to be linked with external
# C-drivers that pass queries to XSB
xsbmod:: $(OBJS)
	@echo ""; \
	   echo "Making a C-callable XSB module $(arch_config_objlibdir)/xsb.o"; \
	   echo ""
	ld -o xsb.o -r $(OBJS)
	@cp xsb.o $(arch_config_objlibdir) 2> /dev/null || echo ""

# same as xsbmod, but with oracle support
xsboramod:: $(ORAOBJS)
	@echo ""; \
	   echo "Making a C-callable XSB module $(arch_config_objlibdir)/xsb.o with support for Oracle"; \
	   echo ""
	ld -o xsb.o -r $(ORAOBJS)
	@cp xsb.o $(arch_config_objlibdir) 2> /dev/null || echo ""


depend::
	$(DEPEND) $(DEPENDFLAGS) -- $(CFLAGS) -- $(SRCS)


#=======================================================================
# Put in this group all actions (rules) of this Makefile.
#=======================================================================

init.o: init.c
	$(CC) -c $(CFLAGS) init.c
	@cp init.o $(arch_config_objlibdir) 2> /dev/null || echo ""

dynload.o: dynload.c
	$(CC) -c $(CFLAGS) dynload.c
	@cp dynload.o $(arch_config_objlibdir) 2> /dev/null || echo ""

emuloop.o: emuloop.c
	$(CC) -c $(emuloopCFLAGS) emuloop.c
	@cp emuloop.o $(arch_config_objlibdir) 2> /dev/null || echo ""

# Higher optimization level has problem with some versions of gcc
tr_utils.o: tr_utils.c
	$(CC) -c $(trutilsCFLAGS) tr_utils.c
	@cp tr_utils.o $(arch_config_objlibdir) 2> /dev/null || echo ""

.c.o:
	$(CC) -c $(CFLAGS) $*.c
	@cp $*.o $(arch_config_objlibdir) 2> /dev/null || echo ""


#=======================================================================
# All dependencies are automatically generated by makedepend.
#=======================================================================

# DO NOT DELETE THIS LINE -- `makedepend' depends on it!

