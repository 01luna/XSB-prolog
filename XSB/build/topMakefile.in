## File:      topMakefile.in
## Author(s): kifer
## Contact:   xsb-contact@cs.sunysb.edu
## 
## Copyright (C) The Research Foundation of SUNY, 1998
## 
## XSB is free software; you can redistribute it and/or modify it under the
## terms of the GNU Library General Public License as published by the Free
## Software Foundation; either version 2 of the License, or (at your option)
## any later version.
## 
## XSB is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
## more details.
## 
## You should have received a copy of the GNU Library General Public License
## along with XSB; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## $Id: topMakefile.in,v 1.29 1999-09-18 21:14:17 kifer Exp $
## 
##

###############################################################################
#  This is a top-level distribution Makefile for XSB.
#  The `configure' script uses this file as a template for creating Makefile
#
# make all	to compile and build XSB.
# make install	to install it.
#
# make clean
#      Delete all files from the distribution that are normally
#      created by building XSB, but preserve the files that 
#      record the configuration.
#
# make configclean
#	Delete architecture-specific files for the current architecture.
#
# make distclean
#      Delete all files from the current directory that are created by
#      configuring or building XSB.
# 
###############################################################################


SHELL = /bin/sh

# If Make doesn't predefine MAKE, set it here.
@SET_MAKE@

# ==================== Things `configure' Might Edit ====================

CC=@CC@
CPP=@CPP@
LDFLAGS=@LDFLAGS@
CPPFLAGS=@CPPFLAGS@

### These help us choose version- and architecture-specific directories
### to install files in. Not used for now.
xsb_version=@xsb_version@

### This should be the name of the configuration we're building XSB
### for, like `sparc-sun-sunos'.
configuration=@canonical@
config_tag=@config_tag@

# ==================== Where To Install XSB ====================

# Everything is placed in subdirectories of this directory.  
# The values for many of the variables below are expressed 
# in terms of this one, so you do not need to change them.
prefix=@prefix@

srcdir=@topdir@
VPATH=$(srcdir)

# where XSB lib directory lives
install_libdir=$(prefix)/lib
# where XSB syslib directory lives
install_syslibdir=$(prefix)/syslib
# where XSB cmplib directory lives
install_cmplibdir=$(prefix)/cmplib
# where packages are installed
install_pkgdir=$(prefix)/packages
# where etc are installed
install_etcdir=$(prefix)/etc
# where .h files will be copied
install_emudir=$(prefix)/emu


# Like `prefix', but used for architecture-specific files.
src_config_prefix=@arch_config_prefix@
install_config_prefix=@arch_install_config_prefix@

src_emudir=$(srcdir)/emu

# where source lib directory lives
src_libdir=$(srcdir)/lib
# where source syslib directory lives
src_syslibdir=$(srcdir)/syslib
# where source cmplib directory lives
src_cmplibdir=$(srcdir)/cmplib
src_pkgdir=$(srcdir)/packages
src_etcdir=$(srcdir)/etc

src_config_libdir=$(src_config_prefix)/lib

# Where to install XSB binaries
install_bindir=$(install_config_prefix)/bin
# where arch-dependent XSB .{P,H,O} files go
install_config_libdir=$(install_config_prefix)/lib
# where the scripts go
install_scriptdir=$(prefix)/bin

# where the object code goes
src_config_objlibdir=$(src_config_prefix)/saved.o
src_bindir=$(src_config_prefix)/bin
src_scriptdir=$(srcdir)/bin

EXECUTABLE=$(src_bindir)/xsb

# where the object code is found
arch_config_objlibdir=$(src_config_prefix)/saved.o

# If building with Oracle, `configure' will set this to `xsbora' target.
# Otherwise, it'll be the `xsb' target. 
# If this (topMakefile) is invoked through the `module' goal, then
# emuMakefile will be invoked through `xsbmod or `xsboramod' targets.
emumake_goal=@emumake_goal@


# Allow the user to specify the install program.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@


# Normal user
all: prepare emu gpp remake_dot_O_files configure_packages_src register emu_clean 

# Developer who just checked out or updated CVS copy
devel: prepare emu gpp remake_dot_O_files configure_packages_src emu_clean

superdevel: prepare emu gpp remake_dot_O_files_force configure_packages_src emu_clean

# Developer who needs a quick re-make of the executable
fast: prepare emu gpp emu_clean

prepare:
	@cd $(src_emudir); \
	  rm -f *.o Makefile \
	    configs/config.h debugs/debug.h  2> /dev/null || echo "" ; \
	  ln ${src_config_prefix}/config.h configs ; \
	  ln ${src_config_prefix}/debug.h debugs ; \
	  ln ${src_config_objlibdir}/*.o . 2> /dev/null || echo "" ; \
	  ln ${src_config_prefix}/emuMakefile ./Makefile
	@cd $(srcdir)/gpp; \
	  rm -f *.o Makefile ; \
	  ln ${src_config_prefix}/gppMakefile ./Makefile 
	@rm -f $(srcdir)/build/.*.tmp

emu: ${src_config_prefix}/config.h ${src_config_prefix}/debug.h
	cd ${src_emudir}; \
	    make depend; \
	    rm -f $(srcdir)/build/.xsb_build_failed; \
	    (make EXECUTABLE="$(EXECUTABLE)" $(emumake_goal) || \
	                touch $(srcdir)/build/.xsb_build_failed) \
		2>&1 | tee -a ../build/Installation_summary; \
	    (test ! -f $(srcdir)/build/.xsb_build_failed || \
	                    (rm -f $(srcdir)/build/.xsb_build_failed; exit 1))

gpp:
	cd $(srcdir)/gpp; make 2>&1 | tee -a ../build/Installation_summary

# Compiling the interface with SModels.
smodels:
	@cd $(src_pkgdir)/sModels; \
	  echo "Compiling smodels interface"; \
	  rm -f *.o Makefile *.h *.O *.so 2>/dev/null || echo ""; \
	  ln ${src_config_prefix}/smoMakefile ./Makefile; \
	  make XSB=$(src_scriptdir)/xsb$(config_tag) @smodels_goal@ 2>&1\
		 | tee -a ../../build/Installation_summary

# Goal for making an XSB load module to be linked with external
# C-drivers that pass queries to XSB
module: prepare xsbmod do_cleaning inform_module

# if supporting Oracle, then emumake_goal=xsbora; else emumake_goal=xsb
# This invokes xsboramod and xsbmod goals in emuMakefile, respectively
xsbmod: ${src_config_prefix}/config.h ${src_config_prefix}/debug.h
	cd ${src_emudir}; \
	    make $(emumake_goal)mod

emu_clean: do_cleaning inform_executable

do_cleaning:
	@cd $(src_emudir); \
	  rm -f *.o 2> /dev/null || echo "" ; \
	  rm -f Makefile Makefile.bak  2> /dev/null || echo ""
	@cd $(srcdir)/gpp ; \
	  rm -f Makefile Makefile.bak  2> /dev/null || echo ""
	@echo "" >> ./Installation_summary
	@echo "" >> ./Installation_summary
	@echo "    ----------------- End of Build ------------------------" >> ./Installation_summary
	@echo "" >> ./Installation_summary
	@cp ./Installation_summary $(src_config_prefix)
	@echo ""
	@cat /tmp/xsb_*lib_warn 2> /dev/null | \
			tee -a Installation_summary
	@cat /tmp/*match_warn 2> /dev/null | \
			tee -a Installation_summary
	@cat /tmp/flora_*_warn 2> /dev/null | \
			tee -a Installation_summary

inform_executable:
	@echo "" ; \
	    echo "Now you can run XSB using the shell script:" ; \
	    echo "       $(src_scriptdir)/xsb${config_tag}" ; \
	    echo ""

inform_module:
	@echo "" ; \
	    echo "The C-callable XSB module is in:"; \
	    echo "       $(arch_config_objlibdir)/xsb.o" ; \
	    echo ""

register:
	@./register.sh


install:: copy_files configure_packages_install

copy_files::
	@( test "${prefix}" = "${srcdir}" && \
	  echo "Installation dir = source dir: nothing to install" ) || \
	  ( echo "Installing XSB in ${prefix} ..." ; \
	    umask 022 ; \
	    echo "Copying executables..." ; \
	    ${INSTALL} ${src_bindir}/* ${install_bindir}  ; \
	    ${INSTALL} ${srcdir}/gpp/gpp ${install_bindir}  ; \
	    ${INSTALL} ${src_scriptdir}/xsb${config_tag} \
				${install_scriptdir}/xsb${config_tag}; \
	    chmod 755 ${install_scriptdir}/* ${install_bindir}/* ; \
	    cp -f ${srcdir}/build/config.sub \
		  ${srcdir}/build/config.guess \
		  ${prefix}/build; \
	    chmod 755 ${prefix}/build/* ; \
	    echo "Copying config..." ; \
	    cp -f ${src_config_libdir}/xsb_configuration.* \
	          ${install_config_libdir} ; \
	    chmod 644 ${install_config_libdir}/xsb_configuration.* ; \
	    touch ${install_config_libdir}/xsb_configuration.O ; \
	    cp -f ${src_config_prefix}/banner.msg \
	          ${install_config_prefix} ; \
	    chmod 644 ${install_config_prefix}/banner.msg ; \
	    cp -f ${src_config_libdir}/* \
	          ${install_config_libdir} 2> /dev/null || echo ""; \
	    chmod 644 ${install_config_libdir}/* 2> /dev/null || echo ""; \
	    echo "Copying .h files from emu dir..." ; \
	    cp -f ${src_emudir}/cinterf.h ${src_emudir}/basictypes.h \
	          ${install_emudir} ; \
	    echo "Copying lib..." ; \
	    cp -f ${src_libdir}/*.O ${install_libdir} ; \
	    chmod 644 ${install_libdir}/*.O ; \
	    ./copysubdirs.sh ${src_libdir} ${install_libdir} ; \
	    echo "Copying syslib..." ; \
	    cp -f ${src_syslibdir}/*.O ${install_syslibdir} ; \
	    chmod 644 ${install_syslibdir}/*.O ; \
	    cp -f ${src_syslibdir}/debugger_data.P ${install_syslibdir} ; \
	    chmod 644 ${install_syslibdir}/*.O ${install_syslibdir}/*.P ; \
	    ./copysubdirs.sh ${src_syslibdir} ${install_syslibdir} ; \
	    echo "Copying cmplib..." ; \
	    cp -f ${src_cmplibdir}/*.O ${install_cmplibdir} ; \
	    chmod 644 ${install_cmplibdir}/*.O ; \
	    ./copysubdirs.sh ${src_cmplibdir} ${install_cmplibdir} ; \
	    echo "Copying packages..."; \
	    cp -f ${src_pkgdir}/*.O ${install_pkgdir}; \
	    cp -f ${src_pkgdir}/*.P ${install_pkgdir}; \
	    touch ${install_pkgdir}/*.O; \
	    ./copysubdirs.sh ${src_pkgdir} ${install_pkgdir} ; \
	    echo "Copying etc..."; \
	    cp -fr ${src_etcdir}/* ${install_etcdir}; \
	    echo "Installed!" \
	  )

configure_packages_src: smodels
	./pkg_config.sh $(src_scriptdir)/xsb$(config_tag) | \
	    	    	    	    	    tee -a Installation_summary ; \
	  chmod 644  $(src_config_libdir)/xsb_configuration.O

configure_packages_install:
	@./pkg_config.sh $(install_scriptdir)/xsb$(config_tag) ; \
	  chmod 644  $(install_config_libdir)/xsb_configuration.O

remake_dot_O_files:
	cd $(srcdir); make XSB=$(src_scriptdir)/xsb$(config_tag)

remake_dot_O_files_force:
	cd $(srcdir); make force XSB=$(src_scriptdir)/xsb$(config_tag)

# clean for this architecture only
configclean::
	rm -rf $(src_config_prefix)/*

# clean out all architectures
distclean:
	rm -rf $(srcdir)/config/*
	rm -f $(srcdir)/bin/*
	rm -f $(srcdir)/emu/*.o

# clean only the object code for this architecture
clean:
	rm -f ${src_config_objlibdir}/*
	rm -f ${src_emudir}/*.o

# recreate the makefiles
again: Makefile.in emuMakefile.in config.status ${src_config_prefix}/config.cache
	./config.status

config.status:
${src_config_prefix}/config.cache:

