/* File:      foreign.P
** Author(s): Jiyang Xu, Kostis Sagonas
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** Copyright (C) ECRC, Germany, 1990
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: foreign.P,v 1.24 2000-01-07 08:55:02 kifer Exp $
** 
*/

:- compiler_options([xpp_on]).

#include "flag_defs_xsb.h"
#include "psc_defs.h"


/* need ldoption at compile time for ELF systems, so compile_H is done 1st. */
compile_cH(Modname, Base, Options, ExList, Dir) :-
	compile_H(Modname,Base,Options,ExList,LdOption,CompComm,TempFile),
	compile_c(Modname,Base,Options,Dir,LdOption,CompComm,TempFile).


%% This is a user-level predicate, that can be used to compile shared objects.
%% These files don't require .H. They are used as auxiliary dynamically 
%% linked libraries for foreign modules.
%%
%% COptions have the usual format: [cc(CC), cc_opts(Opts), ...]
%% LdOption is a string to pass to the loader (like what is put in ldoptions)
compile_so(Path, COptions, LdOptions) :-
	parse_filename(Path, Dir, BaseName, _Extension),
	fmt_write_string(PathSansExt, '%s/%s', args(Dir,BaseName)),
	compile_c(BaseName, PathSansExt, COptions, Dir, LdOptions, _, _).


%% User-level predicate that yields the flag suitable for defining 
%% the runtime loader library search path. This flag (along with the string 
%% dir:dir:dir should be added to ldoptions when the foreign module 
%% itself dynamically links with other C libraries. See packages/libwww/ 
%% for an example.
%% If this predicate fails to return an appropriate flag, things might still 
%% work, if the OS allows to change LD_LIBRARY_PATH at runtime, 
%% because XSB adds the -L libraries to this environment variable.
%% The Hints argument is currently ignored. Will be used to allow the 
%% application to provide hints that can help find the right runtime flag.
runtime_loader_flag(_Hints, Flag) :-
	xsb_configuration(configuration, Configuration),
	(   str_sub(solaris, Configuration)
	->  Flag = '-R'
	;   str_sub(linux, Configuration)
	->  Flag = '-Wl,-R'
	;   str_sub(netbsd, Configuration)
	->  Flag = '-Wl,-R'
	;   str_sub(freebsd, Configuration)
	->  Flag = '-R'
	;   str_sub(openbsd, Configuration)
	->  Flag = '-R'
	;   fail
	).
	


%% Options: C options
%% LdOptions: Loader options
%% CompCom: compiler command--for testing?
%% TempFile: Directory
compile_c(Modname, Base, Options, Dir, LdOption, CompComm, TempFile) :-
	xsb_configuration(configuration, Configuration),
	cc_name(Options, CC_Name),
	cc_options(CC_Name, Options, CC_Opts),
	message(('[Compiling C file ', Base, '.c using ', CC_Name, ']')),
	( var(LdOption) -> LdOption = '' ; true ),
	( var(TempFile) -> TempFile = ''; true),
	(   var(CompComm)
	->  (	str_sub('solaris', Configuration)
	    ->	shell([CC_Name, ' -s -o ', Base, '.so', ' -G ',
		       Base, '.c ', TempFile, ' ', CC_Opts, ' ', LdOption])
	    ;	str_sub('linux', Configuration)
	    ->	shell([CC_Name, ' -s -o ', Base, '.so', ' -shared ',
		       Base, '.c ', TempFile, ' ', CC_Opts, ' ', LdOption])
	    /*
	    , message((CC_Name, ' -s -o ', Base, '.so', ' -shared ',
		       Base, '.c ', TempFile, ' ', CC_Opts, ' ', LdOption))
	    */
	    ;	str_sub('alpha', Configuration)
	    ->	shell([CC_Name, ' -c ', Base, '.c ', TempFile, ' ',CC_Opts]),
		shell(['ld -expect_unresolved \* -O1 -shared -o ',
		       Base, '.so ', Base, '.o ', LdOption])
	    ;	str_sub('windows', Configuration)
	    ->	warning(('You must create the ', Modname,'.dll'))
	    ;	shell([CC_Name, ' -c ', Base, '.c ', TempFile, ' ', CC_Opts]),
	        /* The following is here because C compilers usually put 
	           the object file in the current directory
	           and not in the source one. */
	        (   Dir == './'
		->  true
		;   shell(['mv ', Modname, '.o ', Dir])
		)
	    )
        ;   shell([CompComm])
        ).

cc_name(Options, CC_Name) :-
	( memberchk(cc(CC_Name), Options), atom(CC_Name) -> true
	;   xsb_configuration(compiler, CC_Name)
	).
cc_options(CC_Name, Options, CC_Opts) :-
	xsb_configuration(emudir, Emudir),
	xsb_configuration(config_dir, ConfigDir),
	(   memberchk(cc_opts(CC_Opts1), Options)
	->  fmt_write_string(CC_Opts2, '-I%s -I%s %s',
			     args(Emudir,ConfigDir,CC_Opts1))
	;   str_cat('-I', Emudir, CC_Opts2)
	),
	(  CC_Name == gcc 
	-> str_cat(' -Wall ', CC_Opts2, CC_Opts)
	;  CC_Opts = CC_Opts2
	).

compile_H(Modname, Base, Options, ExList, LdOption, CompComm, TempFile) :-
	hdr_ext(HExt),
	str_cat(Base, HExt, HFile),
	( file_exists(HFile) ->
	    (	Options == [] 
	    ->	M = ''
	    ;	M = ' (Prolog compiler options are ignored)'
	    ),
	    message(('[Compiling Foreign Module ', Base, M, ']')),
	    cputime(TimeStart),
	    seeing(OldFile),
	    telling(OldTell),
%%%	    see(HFile),
	    repeat,
	    open_or_xpp_file(HFile,CPPprocess),
	    read_clauses(Modname,ExList,'',LdOption,CompComm,TempFile), !,
	    (	CPPprocess = none, ! 
	    ;	process_control(CPPprocess,wait),
		stat_flag(CURRENT_INPUT,FromPort),
		file_close(FromPort)
	    ),
	    closefile(TempFile),
	    see(OldFile),
	    conset(xpp_on,0),
%%%         seen,
	    length(ExList, Count),
	    obj_ext(OExt),
	    str_cat(Base, OExt, OFile),
	    tell(OFile),
	    co_asmhead(Modname, LdOption, Count),
	    co_asmsym(ExList),
	    told,
	    tell(OldTell),
	    time_message(TimeStart, (Modname, ' compiled'))
	;   abort(('File ', HFile, ' for foreign module does not exist'))
	),
	!.

read_clauses(ModName, ExList, LdOptionIn, LdOptionOut, CompComm, TempFile) :-
	read(Clause),
	(   Clause == end_of_file
	->  LdOptionOut = LdOptionIn
        ;   (   Clause = (':-'(export(Exports)))
	    ->	add_to_exlist(Exports, ExList),
		LdOptionMid = LdOptionIn
	    ;	Clause = (':-'(ldoption(Opt)))
	    ->	form_ld_option(Opt, LdOptionIn, LdOptionMid)
	    ;	Clause = (':-'(compiler_options(CompOpt)))
	    ->	(memberchk(xpp_on,CompOpt), conget(xpp_on,0)
		->  closefile(TempFile),
		    conset(xpp_on,1),
		    seen, 
		    fail
		;   LdOptionMid = LdOptionIn)
	    ;	Clause = (':-'(compile_command(CompComm)))
	    ->	LdOptionMid = LdOptionIn
	    ;	Clause = (':-'(foreign_pred(PredDecl)))
	    ->	checkfile(ModName, TempFile), % creates tempfile if necessary
	        process_from(PredDecl,Exports),
		add_to_exlist(Exports,ExList),
		LdOptionMid = LdOptionIn
	    ;	LdOptionMid = LdOptionIn % all other clauses are ignored
	    ),
            read_clauses(ModName, ExList, LdOptionMid, LdOptionOut, 
			 CompComm, TempFile)
        ).


form_ld_option([], In, In) :- !.
form_ld_option([Opt|Opts], In , Out) :- !,
	form_ld_option(In, Opt, Mid), form_ld_option(Opts, Mid, Out).
form_ld_option(Opt, In, Out) :-
	str_cat(In, Opt, M), str_cat(M, ' ', Out).

add_to_exlist(P/A, ExList) :- !, attach(P/A, ExList).
add_to_exlist((Pred, Preds), ListType) :- !,
        add_to_exlist(Pred, ListType),
        add_to_exlist(Preds, ListType).

co_asmhead(Modname, LdOption, PSC_Count) :-
	asm_magic(8),
	str_len(Modname, Length),
	put(Length),
	write(Modname),
	( LdOption == '' -> put(0) % No ldoption was specified (length is 0).
	; str_len(LdOption, LdoLen), asm_putlength(LdoLen), write(LdOption)
	),
	write_int(PSC_Count).

co_asmsym([]).
co_asmsym([One|ExList]) :- co_one(One), co_asmsym(ExList).

co_one(P/A) :-
	str_len(P, L),
	put(0),			% domain = ex(ported)
	put(T_FORN),		% type = T_FORN (in psc_xsb.h)
	put(A),			% arity = a
	asm_putlength(L),	% length
	write(P).		

/*======================================================================*/
/* format: 
		+-----------------------+
		| magic = 8		|
		+-----------------------+------------------+
		| len  |  module name (len size)	   |
		+-----------------------+----------+-------+
		| len  |  ld option		   |
		+-----------------------+----------+
		| psc count		|
		+-----------------------+

		+-----------------------+-------------------------------+
	count:	| 0 | 13 | 0 |arity|len |  symbol name			|
		+-----------------------+-------------------------------+
		... ... ... ...
		... ... ... ...

	Note that a foreign module is always a Module (len size =/= 0).
*/
/*======================================================================*/

%% Wrapper-generation
%% Author: Luis Castro
%% Date: 08/99

checkfile(ModName, TempFile) :- 
	var(TempFile), !,
	str_cat('xsb_wrap_',ModName,TTName),
	str_cat(TTName,'.c',TempFile),
	tell(TempFile),
	write_header.
checkfile(_ModName,_TempFile).

closefile(TempFile) :- 
	var(TempFile), !.
closefile(_TempFile) :- 
	told.



