/* File:      prof_sbp.P
** Author(s): Kostis F, Sagonas, Jiyang Xu 
** Contact:   xsb-contact@cs.sunysb.edu
** 
** Copyright (C) The Research Foundation of SUNY, 1986, 1993-1998
** Copyright (C) ECRC, Germany, 1990
** 
** XSB is free software; you can redistribute it and/or modify it under the
** terms of the GNU Library General Public License as published by the Free
** Software Foundation; either version 2 of the License, or (at your option)
** any later version.
** 
** XSB is distributed in the hope that it will be useful, but WITHOUT ANY
** WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
** FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for
** more details.
** 
** You should have received a copy of the GNU Library General Public License
** along with XSB; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**
** $Id: prof_sbp.P,v 1.4 1999-08-03 19:15:08 kifer Exp $
** 
*/


/*======================================================================*/
/* prepare for compiler and type inference				*/
/*======================================================================*/

prepare :- conset(gennum_val, 300).	/* for gennum and gensym */
		/* big number to avoid conflict in internal variable */
		/* generated by gennum with read-in variable numbered */
		/* from 0 above */

/*======================================================================*/
/* The following predicates may be standard in some variation of Prolog,*/
/* may have different meanings.						*/
/*   Include here for compatibility.					*/
/*======================================================================*/

/*----member------------------------------------------------------------*/

member(X,[X|_]).
member(X,[_|L]) :- member(X,L).

/*----otherwise---------------------------------------------------------*/

otherwise.

/*----name_append-------------------------------------------------------*/

name_append(C1, C2, C3) :- atom(C1), atom(C2), !,
	atom_codes(C1, N1),
	atom_codes(C2, N2),
	append(N1, N2, N3),
	atom_codes(C3, N3).
name_append(C1, C2, C3) :- atom(C2), atom(C3),  !,
	atom_codes(C3, N3),
	atom_codes(C2, N2),
	append(N1, N2, N3),
	atom_codes(C1, N1).

/*----append------------------------------------------------------------*/

append([], L, L).
append([X|L1], L2, [X|L3]) :- append(L1, L2, L3).

/*----conlength---------------------------------------------------------*/

conlength(Con, Length) :-
	conname(Con, Name), str_len(Name, Len), Length = Len.

/*----gennum------------------------------------------------------------*/

gennum(N) :- conget(gennum_val, O), N is O + 1, conset(gennum_val, N).

/*----gensym------------------------------------------------------------*/

gensym(R, C) :-
	gennum(N), atom_codes(R, N1), name(N, N2),
	append(N1, N2, N3), atom_codes(C, N3).

/*----copyterm----------------------------------------------------------*/
/* Get a copy of the Term, with a new set of variables.			*/

copyterm(Term, NewTerm) :- copyterm(Term, NewTerm, _).

copyterm(Term, NewTerm, VarDict) :- var(Term), !,
	dict_lookup(Term, NewTerm, VarDict).
copyterm(Term, Term, _) :- atomic(Term), !.
copyterm(Term, NewTerm, VarDict) :- 
	functor(Term, Func, Arity),
	functor(NewTerm, Func, Arity),
	copyterm_args(Term, NewTerm, Arity, VarDict).

copyterm_args(_, _, 0, _) :- !.
copyterm_args(Term, NewTerm, N, VarDict) :-
	arg(N, Term, Arg),
	copyterm(Arg, NewArg, VarDict),
	arg(N, NewTerm, NewArg),
	N1 is N - 1,
	copyterm_args(Term, NewTerm, N1, VarDict).

myclose(F) :- tell(F), told.

conset(Con, Val) :- 
	conpsc(Con, Psc), psc_set_prop(Psc, Val).

conget(Con, Val) :- 
	conpsc(Con, Psc), psc_prop(Psc, Val0), Val = Val0.

coninc(Con) :-
	conpsc(Con, Psc), psc_prop(Psc, N),
	NewN is N+1, psc_set_prop(Psc, NewN).

write_int(Num) :- 
	stat_flag(11, File),
	file_puttoken(File, 16, Num).

write_float(Num) :- 
	stat_flag(11, File),
	file_puttoken(File, 17, Num).

/*======================================================================*/
/* counter routines. A counter is a unary term.				*/
/*======================================================================*/

newcounter(C) :- conpsc(C, Psc), psc_set_type(Psc, 8),
	arg(1, C, V), 
	( integer(V), V0 = V
	; V0 = 0
	),
	psc_set_prop(Psc, V0).

inccounter(C) :- conpsc(C, Psc), psc_prop(Psc, V), 
		 V1 is V + 1, psc_set_prop(Psc, V1).

getcounter(C) :- conpsc(C, Psc), psc_prop(Psc, V), arg(1, C, V).


/*======================================================================*/
/*  ll_arg(+Index, +Term, ?Arg).					*/
/*	Provides the system a low-level arg/3 predicate that does not	*/
/*	check for error conditions and only covers the case when Term	*/
/*	is a structure (other than a list structure) and  Index is an	*/
/*	integer that is between 1 and the arity of Term.		*/
/*======================================================================*/

ll_arg(Index, Term, Arg) :-
	term_arg(Term, Index, A),
	A = Arg.

